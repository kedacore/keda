#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

SCRIPT_ROOT=$(dirname "${BASH_SOURCE[0]}")/..
CODEGEN_PKG=${CODEGEN_PKG:-$(cd "${SCRIPT_ROOT}"; ls -d -1 ./vendor/k8s.io/code-generator 2>/dev/null || echo ../code-generator)}

# generate the code with:
# --output-base    because this script should also be able to run inside the vendor dir of
#                  k8s.io/kubernetes. The output-base is needed for the generators to output into the vendor dir
#                  instead of the $GOPATH directly. For normal projects this can be dropped.
# bash "${CODEGEN_PKG}"/generate-groups.sh "deepcopy,client,informer,lister" \
# Deepcopy is generated by operator-sdk
bash "${CODEGEN_PKG}"/generate-groups.sh "client,informer,lister" \
  github.com/kedacore/keda/v2/pkg/generated github.com/kedacore/keda/v2/api \
  keda:v1alpha1 \
  --go-header-file "${SCRIPT_ROOT}"/hack/boilerplate.go.txt

# (Zbynek): If v2 is specified in go.mod, codegen unfortunately outputs to 'v2/pkg/generated' instead of 'pkg/generated',
# therefore we need to move the generated code around the repo a bit
if [ -d v2/pkg/generated ]; then
  rm -rf pkg/generated
  mv v2/pkg/generated pkg/
  rm -rf v2
fi

# (Zbynek): Kubebuilder project layout has api under 'api/v1alpha1'
# client-go codegen expects group name in the path ie. 'api/keda/v1alpha'
# Because there's no way how to modify any of these settings,
# we need to hack things a little bit (replace the name of package)
find pkg/generated -type f -name "*.go" |\
xargs sed -i".out" -e "s#github.com/kedacore/keda/v2/api/keda/v1alpha1#github.com/kedacore/keda/v2/api/v1alpha1#g"
find pkg/generated -type f -name "*.go.out" | xargs rm -rf
