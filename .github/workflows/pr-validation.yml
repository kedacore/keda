name: CI
on:
  - pull_request
jobs:
  validate:
    name: Validate PR
    runs-on: ubuntu-latest
    container: ubuntu:focal
    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: Install necessary packages
        run: apt update && apt install -y make ca-certificates gcc

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set Go paths
        id: go-paths
        run: |
          echo ::set-output name=mod_cache::$(go env GOMODCACHE)
          echo ::set-output name=build_cache::$(go env GOCACHE)

      - name: Go modules cache
        uses: actions/cache@v3.0.4
        with:
          path: ${{ steps.go-paths.outputs.mod_cache }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Go build cache
        uses: actions/cache@v3.0.4
        with:
          path: ${{ steps.go-paths.outputs.build_cache }}
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}

      - name: Go modules sync
        run: go mod tidy

      - name: Verify Generated clientset is up to date
        run: make clientset-verify

      - name: Build
        run: make build

      - name: Test
        run: make test

      - name: Create test Summary
        uses: test-summary/action@v1
        with:
          paths: "report.xml"
        if: always()

  validate-arm64:
    name: Validate PR on ARM64
    runs-on: ARM64
    container: arm64v8/ubuntu:focal
    env:
      ARCH: arm64
    steps:
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: Install necessary packages
        run: apt update && apt install -y make ca-certificates gcc

      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Set Go paths
        id: go-paths
        run: |
          echo ::set-output name=mod_cache::$(go env GOMODCACHE)
          echo ::set-output name=build_cache::$(go env GOCACHE)

      - name: Go modules cache
        uses: actions/cache@v3.0.4
        with:
          path: ${{ steps.go-paths.outputs.mod_cache }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      - name: Go build cache
        uses: actions/cache@v3.0.4
        with:
          path: ${{ steps.go-paths.outputs.build_cache }}
          key: ${{ runner.os }}-go-build-cache-${{ hashFiles('**/go.sum') }}

      - name: Go modules sync
        run: go mod tidy

      - name: Verify Generated clientset is up to date
        run: make clientset-verify

      - name: Build
        run: make build

      - name: Test
        run: make test

      - name: Create test Summary
        uses: test-summary/action@v1
        with:
          paths: "report.xml"
        if: always()

  validate-dockerfiles:
    name: Validate Dockerfiles
    runs-on: ubuntu-latest
    container: ghcr.io/kedacore/build-tools:main
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            dockerfiles:
              - 'Dockerfile*'

      - name: Build images
        if: steps.filter.outputs.dockerfiles == 'true'
        run: make docker-build

  validate-build-tools:
    name: Validate build-tools
    runs-on: ubuntu-latest
    container: ghcr.io/kedacore/build-tools:main
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            tools:
              - 'tools/**'

      - name: Set up QEMU
        if: steps.filter.outputs.tools == 'true'
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: steps.filter.outputs.tools == 'true'
        uses: docker/setup-buildx-action@v2

      - name: Build tools
        if: steps.filter.outputs.tools == 'true'
        run: make docker-build-tools

  validate-dev-container:
    name: Validate dev-container
    runs-on: ubuntu-latest
    container: ghcr.io/kedacore/build-tools:main
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            devcontainer:
              - '.devcontainer/Dockerfile'

      - name: Build tools
        if: steps.filter.outputs.devcontainer == 'true'
        run: make docker-build-dev-containers

  validate-dev-container-arm64:
    name: Validate dev-container on ARM64
    runs-on: ARM64
    container: arm64v8/ubuntu:focal
    env:
      DEBIAN_FRONTEND: noninteractive
    steps:
      - uses: actions/checkout@v3

      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            devcontainer:
              - '.devcontainer/Dockerfile'

      - name: Setup Go
        if: steps.filter.outputs.devcontainer == 'true'
        uses: actions/setup-go@v3
        with:
          go-version: 1.17

      - name: Install deps
        if: steps.filter.outputs.devcontainer == 'true'
        run: |
          apt update && apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common lsb-release make
          curl -fsSL https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]')/gpg | apt-key add - 2>/dev/null
          add-apt-repository "deb [arch=$(dpkg --print-architecture)] https://download.docker.com/linux/$(lsb_release -is | tr '[:upper:]' '[:lower:]') $(lsb_release -cs) stable"
          apt-get update
          apt-get install -y docker-ce-cli

      - name: Build tools
        if: steps.filter.outputs.devcontainer == 'true'
        run: make docker-build-dev-containers

  statics:
    name: Static Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4.0.0
        with:
          python-version: 3.x
      - uses: actions/setup-go@v3
        with:
          go-version: 1.17
      - name: Get golangci
        run: curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.46.2
      - uses: pre-commit/action@v3.0.0

  codeScanning:
    name: Code Scanning
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        language: ['go']
        # Learn more... https://docs.github.com/en/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#overriding-automatic-language-detection

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        # We must fetch at least the immediate parents so that if this is
        # a pull request then we can checkout the head.
        fetch-depth: 2

    # If this run was triggered by a pull request event, then checkout
    # the head of the pull request instead of the merge commit.
    - run: git checkout HEAD^2
      if: ${{ github.event_name == 'pull_request' }}

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: ${{ matrix.language }}

    # Autobuild attempts to build any compiled languages  (C/C++, C#, or Java).
    # If this step fails, then you should remove it and run the build manually (see below)
    - name: Autobuild
      uses: github/codeql-action/autobuild@v2

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  trivy-scanner:
    name: Trivy Scan
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Run Trivy vulnerability scanner in repo mode
      uses: aquasecurity/trivy-action@0.5.1
      with:
        scan-type: 'fs'
        ignore-unfixed: false
        format: 'table'
        exit-code: 1
        skip-dirs: tests # Remove this once the ts files are removed
