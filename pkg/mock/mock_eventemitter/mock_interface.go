// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/eventemitter/eventemitter.go

// Package mock_eventemitter is a generated GoMock package.
package mock_eventemitter

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	eventdata "github.com/kedacore/keda/v2/pkg/eventemitter/eventdata"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MockEventDataHandler is a mock of EventDataHandler interface.
type MockEventDataHandler struct {
	ctrl     *gomock.Controller
	recorder *MockEventDataHandlerMockRecorder
}

// MockEventDataHandlerMockRecorder is the mock recorder for MockEventDataHandler.
type MockEventDataHandlerMockRecorder struct {
	mock *MockEventDataHandler
}

// NewMockEventDataHandler creates a new mock instance.
func NewMockEventDataHandler(ctrl *gomock.Controller) *MockEventDataHandler {
	mock := &MockEventDataHandler{ctrl: ctrl}
	mock.recorder = &MockEventDataHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEventDataHandler) EXPECT() *MockEventDataHandlerMockRecorder {
	return m.recorder
}

// CloseHandler mocks base method.
func (m *MockEventDataHandler) CloseHandler() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CloseHandler")
}

// CloseHandler indicates an expected call of CloseHandler.
func (mr *MockEventDataHandlerMockRecorder) CloseHandler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseHandler", reflect.TypeOf((*MockEventDataHandler)(nil).CloseHandler))
}

// EmitEvent mocks base method.
func (m *MockEventDataHandler) EmitEvent(eventData eventdata.EventData, failureFunc func(eventdata.EventData, error)) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EmitEvent", eventData, failureFunc)
}

// EmitEvent indicates an expected call of EmitEvent.
func (mr *MockEventDataHandlerMockRecorder) EmitEvent(eventData, failureFunc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EmitEvent", reflect.TypeOf((*MockEventDataHandler)(nil).EmitEvent), eventData, failureFunc)
}

// GetActiveStatus mocks base method.
func (m *MockEventDataHandler) GetActiveStatus() v1.ConditionStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveStatus")
	ret0, _ := ret[0].(v1.ConditionStatus)
	return ret0
}

// GetActiveStatus indicates an expected call of GetActiveStatus.
func (mr *MockEventDataHandlerMockRecorder) GetActiveStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveStatus", reflect.TypeOf((*MockEventDataHandler)(nil).GetActiveStatus))
}

// SetActiveStatus mocks base method.
func (m *MockEventDataHandler) SetActiveStatus(status v1.ConditionStatus) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetActiveStatus", status)
}

// SetActiveStatus indicates an expected call of SetActiveStatus.
func (mr *MockEventDataHandlerMockRecorder) SetActiveStatus(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActiveStatus", reflect.TypeOf((*MockEventDataHandler)(nil).SetActiveStatus), status)
}
