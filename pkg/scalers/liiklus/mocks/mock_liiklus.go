// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kedacore/keda/v2/keda-scalers/liiklus (interfaces: LiiklusServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=pkg/scalers/liiklus/mocks/mock_liiklus.go github.com/kedacore/keda/v2/keda-scalers/liiklus LiiklusServiceClient
//

// Package mock_liiklus is a generated GoMock package.
package mock_liiklus

import (
	context "context"
	reflect "reflect"

	liiklus "github.com/kedacore/keda/v2/keda-scalers/liiklus"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockLiiklusServiceClient is a mock of LiiklusServiceClient interface.
type MockLiiklusServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLiiklusServiceClientMockRecorder
	isgomock struct{}
}

// MockLiiklusServiceClientMockRecorder is the mock recorder for MockLiiklusServiceClient.
type MockLiiklusServiceClientMockRecorder struct {
	mock *MockLiiklusServiceClient
}

// NewMockLiiklusServiceClient creates a new mock instance.
func NewMockLiiklusServiceClient(ctrl *gomock.Controller) *MockLiiklusServiceClient {
	mock := &MockLiiklusServiceClient{ctrl: ctrl}
	mock.recorder = &MockLiiklusServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLiiklusServiceClient) EXPECT() *MockLiiklusServiceClientMockRecorder {
	return m.recorder
}

// Ack mocks base method.
func (m *MockLiiklusServiceClient) Ack(ctx context.Context, in *liiklus.AckRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Ack", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Ack indicates an expected call of Ack.
func (mr *MockLiiklusServiceClientMockRecorder) Ack(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ack", reflect.TypeOf((*MockLiiklusServiceClient)(nil).Ack), varargs...)
}

// GetEndOffsets mocks base method.
func (m *MockLiiklusServiceClient) GetEndOffsets(ctx context.Context, in *liiklus.GetEndOffsetsRequest, opts ...grpc.CallOption) (*liiklus.GetEndOffsetsReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetEndOffsets", varargs...)
	ret0, _ := ret[0].(*liiklus.GetEndOffsetsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndOffsets indicates an expected call of GetEndOffsets.
func (mr *MockLiiklusServiceClientMockRecorder) GetEndOffsets(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndOffsets", reflect.TypeOf((*MockLiiklusServiceClient)(nil).GetEndOffsets), varargs...)
}

// GetOffsets mocks base method.
func (m *MockLiiklusServiceClient) GetOffsets(ctx context.Context, in *liiklus.GetOffsetsRequest, opts ...grpc.CallOption) (*liiklus.GetOffsetsReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOffsets", varargs...)
	ret0, _ := ret[0].(*liiklus.GetOffsetsReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffsets indicates an expected call of GetOffsets.
func (mr *MockLiiklusServiceClientMockRecorder) GetOffsets(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffsets", reflect.TypeOf((*MockLiiklusServiceClient)(nil).GetOffsets), varargs...)
}

// Publish mocks base method.
func (m *MockLiiklusServiceClient) Publish(ctx context.Context, in *liiklus.PublishRequest, opts ...grpc.CallOption) (*liiklus.PublishReply, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Publish", varargs...)
	ret0, _ := ret[0].(*liiklus.PublishReply)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Publish indicates an expected call of Publish.
func (mr *MockLiiklusServiceClientMockRecorder) Publish(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockLiiklusServiceClient)(nil).Publish), varargs...)
}

// Receive mocks base method.
func (m *MockLiiklusServiceClient) Receive(ctx context.Context, in *liiklus.ReceiveRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[liiklus.ReceiveReply], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Receive", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[liiklus.ReceiveReply])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Receive indicates an expected call of Receive.
func (mr *MockLiiklusServiceClientMockRecorder) Receive(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Receive", reflect.TypeOf((*MockLiiklusServiceClient)(nil).Receive), varargs...)
}

// Subscribe mocks base method.
func (m *MockLiiklusServiceClient) Subscribe(ctx context.Context, in *liiklus.SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[liiklus.SubscribeReply], error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Subscribe", varargs...)
	ret0, _ := ret[0].(grpc.ServerStreamingClient[liiklus.SubscribeReply])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockLiiklusServiceClientMockRecorder) Subscribe(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockLiiklusServiceClient)(nil).Subscribe), varargs...)
}
