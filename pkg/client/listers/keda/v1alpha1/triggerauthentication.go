/*
MIT License

Copyright (c) Microsoft Corporation. All rights reserved.

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kedacore/keda/pkg/apis/keda/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// TriggerAuthenticationLister helps list TriggerAuthentications.
type TriggerAuthenticationLister interface {
	// List lists all TriggerAuthentications in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.TriggerAuthentication, err error)
	// TriggerAuthentications returns an object that can list and get TriggerAuthentications.
	TriggerAuthentications(namespace string) TriggerAuthenticationNamespaceLister
	TriggerAuthenticationListerExpansion
}

// triggerAuthenticationLister implements the TriggerAuthenticationLister interface.
type triggerAuthenticationLister struct {
	indexer cache.Indexer
}

// NewTriggerAuthenticationLister returns a new TriggerAuthenticationLister.
func NewTriggerAuthenticationLister(indexer cache.Indexer) TriggerAuthenticationLister {
	return &triggerAuthenticationLister{indexer: indexer}
}

// List lists all TriggerAuthentications in the indexer.
func (s *triggerAuthenticationLister) List(selector labels.Selector) (ret []*v1alpha1.TriggerAuthentication, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TriggerAuthentication))
	})
	return ret, err
}

// TriggerAuthentications returns an object that can list and get TriggerAuthentications.
func (s *triggerAuthenticationLister) TriggerAuthentications(namespace string) TriggerAuthenticationNamespaceLister {
	return triggerAuthenticationNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// TriggerAuthenticationNamespaceLister helps list and get TriggerAuthentications.
type TriggerAuthenticationNamespaceLister interface {
	// List lists all TriggerAuthentications in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.TriggerAuthentication, err error)
	// Get retrieves the TriggerAuthentication from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.TriggerAuthentication, error)
	TriggerAuthenticationNamespaceListerExpansion
}

// triggerAuthenticationNamespaceLister implements the TriggerAuthenticationNamespaceLister
// interface.
type triggerAuthenticationNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all TriggerAuthentications in the indexer for a given namespace.
func (s triggerAuthenticationNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.TriggerAuthentication, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.TriggerAuthentication))
	})
	return ret, err
}

// Get retrieves the TriggerAuthentication from the indexer for a given namespace and name.
func (s triggerAuthenticationNamespaceLister) Get(name string) (*v1alpha1.TriggerAuthentication, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("triggerauthentication"), name)
	}
	return obj.(*v1alpha1.TriggerAuthentication), nil
}
