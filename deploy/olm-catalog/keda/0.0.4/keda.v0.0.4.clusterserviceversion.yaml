apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: keda.v0.0.4
  namespace: placeholder
  annotations:
    alm-examples: >-
      [{"apiVersion":"keda.k8s.io/v1alpha1","kind":"ScaledObject","metadata":{"name":"SCALED-OBJECT-NAME","labels":{"deploymentName":"DEPLOYMENT-NAME"}},"spec":{"scaleTargetRef":{"deploymentName":"DEPLOYMENT-NAME","containerName":"example-container"},"pollingInterval":30,"cooldownPeriod":300,"minReplicaCount":0,"maxReplicaCount":100,"triggers":null}},{"apiVersion":"keda.k8s.io/v1alpha1","kind":"TriggerAuthentication","metadata":{"name":"keda-trigger-auth-azure-queue-secret","namespace":"keda"},"spec":{"podIdentity":{"provider":"none
      | azure | gcp |
      spiffe"},"secretTargetRef":[{"parameter":"connectionString","name":"my-keda-secret-entity","key":"azure-storage-connectionstring"}],"env":[{"parameter":"region","name":"my-env-var","containerName":"my-container"}]}},{"apiVersion":"keda.k8s.io/v1alpha1","kind":"TriggerAuthentication","metadata":{"name":"example-triggerauthentication"},"spec":null},{"apiVersion":"keda.k8s.io/v1alpha1","kind":"ScaledObject","metadata":{"name":"example-scaledobject"},"spec":null}]
    categories: Cloud Provider
    certified: 'false'
    description: Kubernetes-based Event Driven Autoscaling
    containerImage: ''
    support: ''
    capabilities: Basic Install
    repository: 'https://github.com/kedacore/keda'
    createdAt: 2019-10-30T00:00:00.000Z
spec:
  displayName: KEDA
  description: >+
    KEDA is a Kubernetes-based event driven autoscaler.  KEDA can monitor event
    sources like Kafka, RabbitMQ, or cloud event sources and feed the metrics
    from those sources into the Kubernetes horizontal pod autoscaler.  With
    KEDA, you can have event driven and serverless scale of deployments within
    any Kubernetes cluster.


  maturity: alpha
  version: 0.0.4
  replaces: ''
  minKubeVersion: '1.11.0'
  keywords:
    - keda
    - scaling
    - event
  maintainers:
    - name: Keda Community
      email: keda-core@googlegroups.com
  provider:
    name: Microsoft and Red Hat
  labels:
    alm-owner-keda: keda
    operated-by: keda
  selector:
    matchLabels:
      alm-owner-keda: keda
      operated-by: keda
  links:
    - name: Keda Source Code
      url: 'https://github.com/kedacore/keda'
    - name: Slack Channel
      url: 'https://kubernetes.slack.com/messages/CKZJ36A5D'
  icon:
    - base64data: >-
        
      mediatype: image/png
  apiservicedefinitions:
    owned:
    - group: external.metrics.k8s.io
      kind: 
      version: v1beta1
      displayName: Metrics Server APIService
      description: Metrics Server APIService which is used internally by Keda.
      deploymentName: keda-operator
      containerPort: 6443  
      specDescriptors: []    
  customresourcedefinitions:
    owned:
      - kind: ScaledObject
        displayName: ScaledObject
        description: >-
          ScaledObject is used to define how KEDA should scale your application
          and what the triggers are.
        name: scaledobjects.keda.k8s.io
        version: v1alpha1
        specDescriptors:
          - displayName: Deployment Name
            description: The deployment which will Keda scale up and setup an HPA for.
            path: scaleTargetRef.deploymentName
            x-descriptors:
              - 'urn:alm:descriptor:io.kubernetes:Deployment'
          - displayName: Container Name
            description: Optional. The name of container in Deployment.
            path: scaleTargetRef.containerName
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:text'
          - displayName: Polling Interval
            description: This is the interval to check each trigger on.
            path: pollingInterval
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:number'
          - displayName: Cooldown Period
            description: >-
              The period to wait after the last trigger reported active before
              scaling the deployment back to 0.
            path: cooldownPeriod
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:number'
          - displayName: Min Replica Count
            description: Minimum number of replicas Keda will scale the deployment down to.
            path: minReplicaCount
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:number'
          - displayName: Max Replica Count
            description: Maximum number of replicas Keda will scale the deployment up to.
            path: maxReplicaCount
            x-descriptors:
              - 'urn:alm:descriptor:com.tectonic.ui:number'
        statusDescriptors: []
        resources:
          - version: autoscaling/v1
            kind: HorizontalPodAutoscaler
      - kind: TriggerAuthentication
        displayName: TriggerAuthentication
        description: >-
          Trigger Authentication  is used to define how KEDA should authenticate
          to a given trigger.
        name: triggerauthentications.keda.k8s.io
        version: v1alpha1
        specDescriptors: []
        statusDescriptors: []
        resources:
          - version: v1
            kind: Secret
    required: []
  install:
    strategy: deployment
    spec:
      permissions: []
      clusterPermissions:
        - rules:
            - apiGroups:
                - ''
              resources:
                - pods
                - services
                - services/finalizers
                - endpoints
                - events
                - configmaps
                - secrets
                - namespaces
                - external
              verbs:
                - '*'
            - apiGroups:
                - apps
              resources:
                - deployments
                - deployments/finalizers
                - replicasets
              verbs:
                - '*'
            - apiGroups:
                - batch
              resources:
                - jobs
              verbs:
                - '*'
            - apiGroups:
                - monitoring.coreos.com
              resources:
                - servicemonitors
              verbs:
                - get
                - create
            - apiGroups:
                - keda.k8s.io
              resources:
                - '*'
              verbs:
                - '*'
            - apiGroups:
                - autoscaling
              resources:
                - horizontalpodautoscalers
              verbs:
                - '*'
          serviceAccountName: keda-operator
      deployments:
        - name: keda-operator
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: keda-operator
            strategy: {}
            template:
              metadata:
                labels:
                  app: keda-operator
                name: keda-operator
              spec:
                containers:
                  - command:
                      - keda
                    env:
                      - name: WATCH_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: 'metadata.annotations[''olm.targetNamespaces'']'
                      - name: POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                      - name: OPERATOR_NAME
                        value: keda-operator
                    image: 'docker.io/zroubalik/keda:0.0.4'
                    imagePullPolicy: Always
                    name: keda-operator
                    resources: {}
                  - args:
                      - /usr/local/bin/keda-adapter
                      - '--secure-port=6443'
                      - '--logtostderr=true'
                      - '--v=0'
                    env:
                      - name: WATCH_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: 'metadata.annotations[''olm.targetNamespaces'']'
                    image: 'docker.io/zroubalik/keda-metrics-adapter:0.0.4'
                    imagePullPolicy: Always
                    name: keda-metrics-apiserver
                    ports:
                      - containerPort: 6443
                        name: https
                      - containerPort: 8080
                        name: http
                    resources: {}
                    volumeMounts:
                      - mountPath: /tmp
                        name: temp-vol
                serviceAccountName: keda-operator
                volumes:
                  - emptyDir: {}
                    name: temp-vol
  installModes:
    - type: OwnNamespace
      supported: false
    - type: SingleNamespace
      supported: false
    - type: MultiNamespace
      supported: false
    - type: AllNamespaces
      supported: true
  