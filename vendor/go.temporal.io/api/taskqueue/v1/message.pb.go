// The MIT License
//
// Copyright (c) 2020 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/taskqueue/v1/message.proto

package taskqueue

import (
	reflect "reflect"
	sync "sync"

	v11 "go.temporal.io/api/common/v1"
	v1 "go.temporal.io/api/enums/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// See https://docs.temporal.io/docs/concepts/task-queues/
type TaskQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Default: TASK_QUEUE_KIND_NORMAL.
	Kind v1.TaskQueueKind `protobuf:"varint,2,opt,name=kind,proto3,enum=temporal.api.enums.v1.TaskQueueKind" json:"kind,omitempty"`
	// Iff kind == TASK_QUEUE_KIND_STICKY, then this field contains the name of
	// the normal task queue that the sticky worker is running on.
	NormalName string `protobuf:"bytes,3,opt,name=normal_name,json=normalName,proto3" json:"normal_name,omitempty"`
}

func (x *TaskQueue) Reset() {
	*x = TaskQueue{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueue) ProtoMessage() {}

func (x *TaskQueue) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueue.ProtoReflect.Descriptor instead.
func (*TaskQueue) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *TaskQueue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TaskQueue) GetKind() v1.TaskQueueKind {
	if x != nil {
		return x.Kind
	}
	return v1.TaskQueueKind(0)
}

func (x *TaskQueue) GetNormalName() string {
	if x != nil {
		return x.NormalName
	}
	return ""
}

// Only applies to activity task queues
type TaskQueueMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Allows throttling dispatch of tasks from this queue
	MaxTasksPerSecond *wrapperspb.DoubleValue `protobuf:"bytes,1,opt,name=max_tasks_per_second,json=maxTasksPerSecond,proto3" json:"max_tasks_per_second,omitempty"`
}

func (x *TaskQueueMetadata) Reset() {
	*x = TaskQueueMetadata{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueMetadata) ProtoMessage() {}

func (x *TaskQueueMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueMetadata.ProtoReflect.Descriptor instead.
func (*TaskQueueMetadata) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *TaskQueueMetadata) GetMaxTasksPerSecond() *wrapperspb.DoubleValue {
	if x != nil {
		return x.MaxTasksPerSecond
	}
	return nil
}

// Used for specifying versions the caller is interested in.
type TaskQueueVersionSelection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Include specific Build IDs.
	BuildIds []string `protobuf:"bytes,1,rep,name=build_ids,json=buildIds,proto3" json:"build_ids,omitempty"`
	// Include the unversioned queue.
	Unversioned bool `protobuf:"varint,2,opt,name=unversioned,proto3" json:"unversioned,omitempty"`
	// Include all active versions. A version is considered active if, in the last few minutes,
	// it has had new tasks or polls, or it has been the subject of certain task queue API calls.
	AllActive bool `protobuf:"varint,3,opt,name=all_active,json=allActive,proto3" json:"all_active,omitempty"`
}

func (x *TaskQueueVersionSelection) Reset() {
	*x = TaskQueueVersionSelection{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueVersionSelection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueVersionSelection) ProtoMessage() {}

func (x *TaskQueueVersionSelection) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueVersionSelection.ProtoReflect.Descriptor instead.
func (*TaskQueueVersionSelection) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *TaskQueueVersionSelection) GetBuildIds() []string {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

func (x *TaskQueueVersionSelection) GetUnversioned() bool {
	if x != nil {
		return x.Unversioned
	}
	return false
}

func (x *TaskQueueVersionSelection) GetAllActive() bool {
	if x != nil {
		return x.AllActive
	}
	return false
}

type TaskQueueVersionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Task Queue info per Task Type. Key is the numerical value of the temporal.api.enums.v1.TaskQueueType enum.
	TypesInfo map[int32]*TaskQueueTypeInfo `protobuf:"bytes,1,rep,name=types_info,json=typesInfo,proto3" json:"types_info,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Task Reachability is eventually consistent; there may be a delay until it converges to the most
	// accurate value but it is designed in a way to take the more conservative side until it converges.
	// For example REACHABLE is more conservative than CLOSED_WORKFLOWS_ONLY.
	//
	// Note: future activities who inherit their workflow's Build ID but not its Task Queue will not be
	// accounted for reachability as server cannot know if they'll happen as they do not use
	// assignment rules of their Task Queue. Same goes for Child Workflows or Continue-As-New Workflows
	// who inherit the parent/previous workflow's Build ID but not its Task Queue. In those cases, make
	// sure to query reachability for the parent/previous workflow's Task Queue as well.
	TaskReachability v1.BuildIdTaskReachability `protobuf:"varint,2,opt,name=task_reachability,json=taskReachability,proto3,enum=temporal.api.enums.v1.BuildIdTaskReachability" json:"task_reachability,omitempty"`
}

func (x *TaskQueueVersionInfo) Reset() {
	*x = TaskQueueVersionInfo{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueVersionInfo) ProtoMessage() {}

func (x *TaskQueueVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueVersionInfo.ProtoReflect.Descriptor instead.
func (*TaskQueueVersionInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *TaskQueueVersionInfo) GetTypesInfo() map[int32]*TaskQueueTypeInfo {
	if x != nil {
		return x.TypesInfo
	}
	return nil
}

func (x *TaskQueueVersionInfo) GetTaskReachability() v1.BuildIdTaskReachability {
	if x != nil {
		return x.TaskReachability
	}
	return v1.BuildIdTaskReachability(0)
}

type TaskQueueTypeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unversioned workers (with `useVersioning=false`) are reported in unversioned result even if they set a Build ID.
	Pollers []*PollerInfo   `protobuf:"bytes,1,rep,name=pollers,proto3" json:"pollers,omitempty"`
	Stats   *TaskQueueStats `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
}

func (x *TaskQueueTypeInfo) Reset() {
	*x = TaskQueueTypeInfo{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueTypeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueTypeInfo) ProtoMessage() {}

func (x *TaskQueueTypeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueTypeInfo.ProtoReflect.Descriptor instead.
func (*TaskQueueTypeInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *TaskQueueTypeInfo) GetPollers() []*PollerInfo {
	if x != nil {
		return x.Pollers
	}
	return nil
}

func (x *TaskQueueTypeInfo) GetStats() *TaskQueueStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

// TaskQueueStats contains statistics about task queue backlog and activity.
//
// For workflow task queue type, this result is partial because tasks sent to sticky queues are not included. Read
// comments above each metric to understand the impact of sticky queue exclusion on that metric accuracy.
type TaskQueueStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The approximate number of tasks backlogged in this task queue. May count expired tasks but eventually
	// converges to the right value. Can be relied upon for scaling decisions.
	//
	// Special note for workflow task queue type: this metric does not count sticky queue tasks. However, because
	// those tasks only remain valid for a few seconds, the inaccuracy becomes less significant as the backlog size
	// grows.
	ApproximateBacklogCount int64 `protobuf:"varint,1,opt,name=approximate_backlog_count,json=approximateBacklogCount,proto3" json:"approximate_backlog_count,omitempty"`
	// Approximate age of the oldest task in the backlog based on the creation time of the task at the head of
	// the queue. Can be relied upon for scaling decisions.
	//
	// Special note for workflow task queue type: this metric does not count sticky queue tasks. However, because
	// those tasks only remain valid for a few seconds, they should not affect the result when backlog is older than
	// few seconds.
	ApproximateBacklogAge *durationpb.Duration `protobuf:"bytes,2,opt,name=approximate_backlog_age,json=approximateBacklogAge,proto3" json:"approximate_backlog_age,omitempty"`
	// The approximate tasks per second added to the task queue, averaging the last 30 seconds. These includes tasks
	// whether or not they were added to/dispatched from the backlog or they were dispatched immediately without going
	// to the backlog (sync-matched).
	//
	// The difference between `tasks_add_rate` and `tasks_dispatch_rate` is a reliable metric for the rate at which
	// backlog grows/shrinks.
	//
	// Note: the actual tasks delivered to the workers may significantly be higher than the numbers reported by
	// tasks_add_rate, because:
	//   - Tasks can be sent to workers without going to the task queue. This is called Eager dispatch. Eager dispatch is
	//     enable for activities by default in the latest SDKs.
	//   - Tasks going to Sticky queue are not accounted for. Note that, typically, only the first workflow task of each
	//     workflow goes to a normal queue, and the rest workflow tasks go to the Sticky queue associated with a specific
	//     worker instance.
	TasksAddRate float32 `protobuf:"fixed32,3,opt,name=tasks_add_rate,json=tasksAddRate,proto3" json:"tasks_add_rate,omitempty"`
	// The approximate tasks per second dispatched from the task queue, averaging the last 30 seconds. These includes
	// tasks whether or not they were added to/dispatched from the backlog or they were dispatched immediately without
	// going to the backlog (sync-matched).
	//
	// The difference between `tasks_add_rate` and `tasks_dispatch_rate` is a reliable metric for the rate at which
	// backlog grows/shrinks.
	//
	// Note: the actual tasks delivered to the workers may significantly be higher than the numbers reported by
	// tasks_dispatch_rate, because:
	//   - Tasks can be sent to workers without going to the task queue. This is called Eager dispatch. Eager dispatch is
	//     enable for activities by default in the latest SDKs.
	//   - Tasks going to Sticky queue are not accounted for. Note that, typically, only the first workflow task of each
	//     workflow goes to a normal queue, and the rest workflow tasks go to the Sticky queue associated with a specific
	//     worker instance.
	TasksDispatchRate float32 `protobuf:"fixed32,4,opt,name=tasks_dispatch_rate,json=tasksDispatchRate,proto3" json:"tasks_dispatch_rate,omitempty"`
}

func (x *TaskQueueStats) Reset() {
	*x = TaskQueueStats{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueStats) ProtoMessage() {}

func (x *TaskQueueStats) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueStats.ProtoReflect.Descriptor instead.
func (*TaskQueueStats) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *TaskQueueStats) GetApproximateBacklogCount() int64 {
	if x != nil {
		return x.ApproximateBacklogCount
	}
	return 0
}

func (x *TaskQueueStats) GetApproximateBacklogAge() *durationpb.Duration {
	if x != nil {
		return x.ApproximateBacklogAge
	}
	return nil
}

func (x *TaskQueueStats) GetTasksAddRate() float32 {
	if x != nil {
		return x.TasksAddRate
	}
	return 0
}

func (x *TaskQueueStats) GetTasksDispatchRate() float32 {
	if x != nil {
		return x.TasksDispatchRate
	}
	return 0
}

// Deprecated. Use `InternalTaskQueueStatus`. This is kept until `DescribeTaskQueue` supports legacy behavior.
type TaskQueueStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BacklogCountHint int64        `protobuf:"varint,1,opt,name=backlog_count_hint,json=backlogCountHint,proto3" json:"backlog_count_hint,omitempty"`
	ReadLevel        int64        `protobuf:"varint,2,opt,name=read_level,json=readLevel,proto3" json:"read_level,omitempty"`
	AckLevel         int64        `protobuf:"varint,3,opt,name=ack_level,json=ackLevel,proto3" json:"ack_level,omitempty"`
	RatePerSecond    float64      `protobuf:"fixed64,4,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
	TaskIdBlock      *TaskIdBlock `protobuf:"bytes,5,opt,name=task_id_block,json=taskIdBlock,proto3" json:"task_id_block,omitempty"`
}

func (x *TaskQueueStatus) Reset() {
	*x = TaskQueueStatus{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueStatus) ProtoMessage() {}

func (x *TaskQueueStatus) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueStatus.ProtoReflect.Descriptor instead.
func (*TaskQueueStatus) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *TaskQueueStatus) GetBacklogCountHint() int64 {
	if x != nil {
		return x.BacklogCountHint
	}
	return 0
}

func (x *TaskQueueStatus) GetReadLevel() int64 {
	if x != nil {
		return x.ReadLevel
	}
	return 0
}

func (x *TaskQueueStatus) GetAckLevel() int64 {
	if x != nil {
		return x.AckLevel
	}
	return 0
}

func (x *TaskQueueStatus) GetRatePerSecond() float64 {
	if x != nil {
		return x.RatePerSecond
	}
	return 0
}

func (x *TaskQueueStatus) GetTaskIdBlock() *TaskIdBlock {
	if x != nil {
		return x.TaskIdBlock
	}
	return nil
}

type TaskIdBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartId int64 `protobuf:"varint,1,opt,name=start_id,json=startId,proto3" json:"start_id,omitempty"`
	EndId   int64 `protobuf:"varint,2,opt,name=end_id,json=endId,proto3" json:"end_id,omitempty"`
}

func (x *TaskIdBlock) Reset() {
	*x = TaskIdBlock{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskIdBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdBlock) ProtoMessage() {}

func (x *TaskIdBlock) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdBlock.ProtoReflect.Descriptor instead.
func (*TaskIdBlock) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *TaskIdBlock) GetStartId() int64 {
	if x != nil {
		return x.StartId
	}
	return 0
}

func (x *TaskIdBlock) GetEndId() int64 {
	if x != nil {
		return x.EndId
	}
	return 0
}

type TaskQueuePartitionMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key           string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	OwnerHostName string `protobuf:"bytes,2,opt,name=owner_host_name,json=ownerHostName,proto3" json:"owner_host_name,omitempty"`
}

func (x *TaskQueuePartitionMetadata) Reset() {
	*x = TaskQueuePartitionMetadata{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueuePartitionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueuePartitionMetadata) ProtoMessage() {}

func (x *TaskQueuePartitionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueuePartitionMetadata.ProtoReflect.Descriptor instead.
func (*TaskQueuePartitionMetadata) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *TaskQueuePartitionMetadata) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TaskQueuePartitionMetadata) GetOwnerHostName() string {
	if x != nil {
		return x.OwnerHostName
	}
	return ""
}

type PollerInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastAccessTime *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=last_access_time,json=lastAccessTime,proto3" json:"last_access_time,omitempty"`
	Identity       string                 `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	RatePerSecond  float64                `protobuf:"fixed64,3,opt,name=rate_per_second,json=ratePerSecond,proto3" json:"rate_per_second,omitempty"`
	// If a worker has opted into the worker versioning feature while polling, its capabilities will
	// appear here.
	WorkerVersionCapabilities *v11.WorkerVersionCapabilities `protobuf:"bytes,4,opt,name=worker_version_capabilities,json=workerVersionCapabilities,proto3" json:"worker_version_capabilities,omitempty"`
}

func (x *PollerInfo) Reset() {
	*x = PollerInfo{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PollerInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PollerInfo) ProtoMessage() {}

func (x *PollerInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PollerInfo.ProtoReflect.Descriptor instead.
func (*PollerInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *PollerInfo) GetLastAccessTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastAccessTime
	}
	return nil
}

func (x *PollerInfo) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *PollerInfo) GetRatePerSecond() float64 {
	if x != nil {
		return x.RatePerSecond
	}
	return 0
}

func (x *PollerInfo) GetWorkerVersionCapabilities() *v11.WorkerVersionCapabilities {
	if x != nil {
		return x.WorkerVersionCapabilities
	}
	return nil
}

type StickyExecutionAttributes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WorkerTaskQueue *TaskQueue `protobuf:"bytes,1,opt,name=worker_task_queue,json=workerTaskQueue,proto3" json:"worker_task_queue,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: "to" is used to indicate interval. --)
	ScheduleToStartTimeout *durationpb.Duration `protobuf:"bytes,2,opt,name=schedule_to_start_timeout,json=scheduleToStartTimeout,proto3" json:"schedule_to_start_timeout,omitempty"`
}

func (x *StickyExecutionAttributes) Reset() {
	*x = StickyExecutionAttributes{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StickyExecutionAttributes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StickyExecutionAttributes) ProtoMessage() {}

func (x *StickyExecutionAttributes) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StickyExecutionAttributes.ProtoReflect.Descriptor instead.
func (*StickyExecutionAttributes) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{10}
}

func (x *StickyExecutionAttributes) GetWorkerTaskQueue() *TaskQueue {
	if x != nil {
		return x.WorkerTaskQueue
	}
	return nil
}

func (x *StickyExecutionAttributes) GetScheduleToStartTimeout() *durationpb.Duration {
	if x != nil {
		return x.ScheduleToStartTimeout
	}
	return nil
}

// Used by the worker versioning APIs, represents an unordered set of one or more versions which are
// considered to be compatible with each other. Currently the versions are always worker build IDs.
type CompatibleVersionSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All the compatible versions, unordered, except for the last element, which is considered the set "default".
	BuildIds []string `protobuf:"bytes,1,rep,name=build_ids,json=buildIds,proto3" json:"build_ids,omitempty"`
}

func (x *CompatibleVersionSet) Reset() {
	*x = CompatibleVersionSet{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompatibleVersionSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompatibleVersionSet) ProtoMessage() {}

func (x *CompatibleVersionSet) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompatibleVersionSet.ProtoReflect.Descriptor instead.
func (*CompatibleVersionSet) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{11}
}

func (x *CompatibleVersionSet) GetBuildIds() []string {
	if x != nil {
		return x.BuildIds
	}
	return nil
}

// Reachability of tasks for a worker on a single task queue.
type TaskQueueReachability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskQueue string `protobuf:"bytes,1,opt,name=task_queue,json=taskQueue,proto3" json:"task_queue,omitempty"`
	// Task reachability for a worker in a single task queue.
	// See the TaskReachability docstring for information about each enum variant.
	// If reachability is empty, this worker is considered unreachable in this task queue.
	Reachability []v1.TaskReachability `protobuf:"varint,2,rep,packed,name=reachability,proto3,enum=temporal.api.enums.v1.TaskReachability" json:"reachability,omitempty"`
}

func (x *TaskQueueReachability) Reset() {
	*x = TaskQueueReachability{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TaskQueueReachability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskQueueReachability) ProtoMessage() {}

func (x *TaskQueueReachability) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskQueueReachability.ProtoReflect.Descriptor instead.
func (*TaskQueueReachability) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{12}
}

func (x *TaskQueueReachability) GetTaskQueue() string {
	if x != nil {
		return x.TaskQueue
	}
	return ""
}

func (x *TaskQueueReachability) GetReachability() []v1.TaskReachability {
	if x != nil {
		return x.Reachability
	}
	return nil
}

// Reachability of tasks for a worker by build id, in one or more task queues.
type BuildIdReachability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A build id or empty if unversioned.
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// Reachability per task queue.
	TaskQueueReachability []*TaskQueueReachability `protobuf:"bytes,2,rep,name=task_queue_reachability,json=taskQueueReachability,proto3" json:"task_queue_reachability,omitempty"`
}

func (x *BuildIdReachability) Reset() {
	*x = BuildIdReachability{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildIdReachability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildIdReachability) ProtoMessage() {}

func (x *BuildIdReachability) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildIdReachability.ProtoReflect.Descriptor instead.
func (*BuildIdReachability) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{13}
}

func (x *BuildIdReachability) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *BuildIdReachability) GetTaskQueueReachability() []*TaskQueueReachability {
	if x != nil {
		return x.TaskQueueReachability
	}
	return nil
}

type RampByPercentage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Acceptable range is [0,100).
	RampPercentage float32 `protobuf:"fixed32,1,opt,name=ramp_percentage,json=rampPercentage,proto3" json:"ramp_percentage,omitempty"`
}

func (x *RampByPercentage) Reset() {
	*x = RampByPercentage{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RampByPercentage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RampByPercentage) ProtoMessage() {}

func (x *RampByPercentage) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RampByPercentage.ProtoReflect.Descriptor instead.
func (*RampByPercentage) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{14}
}

func (x *RampByPercentage) GetRampPercentage() float32 {
	if x != nil {
		return x.RampPercentage
	}
	return 0
}

// Assignment rules are applied to *new* Workflow and Activity executions at
// schedule time to assign them to a Build ID.
//
// Assignment rules will not be used in the following cases:
//   - Child Workflows or Continue-As-New Executions who inherit their
//     parent/previous Workflow's assigned Build ID (by setting the
//     `inherit_build_id` flag - default behavior in SDKs when the same Task Queue
//     is used.)
//   - An Activity that inherits the assigned Build ID of its Workflow (by
//     setting the `use_workflow_build_id` flag - default behavior in SDKs
//     when the same Task Queue is used.)
//
// In absence of (applicable) redirect rules (`CompatibleBuildIdRedirectRule`s)
// the task will be dispatched to Workers of the Build ID determined by the
// assignment rules (or inherited). Otherwise, the final Build ID will be
// determined by the redirect rules.
//
// Once a Workflow completes its first Workflow Task in a particular Build ID it
// stays in that Build ID regardless of changes to assignment rules. Redirect
// rules can be used to move the workflow to another compatible Build ID.
//
// When using Worker Versioning on a Task Queue, in the steady state,
// there should typically be a single assignment rule to send all new executions
// to the latest Build ID. Existence of at least one such "unconditional"
// rule at all times is enforces by the system, unless the `force` flag is used
// by the user when replacing/deleting these rules (for exceptional cases).
//
// During a deployment, one or more additional rules can be added to assign a
// subset of the tasks to a new Build ID based on a "ramp percentage".
//
// When there are multiple assignment rules for a Task Queue, the rules are
// evaluated in order, starting from index 0. The first applicable rule will be
// applied and the rest will be ignored.
//
// In the event that no assignment rule is applicable on a task (or the Task
// Queue is simply not versioned), the tasks will be dispatched to an
// unversioned Worker.
type BuildIdAssignmentRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetBuildId string `protobuf:"bytes,1,opt,name=target_build_id,json=targetBuildId,proto3" json:"target_build_id,omitempty"`
	// If a ramp is provided, this rule will be applied only to a sample of
	// tasks according to the provided percentage.
	// This option can be used only on "terminal" Build IDs (the ones not used
	// as source in any redirect rules).
	//
	// Types that are assignable to Ramp:
	//
	//	*BuildIdAssignmentRule_PercentageRamp
	Ramp isBuildIdAssignmentRule_Ramp `protobuf_oneof:"ramp"`
}

func (x *BuildIdAssignmentRule) Reset() {
	*x = BuildIdAssignmentRule{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BuildIdAssignmentRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildIdAssignmentRule) ProtoMessage() {}

func (x *BuildIdAssignmentRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildIdAssignmentRule.ProtoReflect.Descriptor instead.
func (*BuildIdAssignmentRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{15}
}

func (x *BuildIdAssignmentRule) GetTargetBuildId() string {
	if x != nil {
		return x.TargetBuildId
	}
	return ""
}

func (m *BuildIdAssignmentRule) GetRamp() isBuildIdAssignmentRule_Ramp {
	if m != nil {
		return m.Ramp
	}
	return nil
}

func (x *BuildIdAssignmentRule) GetPercentageRamp() *RampByPercentage {
	if x, ok := x.GetRamp().(*BuildIdAssignmentRule_PercentageRamp); ok {
		return x.PercentageRamp
	}
	return nil
}

type isBuildIdAssignmentRule_Ramp interface {
	isBuildIdAssignmentRule_Ramp()
}

type BuildIdAssignmentRule_PercentageRamp struct {
	// This ramp is useful for gradual Blue/Green deployments (and similar)
	// where you want to send a certain portion of the traffic to the target
	// Build ID.
	PercentageRamp *RampByPercentage `protobuf:"bytes,3,opt,name=percentage_ramp,json=percentageRamp,proto3,oneof"`
}

func (*BuildIdAssignmentRule_PercentageRamp) isBuildIdAssignmentRule_Ramp() {}

// These rules apply to tasks assigned to a particular Build ID
// (`source_build_id`) to redirect them to another *compatible* Build ID
// (`target_build_id`).
//
// It is user's responsibility to ensure that the target Build ID is compatible
// with the source Build ID (e.g. by using the Patching API).
//
// Most deployments are not expected to need these rules, however following
// situations can greatly benefit from redirects:
//   - Need to move long-running Workflow Executions from an old Build ID to a
//     newer one.
//   - Need to hotfix some broken or stuck Workflow Executions.
//
// In steady state, redirect rules are beneficial when dealing with old
// Executions ran on now-decommissioned Build IDs:
//   - To redirecting the Workflow Queries to the current (compatible) Build ID.
//   - To be able to Reset an old Execution so it can run on the current
//     (compatible) Build ID.
//
// Redirect rules can be chained.
type CompatibleBuildIdRedirectRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceBuildId string `protobuf:"bytes,1,opt,name=source_build_id,json=sourceBuildId,proto3" json:"source_build_id,omitempty"`
	// Target Build ID must be compatible with the Source Build ID; that is it
	// must be able to process event histories made by the Source Build ID by
	// using [Patching](https://docs.temporal.io/workflows#patching) or other
	// means.
	TargetBuildId string `protobuf:"bytes,2,opt,name=target_build_id,json=targetBuildId,proto3" json:"target_build_id,omitempty"`
}

func (x *CompatibleBuildIdRedirectRule) Reset() {
	*x = CompatibleBuildIdRedirectRule{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompatibleBuildIdRedirectRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompatibleBuildIdRedirectRule) ProtoMessage() {}

func (x *CompatibleBuildIdRedirectRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompatibleBuildIdRedirectRule.ProtoReflect.Descriptor instead.
func (*CompatibleBuildIdRedirectRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{16}
}

func (x *CompatibleBuildIdRedirectRule) GetSourceBuildId() string {
	if x != nil {
		return x.SourceBuildId
	}
	return ""
}

func (x *CompatibleBuildIdRedirectRule) GetTargetBuildId() string {
	if x != nil {
		return x.TargetBuildId
	}
	return ""
}

type TimestampedBuildIdAssignmentRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule       *BuildIdAssignmentRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *TimestampedBuildIdAssignmentRule) Reset() {
	*x = TimestampedBuildIdAssignmentRule{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampedBuildIdAssignmentRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedBuildIdAssignmentRule) ProtoMessage() {}

func (x *TimestampedBuildIdAssignmentRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedBuildIdAssignmentRule.ProtoReflect.Descriptor instead.
func (*TimestampedBuildIdAssignmentRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{17}
}

func (x *TimestampedBuildIdAssignmentRule) GetRule() *BuildIdAssignmentRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *TimestampedBuildIdAssignmentRule) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

type TimestampedCompatibleBuildIdRedirectRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule       *CompatibleBuildIdRedirectRule `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	CreateTime *timestamppb.Timestamp         `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
}

func (x *TimestampedCompatibleBuildIdRedirectRule) Reset() {
	*x = TimestampedCompatibleBuildIdRedirectRule{}
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampedCompatibleBuildIdRedirectRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampedCompatibleBuildIdRedirectRule) ProtoMessage() {}

func (x *TimestampedCompatibleBuildIdRedirectRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_taskqueue_v1_message_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampedCompatibleBuildIdRedirectRule.ProtoReflect.Descriptor instead.
func (*TimestampedCompatibleBuildIdRedirectRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP(), []int{18}
}

func (x *TimestampedCompatibleBuildIdRedirectRule) GetRule() *CompatibleBuildIdRedirectRule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *TimestampedCompatibleBuildIdRedirectRule) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

var File_temporal_api_taskqueue_v1_message_proto protoreflect.FileDescriptor

var file_temporal_api_taskqueue_v1_message_proto_rawDesc = []byte{
	0x0a, 0x27, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x26, 0x74, 0x65,
	0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x24, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x86, 0x01, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x12, 0x16, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x3c, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x42, 0x02, 0x68, 0x00, 0x12, 0x23, 0x0a, 0x0b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x22, 0x66, 0x0a, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x51,
	0x75, 0x65, 0x75, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x51, 0x0a, 0x14, 0x6d,
	0x61, 0x78, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x11, 0x6d, 0x61, 0x78, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x50, 0x65,
	0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x02, 0x68, 0x00, 0x22, 0x85, 0x01, 0x0a, 0x19, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x09, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x73, 0x42, 0x02, 0x68, 0x00, 0x12, 0x24, 0x0a, 0x0b, 0x75, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x42, 0x02, 0x68, 0x00, 0x12, 0x21, 0x0a, 0x0a, 0x61, 0x6c,
	0x6c, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61,
	0x6c, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x42, 0x02, 0x68, 0x00, 0x22, 0xce, 0x02, 0x0a, 0x14,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x61, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x42, 0x02, 0x68,
	0x00, 0x12, 0x5f, 0x0a, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x74, 0x65, 0x6d,
	0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x10, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x02, 0x68, 0x00, 0x1a, 0x72, 0x0a, 0x0e,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x14, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42,
	0x02, 0x68, 0x00, 0x12, 0x46, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x02, 0x68, 0x00, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9d, 0x01, 0x0a, 0x11, 0x54,
	0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x43, 0x0a, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x70, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x42, 0x02, 0x68,
	0x00, 0x12, 0x43, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75,
	0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73, 0x42, 0x02,
	0x68, 0x00, 0x22, 0x85, 0x02, 0x0a, 0x0e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x3e, 0x0a, 0x19, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61,
	0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x42, 0x02, 0x68,
	0x00, 0x12, 0x55, 0x0a, 0x17, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x5f,
	0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x61, 0x70, 0x70, 0x72, 0x6f,
	0x78, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x41, 0x67, 0x65, 0x42,
	0x02, 0x68, 0x00, 0x12, 0x28, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x61, 0x73, 0x6b,
	0x73, 0x41, 0x64, 0x64, 0x52, 0x61, 0x74, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x32, 0x0a, 0x13, 0x74,
	0x61, 0x73, 0x6b, 0x73, 0x5f, 0x64, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x72, 0x61, 0x74,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x74, 0x61, 0x73, 0x6b, 0x73, 0x44, 0x69, 0x73,
	0x70, 0x61, 0x74, 0x63, 0x68, 0x52, 0x61, 0x74, 0x65, 0x42, 0x02, 0x68, 0x00, 0x22, 0x83, 0x02, 0x0a,
	0x0f, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x12, 0x62, 0x61, 0x63, 0x6b, 0x6c, 0x6f, 0x67, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x68, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x62, 0x61, 0x63, 0x6b, 0x6c,
	0x6f, 0x67, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x48, 0x69, 0x6e, 0x74, 0x42, 0x02, 0x68, 0x00, 0x12, 0x21,
	0x0a, 0x0a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x09, 0x72, 0x65, 0x61, 0x64, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x02, 0x68, 0x00,
	0x12, 0x1f, 0x0a, 0x09, 0x61, 0x63, 0x6b, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x08, 0x61, 0x63, 0x6b, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x02, 0x68, 0x00, 0x12,
	0x2a, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x53,
	0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x02, 0x68, 0x00, 0x12, 0x4e, 0x0a, 0x0d, 0x74, 0x61, 0x73, 0x6b,
	0x5f, 0x69, 0x64, 0x5f, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61,
	0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x42, 0x02, 0x68, 0x00, 0x22, 0x47, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x1d, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x49, 0x64, 0x42, 0x02, 0x68, 0x00,
	0x12, 0x19, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x05, 0x65, 0x6e, 0x64, 0x49, 0x64, 0x42, 0x02, 0x68, 0x00, 0x22, 0x5e, 0x0a, 0x1a, 0x54, 0x61, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x42, 0x02, 0x68, 0x00, 0x12, 0x2a, 0x0a, 0x0f, 0x6f,
	0x77, 0x6e, 0x65, 0x72, 0x5f, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x42, 0x02, 0x68, 0x00, 0x22, 0x99, 0x02, 0x0a, 0x0a, 0x50, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x48, 0x0a, 0x10, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x1e, 0x0a, 0x08, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x42, 0x02, 0x68, 0x00, 0x12, 0x2a, 0x0a, 0x0f, 0x72, 0x61, 0x74, 0x65, 0x5f,
	0x70, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x72, 0x61, 0x74, 0x65, 0x50, 0x65, 0x72, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x42, 0x02, 0x68,
	0x00, 0x12, 0x75, 0x0a, 0x1b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x19, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x42, 0x02,
	0x68, 0x00, 0x22, 0xcb, 0x01, 0x0a, 0x19, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x79, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x54,
	0x0a, 0x11, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65,
	0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72,
	0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x0f, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x42, 0x02, 0x68, 0x00,
	0x12, 0x58, 0x0a, 0x19, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x16, 0x73, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x54, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x42, 0x02, 0x68, 0x00, 0x22, 0x37, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62,
	0x6c, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x09, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x73, 0x42, 0x02, 0x68, 0x00, 0x22, 0x8b, 0x01, 0x0a, 0x15,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x4f, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x74, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x6e, 0x75, 0x6d, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x0c, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x02,
	0x68, 0x00, 0x22, 0xa2, 0x01, 0x0a, 0x13, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x08, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x42, 0x02, 0x68, 0x00, 0x12, 0x6c, 0x0a, 0x17, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x71, 0x75,
	0x65, 0x75, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x15, 0x74, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x02, 0x68, 0x00, 0x22, 0x3f,
	0x0a, 0x10, 0x52, 0x61, 0x6d, 0x70, 0x42, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67,
	0x65, 0x12, 0x2b, 0x0a, 0x0f, 0x72, 0x61, 0x6d, 0x70, 0x5f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72, 0x61, 0x6d, 0x70, 0x50, 0x65,
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x42, 0x02, 0x68, 0x00, 0x22, 0xa7, 0x01, 0x0a, 0x15,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74,
	0x52, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x42, 0x02, 0x68, 0x00, 0x12, 0x5a,
	0x0a, 0x0f, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x61, 0x6d, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x6d, 0x70, 0x42, 0x79, 0x50, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x61, 0x67, 0x65, 0x52, 0x61, 0x6d,
	0x70, 0x42, 0x02, 0x68, 0x00, 0x42, 0x06, 0x0a, 0x04, 0x72, 0x61, 0x6d, 0x70, 0x22, 0x77, 0x0a, 0x1d,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x2a, 0x0a, 0x0f,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x42, 0x02, 0x68, 0x00, 0x12, 0x2a, 0x0a, 0x0f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x42, 0x02, 0x68, 0x00, 0x22,
	0xad, 0x01, 0x0a, 0x20, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x30, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74,
	0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x04, 0x72, 0x75, 0x6c, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x22, 0xbd, 0x01, 0x0a, 0x28, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x50, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x74, 0x61, 0x73,
	0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69,
	0x62, 0x6c, 0x65, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x3f,
	0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x42, 0x98, 0x01, 0x0a,
	0x1c, 0x69, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x74, 0x61, 0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x76, 0x31, 0x42, 0x0c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x29, 0x67, 0x6f, 0x2e, 0x74,
	0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x61,
	0x73, 0x6b, 0x71, 0x75, 0x65, 0x75, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x74, 0x61, 0x73, 0x6b, 0x71, 0x75,
	0x65, 0x75, 0x65, 0xaa, 0x02, 0x1b, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x2e,
	0x41, 0x70, 0x69, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x2e, 0x56, 0x31,
	0xea, 0x02, 0x1e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x3a, 0x3a, 0x41, 0x70,
	0x69, 0x3a, 0x3a, 0x54, 0x61, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x3a, 0x3a, 0x56, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_temporal_api_taskqueue_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_taskqueue_v1_message_proto_rawDescData = file_temporal_api_taskqueue_v1_message_proto_rawDesc
)

func file_temporal_api_taskqueue_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_taskqueue_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_taskqueue_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_temporal_api_taskqueue_v1_message_proto_rawDescData)
	})
	return file_temporal_api_taskqueue_v1_message_proto_rawDescData
}

var file_temporal_api_taskqueue_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_temporal_api_taskqueue_v1_message_proto_goTypes = []any{
	(*TaskQueue)(nil),                                // 0: temporal.api.taskqueue.v1.TaskQueue
	(*TaskQueueMetadata)(nil),                        // 1: temporal.api.taskqueue.v1.TaskQueueMetadata
	(*TaskQueueVersionSelection)(nil),                // 2: temporal.api.taskqueue.v1.TaskQueueVersionSelection
	(*TaskQueueVersionInfo)(nil),                     // 3: temporal.api.taskqueue.v1.TaskQueueVersionInfo
	(*TaskQueueTypeInfo)(nil),                        // 4: temporal.api.taskqueue.v1.TaskQueueTypeInfo
	(*TaskQueueStats)(nil),                           // 5: temporal.api.taskqueue.v1.TaskQueueStats
	(*TaskQueueStatus)(nil),                          // 6: temporal.api.taskqueue.v1.TaskQueueStatus
	(*TaskIdBlock)(nil),                              // 7: temporal.api.taskqueue.v1.TaskIdBlock
	(*TaskQueuePartitionMetadata)(nil),               // 8: temporal.api.taskqueue.v1.TaskQueuePartitionMetadata
	(*PollerInfo)(nil),                               // 9: temporal.api.taskqueue.v1.PollerInfo
	(*StickyExecutionAttributes)(nil),                // 10: temporal.api.taskqueue.v1.StickyExecutionAttributes
	(*CompatibleVersionSet)(nil),                     // 11: temporal.api.taskqueue.v1.CompatibleVersionSet
	(*TaskQueueReachability)(nil),                    // 12: temporal.api.taskqueue.v1.TaskQueueReachability
	(*BuildIdReachability)(nil),                      // 13: temporal.api.taskqueue.v1.BuildIdReachability
	(*RampByPercentage)(nil),                         // 14: temporal.api.taskqueue.v1.RampByPercentage
	(*BuildIdAssignmentRule)(nil),                    // 15: temporal.api.taskqueue.v1.BuildIdAssignmentRule
	(*CompatibleBuildIdRedirectRule)(nil),            // 16: temporal.api.taskqueue.v1.CompatibleBuildIdRedirectRule
	(*TimestampedBuildIdAssignmentRule)(nil),         // 17: temporal.api.taskqueue.v1.TimestampedBuildIdAssignmentRule
	(*TimestampedCompatibleBuildIdRedirectRule)(nil), // 18: temporal.api.taskqueue.v1.TimestampedCompatibleBuildIdRedirectRule
	nil,                                   // 19: temporal.api.taskqueue.v1.TaskQueueVersionInfo.TypesInfoEntry
	(v1.TaskQueueKind)(0),                 // 20: temporal.api.enums.v1.TaskQueueKind
	(*wrapperspb.DoubleValue)(nil),        // 21: google.protobuf.DoubleValue
	(v1.BuildIdTaskReachability)(0),       // 22: temporal.api.enums.v1.BuildIdTaskReachability
	(*durationpb.Duration)(nil),           // 23: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),         // 24: google.protobuf.Timestamp
	(*v11.WorkerVersionCapabilities)(nil), // 25: temporal.api.common.v1.WorkerVersionCapabilities
	(v1.TaskReachability)(0),              // 26: temporal.api.enums.v1.TaskReachability
}
var file_temporal_api_taskqueue_v1_message_proto_depIdxs = []int32{
	20, // 0: temporal.api.taskqueue.v1.TaskQueue.kind:type_name -> temporal.api.enums.v1.TaskQueueKind
	21, // 1: temporal.api.taskqueue.v1.TaskQueueMetadata.max_tasks_per_second:type_name -> google.protobuf.DoubleValue
	19, // 2: temporal.api.taskqueue.v1.TaskQueueVersionInfo.types_info:type_name -> temporal.api.taskqueue.v1.TaskQueueVersionInfo.TypesInfoEntry
	22, // 3: temporal.api.taskqueue.v1.TaskQueueVersionInfo.task_reachability:type_name -> temporal.api.enums.v1.BuildIdTaskReachability
	9,  // 4: temporal.api.taskqueue.v1.TaskQueueTypeInfo.pollers:type_name -> temporal.api.taskqueue.v1.PollerInfo
	5,  // 5: temporal.api.taskqueue.v1.TaskQueueTypeInfo.stats:type_name -> temporal.api.taskqueue.v1.TaskQueueStats
	23, // 6: temporal.api.taskqueue.v1.TaskQueueStats.approximate_backlog_age:type_name -> google.protobuf.Duration
	7,  // 7: temporal.api.taskqueue.v1.TaskQueueStatus.task_id_block:type_name -> temporal.api.taskqueue.v1.TaskIdBlock
	24, // 8: temporal.api.taskqueue.v1.PollerInfo.last_access_time:type_name -> google.protobuf.Timestamp
	25, // 9: temporal.api.taskqueue.v1.PollerInfo.worker_version_capabilities:type_name -> temporal.api.common.v1.WorkerVersionCapabilities
	0,  // 10: temporal.api.taskqueue.v1.StickyExecutionAttributes.worker_task_queue:type_name -> temporal.api.taskqueue.v1.TaskQueue
	23, // 11: temporal.api.taskqueue.v1.StickyExecutionAttributes.schedule_to_start_timeout:type_name -> google.protobuf.Duration
	26, // 12: temporal.api.taskqueue.v1.TaskQueueReachability.reachability:type_name -> temporal.api.enums.v1.TaskReachability
	12, // 13: temporal.api.taskqueue.v1.BuildIdReachability.task_queue_reachability:type_name -> temporal.api.taskqueue.v1.TaskQueueReachability
	14, // 14: temporal.api.taskqueue.v1.BuildIdAssignmentRule.percentage_ramp:type_name -> temporal.api.taskqueue.v1.RampByPercentage
	15, // 15: temporal.api.taskqueue.v1.TimestampedBuildIdAssignmentRule.rule:type_name -> temporal.api.taskqueue.v1.BuildIdAssignmentRule
	24, // 16: temporal.api.taskqueue.v1.TimestampedBuildIdAssignmentRule.create_time:type_name -> google.protobuf.Timestamp
	16, // 17: temporal.api.taskqueue.v1.TimestampedCompatibleBuildIdRedirectRule.rule:type_name -> temporal.api.taskqueue.v1.CompatibleBuildIdRedirectRule
	24, // 18: temporal.api.taskqueue.v1.TimestampedCompatibleBuildIdRedirectRule.create_time:type_name -> google.protobuf.Timestamp
	4,  // 19: temporal.api.taskqueue.v1.TaskQueueVersionInfo.TypesInfoEntry.value:type_name -> temporal.api.taskqueue.v1.TaskQueueTypeInfo
	20, // [20:20] is the sub-list for method output_type
	20, // [20:20] is the sub-list for method input_type
	20, // [20:20] is the sub-list for extension type_name
	20, // [20:20] is the sub-list for extension extendee
	0,  // [0:20] is the sub-list for field type_name
}

func init() { file_temporal_api_taskqueue_v1_message_proto_init() }
func file_temporal_api_taskqueue_v1_message_proto_init() {
	if File_temporal_api_taskqueue_v1_message_proto != nil {
		return
	}
	file_temporal_api_taskqueue_v1_message_proto_msgTypes[15].OneofWrappers = []any{
		(*BuildIdAssignmentRule_PercentageRamp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_temporal_api_taskqueue_v1_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_taskqueue_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_taskqueue_v1_message_proto_depIdxs,
		MessageInfos:      file_temporal_api_taskqueue_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_taskqueue_v1_message_proto = out.File
	file_temporal_api_taskqueue_v1_message_proto_rawDesc = nil
	file_temporal_api_taskqueue_v1_message_proto_goTypes = nil
	file_temporal_api_taskqueue_v1_message_proto_depIdxs = nil
}
