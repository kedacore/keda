// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package filter

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type WorkflowExecutionFilter to the protobuf v3 wire format
func (val *WorkflowExecutionFilter) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkflowExecutionFilter from the protobuf v3 wire format
func (val *WorkflowExecutionFilter) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkflowExecutionFilter) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkflowExecutionFilter values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkflowExecutionFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkflowExecutionFilter
	switch t := that.(type) {
	case *WorkflowExecutionFilter:
		that1 = t
	case WorkflowExecutionFilter:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type WorkflowTypeFilter to the protobuf v3 wire format
func (val *WorkflowTypeFilter) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkflowTypeFilter from the protobuf v3 wire format
func (val *WorkflowTypeFilter) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkflowTypeFilter) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkflowTypeFilter values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkflowTypeFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkflowTypeFilter
	switch t := that.(type) {
	case *WorkflowTypeFilter:
		that1 = t
	case WorkflowTypeFilter:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type StartTimeFilter to the protobuf v3 wire format
func (val *StartTimeFilter) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type StartTimeFilter from the protobuf v3 wire format
func (val *StartTimeFilter) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *StartTimeFilter) Size() int {
	return proto.Size(val)
}

// Equal returns whether two StartTimeFilter values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *StartTimeFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *StartTimeFilter
	switch t := that.(type) {
	case *StartTimeFilter:
		that1 = t
	case StartTimeFilter:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type StatusFilter to the protobuf v3 wire format
func (val *StatusFilter) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type StatusFilter from the protobuf v3 wire format
func (val *StatusFilter) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *StatusFilter) Size() int {
	return proto.Size(val)
}

// Equal returns whether two StatusFilter values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *StatusFilter) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *StatusFilter
	switch t := that.(type) {
	case *StatusFilter:
		that1 = t
	case StatusFilter:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
