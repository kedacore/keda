// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/batch/v1/message.proto

package batch

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	v11 "go.temporal.io/api/common/v1"
	v1 "go.temporal.io/api/enums/v1"
	v13 "go.temporal.io/api/rules/v1"
	v12 "go.temporal.io/api/workflow/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BatchOperationInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Batch job ID
	JobId string `protobuf:"bytes,1,opt,name=job_id,json=jobId,proto3" json:"job_id,omitempty"`
	// Batch operation state
	State v1.BatchOperationState `protobuf:"varint,2,opt,name=state,proto3,enum=temporal.api.enums.v1.BatchOperationState" json:"state,omitempty"`
	// Batch operation start time
	StartTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Batch operation close time
	CloseTime     *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperationInfo) Reset() {
	*x = BatchOperationInfo{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationInfo) ProtoMessage() {}

func (x *BatchOperationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationInfo.ProtoReflect.Descriptor instead.
func (*BatchOperationInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *BatchOperationInfo) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *BatchOperationInfo) GetState() v1.BatchOperationState {
	if x != nil {
		return x.State
	}
	return v1.BatchOperationState(0)
}

func (x *BatchOperationInfo) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BatchOperationInfo) GetCloseTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CloseTime
	}
	return nil
}

// BatchOperationTermination sends terminate requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.TerminateWorkflowExecutionRequest.
// Ignore first_execution_run_id because this is used for single workflow operation.
type BatchOperationTermination struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Serialized value(s) to provide to the termination event
	Details *v11.Payloads `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
	// The identity of the worker/client
	Identity      string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperationTermination) Reset() {
	*x = BatchOperationTermination{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationTermination) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationTermination) ProtoMessage() {}

func (x *BatchOperationTermination) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationTermination.ProtoReflect.Descriptor instead.
func (*BatchOperationTermination) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *BatchOperationTermination) GetDetails() *v11.Payloads {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *BatchOperationTermination) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// BatchOperationSignal sends signals to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.SignalWorkflowExecutionRequest.
type BatchOperationSignal struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The workflow author-defined name of the signal to send to the workflow
	Signal string `protobuf:"bytes,1,opt,name=signal,proto3" json:"signal,omitempty"`
	// Serialized value(s) to provide with the signal
	Input *v11.Payloads `protobuf:"bytes,2,opt,name=input,proto3" json:"input,omitempty"`
	// Headers that are passed with the signal to the processing workflow.
	// These can include things like auth or tracing tokens.
	Header *v11.Header `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	// The identity of the worker/client
	Identity      string `protobuf:"bytes,4,opt,name=identity,proto3" json:"identity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperationSignal) Reset() {
	*x = BatchOperationSignal{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationSignal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationSignal) ProtoMessage() {}

func (x *BatchOperationSignal) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationSignal.ProtoReflect.Descriptor instead.
func (*BatchOperationSignal) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *BatchOperationSignal) GetSignal() string {
	if x != nil {
		return x.Signal
	}
	return ""
}

func (x *BatchOperationSignal) GetInput() *v11.Payloads {
	if x != nil {
		return x.Input
	}
	return nil
}

func (x *BatchOperationSignal) GetHeader() *v11.Header {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *BatchOperationSignal) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// BatchOperationCancellation sends cancel requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.RequestCancelWorkflowExecutionRequest.
// Ignore first_execution_run_id because this is used for single workflow operation.
type BatchOperationCancellation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identity of the worker/client
	Identity      string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperationCancellation) Reset() {
	*x = BatchOperationCancellation{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationCancellation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationCancellation) ProtoMessage() {}

func (x *BatchOperationCancellation) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationCancellation.ProtoReflect.Descriptor instead.
func (*BatchOperationCancellation) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *BatchOperationCancellation) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// BatchOperationDeletion sends deletion requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.DeleteWorkflowExecutionRequest.
type BatchOperationDeletion struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identity of the worker/client
	Identity      string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperationDeletion) Reset() {
	*x = BatchOperationDeletion{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationDeletion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationDeletion) ProtoMessage() {}

func (x *BatchOperationDeletion) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationDeletion.ProtoReflect.Descriptor instead.
func (*BatchOperationDeletion) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *BatchOperationDeletion) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// BatchOperationReset sends reset requests to batch workflows.
// Keep the parameter in sync with temporal.api.workflowservice.v1.ResetWorkflowExecutionRequest.
type BatchOperationReset struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identity of the worker/client.
	Identity string `protobuf:"bytes,3,opt,name=identity,proto3" json:"identity,omitempty"`
	// Describes what to reset to and how. If set, `reset_type` and `reset_reapply_type` are ignored.
	Options *v11.ResetOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
	// Reset type (deprecated, use `options`).
	ResetType v1.ResetType `protobuf:"varint,1,opt,name=reset_type,json=resetType,proto3,enum=temporal.api.enums.v1.ResetType" json:"reset_type,omitempty"`
	// History event reapply options (deprecated, use `options`).
	ResetReapplyType v1.ResetReapplyType `protobuf:"varint,2,opt,name=reset_reapply_type,json=resetReapplyType,proto3,enum=temporal.api.enums.v1.ResetReapplyType" json:"reset_reapply_type,omitempty"`
	// Operations to perform after the workflow has been reset. These operations will be applied
	// to the *new* run of the workflow execution in the order they are provided.
	// All operations are applied to the workflow before the first new workflow task is generated
	PostResetOperations []*v12.PostResetOperation `protobuf:"bytes,5,rep,name=post_reset_operations,json=postResetOperations,proto3" json:"post_reset_operations,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *BatchOperationReset) Reset() {
	*x = BatchOperationReset{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationReset) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationReset) ProtoMessage() {}

func (x *BatchOperationReset) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationReset.ProtoReflect.Descriptor instead.
func (*BatchOperationReset) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{5}
}

func (x *BatchOperationReset) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *BatchOperationReset) GetOptions() *v11.ResetOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *BatchOperationReset) GetResetType() v1.ResetType {
	if x != nil {
		return x.ResetType
	}
	return v1.ResetType(0)
}

func (x *BatchOperationReset) GetResetReapplyType() v1.ResetReapplyType {
	if x != nil {
		return x.ResetReapplyType
	}
	return v1.ResetReapplyType(0)
}

func (x *BatchOperationReset) GetPostResetOperations() []*v12.PostResetOperation {
	if x != nil {
		return x.PostResetOperations
	}
	return nil
}

// BatchOperationUpdateWorkflowExecutionOptions sends UpdateWorkflowExecutionOptions requests to batch workflows.
// Keep the parameters in sync with temporal.api.workflowservice.v1.UpdateWorkflowExecutionOptionsRequest.
type BatchOperationUpdateWorkflowExecutionOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identity of the worker/client.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// Update Workflow options that were originally specified via StartWorkflowExecution. Partial updates are accepted and controlled by update_mask.
	WorkflowExecutionOptions *v12.WorkflowExecutionOptions `protobuf:"bytes,2,opt,name=workflow_execution_options,json=workflowExecutionOptions,proto3" json:"workflow_execution_options,omitempty"`
	// Controls which fields from `workflow_execution_options` will be applied.
	// To unset a field, set it to null and use the update mask to indicate that it should be mutated.
	UpdateMask    *fieldmaskpb.FieldMask `protobuf:"bytes,3,opt,name=update_mask,json=updateMask,proto3" json:"update_mask,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) Reset() {
	*x = BatchOperationUpdateWorkflowExecutionOptions{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationUpdateWorkflowExecutionOptions) ProtoMessage() {}

func (x *BatchOperationUpdateWorkflowExecutionOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationUpdateWorkflowExecutionOptions.ProtoReflect.Descriptor instead.
func (*BatchOperationUpdateWorkflowExecutionOptions) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) GetWorkflowExecutionOptions() *v12.WorkflowExecutionOptions {
	if x != nil {
		return x.WorkflowExecutionOptions
	}
	return nil
}

func (x *BatchOperationUpdateWorkflowExecutionOptions) GetUpdateMask() *fieldmaskpb.FieldMask {
	if x != nil {
		return x.UpdateMask
	}
	return nil
}

// BatchOperationUnpauseActivities sends unpause requests to batch workflows.
type BatchOperationUnpauseActivities struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identity of the worker/client.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// The activity to unpause. If match_all is set to true, all activities will be unpaused.
	//
	// Types that are valid to be assigned to Activity:
	//
	//	*BatchOperationUnpauseActivities_Type
	//	*BatchOperationUnpauseActivities_MatchAll
	Activity isBatchOperationUnpauseActivities_Activity `protobuf_oneof:"activity"`
	// Providing this flag will also reset the number of attempts.
	ResetAttempts bool `protobuf:"varint,4,opt,name=reset_attempts,json=resetAttempts,proto3" json:"reset_attempts,omitempty"`
	// Providing this flag will also reset the heartbeat details.
	ResetHeartbeat bool `protobuf:"varint,5,opt,name=reset_heartbeat,json=resetHeartbeat,proto3" json:"reset_heartbeat,omitempty"`
	// If set, the activity will start at a random time within the specified jitter
	// duration, introducing variability to the start time.
	Jitter        *durationpb.Duration `protobuf:"bytes,6,opt,name=jitter,proto3" json:"jitter,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperationUnpauseActivities) Reset() {
	*x = BatchOperationUnpauseActivities{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationUnpauseActivities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationUnpauseActivities) ProtoMessage() {}

func (x *BatchOperationUnpauseActivities) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationUnpauseActivities.ProtoReflect.Descriptor instead.
func (*BatchOperationUnpauseActivities) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *BatchOperationUnpauseActivities) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *BatchOperationUnpauseActivities) GetActivity() isBatchOperationUnpauseActivities_Activity {
	if x != nil {
		return x.Activity
	}
	return nil
}

func (x *BatchOperationUnpauseActivities) GetType() string {
	if x != nil {
		if x, ok := x.Activity.(*BatchOperationUnpauseActivities_Type); ok {
			return x.Type
		}
	}
	return ""
}

func (x *BatchOperationUnpauseActivities) GetMatchAll() bool {
	if x != nil {
		if x, ok := x.Activity.(*BatchOperationUnpauseActivities_MatchAll); ok {
			return x.MatchAll
		}
	}
	return false
}

func (x *BatchOperationUnpauseActivities) GetResetAttempts() bool {
	if x != nil {
		return x.ResetAttempts
	}
	return false
}

func (x *BatchOperationUnpauseActivities) GetResetHeartbeat() bool {
	if x != nil {
		return x.ResetHeartbeat
	}
	return false
}

func (x *BatchOperationUnpauseActivities) GetJitter() *durationpb.Duration {
	if x != nil {
		return x.Jitter
	}
	return nil
}

type isBatchOperationUnpauseActivities_Activity interface {
	isBatchOperationUnpauseActivities_Activity()
}

type BatchOperationUnpauseActivities_Type struct {
	Type string `protobuf:"bytes,2,opt,name=type,proto3,oneof"`
}

type BatchOperationUnpauseActivities_MatchAll struct {
	MatchAll bool `protobuf:"varint,3,opt,name=match_all,json=matchAll,proto3,oneof"`
}

func (*BatchOperationUnpauseActivities_Type) isBatchOperationUnpauseActivities_Activity() {}

func (*BatchOperationUnpauseActivities_MatchAll) isBatchOperationUnpauseActivities_Activity() {}

// BatchOperationTriggerWorkflowRule sends TriggerWorkflowRule requests to batch workflows.
type BatchOperationTriggerWorkflowRule struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// The identity of the worker/client.
	Identity string `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	// Types that are valid to be assigned to Rule:
	//
	//	*BatchOperationTriggerWorkflowRule_Id
	//	*BatchOperationTriggerWorkflowRule_Spec
	Rule          isBatchOperationTriggerWorkflowRule_Rule `protobuf_oneof:"rule"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BatchOperationTriggerWorkflowRule) Reset() {
	*x = BatchOperationTriggerWorkflowRule{}
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BatchOperationTriggerWorkflowRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchOperationTriggerWorkflowRule) ProtoMessage() {}

func (x *BatchOperationTriggerWorkflowRule) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_batch_v1_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchOperationTriggerWorkflowRule.ProtoReflect.Descriptor instead.
func (*BatchOperationTriggerWorkflowRule) Descriptor() ([]byte, []int) {
	return file_temporal_api_batch_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *BatchOperationTriggerWorkflowRule) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

func (x *BatchOperationTriggerWorkflowRule) GetRule() isBatchOperationTriggerWorkflowRule_Rule {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *BatchOperationTriggerWorkflowRule) GetId() string {
	if x != nil {
		if x, ok := x.Rule.(*BatchOperationTriggerWorkflowRule_Id); ok {
			return x.Id
		}
	}
	return ""
}

func (x *BatchOperationTriggerWorkflowRule) GetSpec() *v13.WorkflowRuleSpec {
	if x != nil {
		if x, ok := x.Rule.(*BatchOperationTriggerWorkflowRule_Spec); ok {
			return x.Spec
		}
	}
	return nil
}

type isBatchOperationTriggerWorkflowRule_Rule interface {
	isBatchOperationTriggerWorkflowRule_Rule()
}

type BatchOperationTriggerWorkflowRule_Id struct {
	// ID of existing rule.
	Id string `protobuf:"bytes,2,opt,name=id,proto3,oneof"`
}

type BatchOperationTriggerWorkflowRule_Spec struct {
	// Rule specification to be applied to the workflow without creating a new rule.
	Spec *v13.WorkflowRuleSpec `protobuf:"bytes,3,opt,name=spec,proto3,oneof"`
}

func (*BatchOperationTriggerWorkflowRule_Id) isBatchOperationTriggerWorkflowRule_Rule() {}

func (*BatchOperationTriggerWorkflowRule_Spec) isBatchOperationTriggerWorkflowRule_Rule() {}

var File_temporal_api_batch_v1_message_proto protoreflect.FileDescriptor

const file_temporal_api_batch_v1_message_proto_rawDesc = "" +
	"\n" +
	"#temporal/api/batch/v1/message.proto\x12\x15temporal.api.batch.v1\x1a\x1egoogle/protobuf/duration.proto\x1a google/protobuf/field_mask.proto\x1a\x1fgoogle/protobuf/timestamp.proto\x1a$temporal/api/common/v1/message.proto\x1a+temporal/api/enums/v1/batch_operation.proto\x1a!temporal/api/enums/v1/reset.proto\x1a#temporal/api/rules/v1/message.proto\x1a&temporal/api/workflow/v1/message.proto\"\xe3\x01\n" +
	"\x12BatchOperationInfo\x12\x15\n" +
	"\x06job_id\x18\x01 \x01(\tR\x05jobId\x12@\n" +
	"\x05state\x18\x02 \x01(\x0e2*.temporal.api.enums.v1.BatchOperationStateR\x05state\x129\n" +
	"\n" +
	"start_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\tstartTime\x129\n" +
	"\n" +
	"close_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\tcloseTime\"s\n" +
	"\x19BatchOperationTermination\x12:\n" +
	"\adetails\x18\x01 \x01(\v2 .temporal.api.common.v1.PayloadsR\adetails\x12\x1a\n" +
	"\bidentity\x18\x02 \x01(\tR\bidentity\"\xba\x01\n" +
	"\x14BatchOperationSignal\x12\x16\n" +
	"\x06signal\x18\x01 \x01(\tR\x06signal\x126\n" +
	"\x05input\x18\x02 \x01(\v2 .temporal.api.common.v1.PayloadsR\x05input\x126\n" +
	"\x06header\x18\x03 \x01(\v2\x1e.temporal.api.common.v1.HeaderR\x06header\x12\x1a\n" +
	"\bidentity\x18\x04 \x01(\tR\bidentity\"8\n" +
	"\x1aBatchOperationCancellation\x12\x1a\n" +
	"\bidentity\x18\x01 \x01(\tR\bidentity\"4\n" +
	"\x16BatchOperationDeletion\x12\x1a\n" +
	"\bidentity\x18\x01 \x01(\tR\bidentity\"\xeb\x02\n" +
	"\x13BatchOperationReset\x12\x1a\n" +
	"\bidentity\x18\x03 \x01(\tR\bidentity\x12>\n" +
	"\aoptions\x18\x04 \x01(\v2$.temporal.api.common.v1.ResetOptionsR\aoptions\x12?\n" +
	"\n" +
	"reset_type\x18\x01 \x01(\x0e2 .temporal.api.enums.v1.ResetTypeR\tresetType\x12U\n" +
	"\x12reset_reapply_type\x18\x02 \x01(\x0e2'.temporal.api.enums.v1.ResetReapplyTypeR\x10resetReapplyType\x12`\n" +
	"\x15post_reset_operations\x18\x05 \x03(\v2,.temporal.api.workflow.v1.PostResetOperationR\x13postResetOperations\"\xf9\x01\n" +
	",BatchOperationUpdateWorkflowExecutionOptions\x12\x1a\n" +
	"\bidentity\x18\x01 \x01(\tR\bidentity\x12p\n" +
	"\x1aworkflow_execution_options\x18\x02 \x01(\v22.temporal.api.workflow.v1.WorkflowExecutionOptionsR\x18workflowExecutionOptions\x12;\n" +
	"\vupdate_mask\x18\x03 \x01(\v2\x1a.google.protobuf.FieldMaskR\n" +
	"updateMask\"\x81\x02\n" +
	"\x1fBatchOperationUnpauseActivities\x12\x1a\n" +
	"\bidentity\x18\x01 \x01(\tR\bidentity\x12\x14\n" +
	"\x04type\x18\x02 \x01(\tH\x00R\x04type\x12\x1d\n" +
	"\tmatch_all\x18\x03 \x01(\bH\x00R\bmatchAll\x12%\n" +
	"\x0ereset_attempts\x18\x04 \x01(\bR\rresetAttempts\x12'\n" +
	"\x0freset_heartbeat\x18\x05 \x01(\bR\x0eresetHeartbeat\x121\n" +
	"\x06jitter\x18\x06 \x01(\v2\x19.google.protobuf.DurationR\x06jitterB\n" +
	"\n" +
	"\bactivity\"\x98\x01\n" +
	"!BatchOperationTriggerWorkflowRule\x12\x1a\n" +
	"\bidentity\x18\x01 \x01(\tR\bidentity\x12\x10\n" +
	"\x02id\x18\x02 \x01(\tH\x00R\x02id\x12=\n" +
	"\x04spec\x18\x03 \x01(\v2'.temporal.api.rules.v1.WorkflowRuleSpecH\x00R\x04specB\x06\n" +
	"\x04ruleB\x84\x01\n" +
	"\x18io.temporal.api.batch.v1B\fMessageProtoP\x01Z!go.temporal.io/api/batch/v1;batch\xaa\x02\x17Temporalio.Api.Batch.V1\xea\x02\x1aTemporalio::Api::Batch::V1b\x06proto3"

var (
	file_temporal_api_batch_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_batch_v1_message_proto_rawDescData []byte
)

func file_temporal_api_batch_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_batch_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_batch_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_api_batch_v1_message_proto_rawDesc), len(file_temporal_api_batch_v1_message_proto_rawDesc)))
	})
	return file_temporal_api_batch_v1_message_proto_rawDescData
}

var file_temporal_api_batch_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_temporal_api_batch_v1_message_proto_goTypes = []any{
	(*BatchOperationInfo)(nil),                           // 0: temporal.api.batch.v1.BatchOperationInfo
	(*BatchOperationTermination)(nil),                    // 1: temporal.api.batch.v1.BatchOperationTermination
	(*BatchOperationSignal)(nil),                         // 2: temporal.api.batch.v1.BatchOperationSignal
	(*BatchOperationCancellation)(nil),                   // 3: temporal.api.batch.v1.BatchOperationCancellation
	(*BatchOperationDeletion)(nil),                       // 4: temporal.api.batch.v1.BatchOperationDeletion
	(*BatchOperationReset)(nil),                          // 5: temporal.api.batch.v1.BatchOperationReset
	(*BatchOperationUpdateWorkflowExecutionOptions)(nil), // 6: temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptions
	(*BatchOperationUnpauseActivities)(nil),              // 7: temporal.api.batch.v1.BatchOperationUnpauseActivities
	(*BatchOperationTriggerWorkflowRule)(nil),            // 8: temporal.api.batch.v1.BatchOperationTriggerWorkflowRule
	(v1.BatchOperationState)(0),                          // 9: temporal.api.enums.v1.BatchOperationState
	(*timestamppb.Timestamp)(nil),                        // 10: google.protobuf.Timestamp
	(*v11.Payloads)(nil),                                 // 11: temporal.api.common.v1.Payloads
	(*v11.Header)(nil),                                   // 12: temporal.api.common.v1.Header
	(*v11.ResetOptions)(nil),                             // 13: temporal.api.common.v1.ResetOptions
	(v1.ResetType)(0),                                    // 14: temporal.api.enums.v1.ResetType
	(v1.ResetReapplyType)(0),                             // 15: temporal.api.enums.v1.ResetReapplyType
	(*v12.PostResetOperation)(nil),                       // 16: temporal.api.workflow.v1.PostResetOperation
	(*v12.WorkflowExecutionOptions)(nil),                 // 17: temporal.api.workflow.v1.WorkflowExecutionOptions
	(*fieldmaskpb.FieldMask)(nil),                        // 18: google.protobuf.FieldMask
	(*durationpb.Duration)(nil),                          // 19: google.protobuf.Duration
	(*v13.WorkflowRuleSpec)(nil),                         // 20: temporal.api.rules.v1.WorkflowRuleSpec
}
var file_temporal_api_batch_v1_message_proto_depIdxs = []int32{
	9,  // 0: temporal.api.batch.v1.BatchOperationInfo.state:type_name -> temporal.api.enums.v1.BatchOperationState
	10, // 1: temporal.api.batch.v1.BatchOperationInfo.start_time:type_name -> google.protobuf.Timestamp
	10, // 2: temporal.api.batch.v1.BatchOperationInfo.close_time:type_name -> google.protobuf.Timestamp
	11, // 3: temporal.api.batch.v1.BatchOperationTermination.details:type_name -> temporal.api.common.v1.Payloads
	11, // 4: temporal.api.batch.v1.BatchOperationSignal.input:type_name -> temporal.api.common.v1.Payloads
	12, // 5: temporal.api.batch.v1.BatchOperationSignal.header:type_name -> temporal.api.common.v1.Header
	13, // 6: temporal.api.batch.v1.BatchOperationReset.options:type_name -> temporal.api.common.v1.ResetOptions
	14, // 7: temporal.api.batch.v1.BatchOperationReset.reset_type:type_name -> temporal.api.enums.v1.ResetType
	15, // 8: temporal.api.batch.v1.BatchOperationReset.reset_reapply_type:type_name -> temporal.api.enums.v1.ResetReapplyType
	16, // 9: temporal.api.batch.v1.BatchOperationReset.post_reset_operations:type_name -> temporal.api.workflow.v1.PostResetOperation
	17, // 10: temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptions.workflow_execution_options:type_name -> temporal.api.workflow.v1.WorkflowExecutionOptions
	18, // 11: temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptions.update_mask:type_name -> google.protobuf.FieldMask
	19, // 12: temporal.api.batch.v1.BatchOperationUnpauseActivities.jitter:type_name -> google.protobuf.Duration
	20, // 13: temporal.api.batch.v1.BatchOperationTriggerWorkflowRule.spec:type_name -> temporal.api.rules.v1.WorkflowRuleSpec
	14, // [14:14] is the sub-list for method output_type
	14, // [14:14] is the sub-list for method input_type
	14, // [14:14] is the sub-list for extension type_name
	14, // [14:14] is the sub-list for extension extendee
	0,  // [0:14] is the sub-list for field type_name
}

func init() { file_temporal_api_batch_v1_message_proto_init() }
func file_temporal_api_batch_v1_message_proto_init() {
	if File_temporal_api_batch_v1_message_proto != nil {
		return
	}
	file_temporal_api_batch_v1_message_proto_msgTypes[7].OneofWrappers = []any{
		(*BatchOperationUnpauseActivities_Type)(nil),
		(*BatchOperationUnpauseActivities_MatchAll)(nil),
	}
	file_temporal_api_batch_v1_message_proto_msgTypes[8].OneofWrappers = []any{
		(*BatchOperationTriggerWorkflowRule_Id)(nil),
		(*BatchOperationTriggerWorkflowRule_Spec)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_api_batch_v1_message_proto_rawDesc), len(file_temporal_api_batch_v1_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_batch_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_batch_v1_message_proto_depIdxs,
		MessageInfos:      file_temporal_api_batch_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_batch_v1_message_proto = out.File
	file_temporal_api_batch_v1_message_proto_goTypes = nil
	file_temporal_api_batch_v1_message_proto_depIdxs = nil
}
