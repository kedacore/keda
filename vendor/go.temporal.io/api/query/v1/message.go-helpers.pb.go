// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package query

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type WorkflowQuery to the protobuf v3 wire format
func (val *WorkflowQuery) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkflowQuery from the protobuf v3 wire format
func (val *WorkflowQuery) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkflowQuery) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkflowQuery values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkflowQuery) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkflowQuery
	switch t := that.(type) {
	case *WorkflowQuery:
		that1 = t
	case WorkflowQuery:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type WorkflowQueryResult to the protobuf v3 wire format
func (val *WorkflowQueryResult) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkflowQueryResult from the protobuf v3 wire format
func (val *WorkflowQueryResult) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkflowQueryResult) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkflowQueryResult values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkflowQueryResult) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkflowQueryResult
	switch t := that.(type) {
	case *WorkflowQueryResult:
		that1 = t
	case WorkflowQueryResult:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type QueryRejected to the protobuf v3 wire format
func (val *QueryRejected) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type QueryRejected from the protobuf v3 wire format
func (val *QueryRejected) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *QueryRejected) Size() int {
	return proto.Size(val)
}

// Equal returns whether two QueryRejected values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *QueryRejected) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *QueryRejected
	switch t := that.(type) {
	case *QueryRejected:
		that1 = t
	case QueryRejected:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
