// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/enums/v1/workflow.proto

package enums

import (
	reflect "reflect"
	"strconv"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Defines whether to allow re-using a workflow id from a previously *closed* workflow.
// If the request is denied, the server returns a `WorkflowExecutionAlreadyStartedFailure` error.
//
// See `WorkflowIdConflictPolicy` for handling workflow id duplication with a *running* workflow.
type WorkflowIdReusePolicy int32

const (
	WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED WorkflowIdReusePolicy = 0
	// Allow starting a workflow execution using the same workflow id.
	WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE WorkflowIdReusePolicy = 1
	// Allow starting a workflow execution using the same workflow id, only when the last
	// execution's final state is one of [terminated, cancelled, timed out, failed].
	WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY WorkflowIdReusePolicy = 2
	// Do not permit re-use of the workflow id for this workflow. Future start workflow requests
	// could potentially change the policy, allowing re-use of the workflow id.
	WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE WorkflowIdReusePolicy = 3
	// This option belongs in WorkflowIdConflictPolicy but is here for backwards compatibility.
	// If specified, it acts like ALLOW_DUPLICATE, but also the WorkflowId*Conflict*Policy on
	// the request is treated as WORKFLOW_ID_CONFLICT_POLICY_TERMINATE_EXISTING.
	// If no running workflow, then the behavior is the same as ALLOW_DUPLICATE.
	WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING WorkflowIdReusePolicy = 4
)

// Enum value maps for WorkflowIdReusePolicy.
var (
	WorkflowIdReusePolicy_name = map[int32]string{
		0: "WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED",
		1: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE",
		2: "WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY",
		3: "WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE",
		4: "WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING",
	}
	WorkflowIdReusePolicy_value = map[string]int32{
		"WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED":                 0,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE":             1,
		"WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY": 2,
		"WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE":            3,
		"WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING":        4,
	}
)

func (x WorkflowIdReusePolicy) Enum() *WorkflowIdReusePolicy {
	p := new(WorkflowIdReusePolicy)
	*p = x
	return p
}

func (x WorkflowIdReusePolicy) String() string {
	switch x {
	case WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED:
		return "Unspecified"
	case WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE:
		return "AllowDuplicate"
	case WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY:
		return "AllowDuplicateFailedOnly"
	case WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE:
		return "RejectDuplicate"
	case WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING:
		return "TerminateIfRunning"
	default:
		return strconv.Itoa(int(x))
	}

}

func (WorkflowIdReusePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[0].Descriptor()
}

func (WorkflowIdReusePolicy) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[0]
}

func (x WorkflowIdReusePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowIdReusePolicy.Descriptor instead.
func (WorkflowIdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{0}
}

// Defines what to do when trying to start a workflow with the same workflow id as a *running* workflow.
// Note that it is *never* valid to have two actively running instances of the same workflow id.
//
// See `WorkflowIdReusePolicy` for handling workflow id duplication with a *closed* workflow.
type WorkflowIdConflictPolicy int32

const (
	WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED WorkflowIdConflictPolicy = 0
	// Don't start a new workflow; instead return `WorkflowExecutionAlreadyStartedFailure`.
	WORKFLOW_ID_CONFLICT_POLICY_FAIL WorkflowIdConflictPolicy = 1
	// Don't start a new workflow; instead return a workflow handle for the running workflow.
	WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING WorkflowIdConflictPolicy = 2
	// Terminate the running workflow before starting a new one.
	WORKFLOW_ID_CONFLICT_POLICY_TERMINATE_EXISTING WorkflowIdConflictPolicy = 3
)

// Enum value maps for WorkflowIdConflictPolicy.
var (
	WorkflowIdConflictPolicy_name = map[int32]string{
		0: "WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED",
		1: "WORKFLOW_ID_CONFLICT_POLICY_FAIL",
		2: "WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING",
		3: "WORKFLOW_ID_CONFLICT_POLICY_TERMINATE_EXISTING",
	}
	WorkflowIdConflictPolicy_value = map[string]int32{
		"WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED":        0,
		"WORKFLOW_ID_CONFLICT_POLICY_FAIL":               1,
		"WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING":       2,
		"WORKFLOW_ID_CONFLICT_POLICY_TERMINATE_EXISTING": 3,
	}
)

func (x WorkflowIdConflictPolicy) Enum() *WorkflowIdConflictPolicy {
	p := new(WorkflowIdConflictPolicy)
	*p = x
	return p
}

func (x WorkflowIdConflictPolicy) String() string {
	switch x {
	case WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED:
		return "Unspecified"
	case WORKFLOW_ID_CONFLICT_POLICY_FAIL:
		return "Fail"
	case WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING:
		return "UseExisting"
	case WORKFLOW_ID_CONFLICT_POLICY_TERMINATE_EXISTING:
		return "TerminateExisting"
	default:
		return strconv.Itoa(int(x))
	}

}

func (WorkflowIdConflictPolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[1].Descriptor()
}

func (WorkflowIdConflictPolicy) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[1]
}

func (x WorkflowIdConflictPolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkflowIdConflictPolicy.Descriptor instead.
func (WorkflowIdConflictPolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{1}
}

// Defines how child workflows will react to their parent completing
type ParentClosePolicy int32

const (
	PARENT_CLOSE_POLICY_UNSPECIFIED ParentClosePolicy = 0
	// The child workflow will also terminate
	PARENT_CLOSE_POLICY_TERMINATE ParentClosePolicy = 1
	// The child workflow will do nothing
	PARENT_CLOSE_POLICY_ABANDON ParentClosePolicy = 2
	// Cancellation will be requested of the child workflow
	PARENT_CLOSE_POLICY_REQUEST_CANCEL ParentClosePolicy = 3
)

// Enum value maps for ParentClosePolicy.
var (
	ParentClosePolicy_name = map[int32]string{
		0: "PARENT_CLOSE_POLICY_UNSPECIFIED",
		1: "PARENT_CLOSE_POLICY_TERMINATE",
		2: "PARENT_CLOSE_POLICY_ABANDON",
		3: "PARENT_CLOSE_POLICY_REQUEST_CANCEL",
	}
	ParentClosePolicy_value = map[string]int32{
		"PARENT_CLOSE_POLICY_UNSPECIFIED":    0,
		"PARENT_CLOSE_POLICY_TERMINATE":      1,
		"PARENT_CLOSE_POLICY_ABANDON":        2,
		"PARENT_CLOSE_POLICY_REQUEST_CANCEL": 3,
	}
)

func (x ParentClosePolicy) Enum() *ParentClosePolicy {
	p := new(ParentClosePolicy)
	*p = x
	return p
}

func (x ParentClosePolicy) String() string {
	switch x {
	case PARENT_CLOSE_POLICY_UNSPECIFIED:
		return "Unspecified"
	case PARENT_CLOSE_POLICY_TERMINATE:
		return "Terminate"
	case PARENT_CLOSE_POLICY_ABANDON:
		return "Abandon"
	case PARENT_CLOSE_POLICY_REQUEST_CANCEL:
		return "RequestCancel"
	default:
		return strconv.Itoa(int(x))
	}

}

func (ParentClosePolicy) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[2].Descriptor()
}

func (ParentClosePolicy) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[2]
}

func (x ParentClosePolicy) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ParentClosePolicy.Descriptor instead.
func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{2}
}

type ContinueAsNewInitiator int32

const (
	CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED ContinueAsNewInitiator = 0
	// The workflow itself requested to continue as new
	CONTINUE_AS_NEW_INITIATOR_WORKFLOW ContinueAsNewInitiator = 1
	// The workflow continued as new because it is retrying
	CONTINUE_AS_NEW_INITIATOR_RETRY ContinueAsNewInitiator = 2
	// The workflow continued as new because cron has triggered a new execution
	CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE ContinueAsNewInitiator = 3
)

// Enum value maps for ContinueAsNewInitiator.
var (
	ContinueAsNewInitiator_name = map[int32]string{
		0: "CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED",
		1: "CONTINUE_AS_NEW_INITIATOR_WORKFLOW",
		2: "CONTINUE_AS_NEW_INITIATOR_RETRY",
		3: "CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE",
	}
	ContinueAsNewInitiator_value = map[string]int32{
		"CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED":   0,
		"CONTINUE_AS_NEW_INITIATOR_WORKFLOW":      1,
		"CONTINUE_AS_NEW_INITIATOR_RETRY":         2,
		"CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE": 3,
	}
)

func (x ContinueAsNewInitiator) Enum() *ContinueAsNewInitiator {
	p := new(ContinueAsNewInitiator)
	*p = x
	return p
}

func (x ContinueAsNewInitiator) String() string {
	switch x {
	case CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED:
		return "Unspecified"
	case CONTINUE_AS_NEW_INITIATOR_WORKFLOW:
		return "Workflow"
	case CONTINUE_AS_NEW_INITIATOR_RETRY:
		return "Retry"
	case CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE:
		return "CronSchedule"
	default:
		return strconv.Itoa(int(x))
	}

}

func (ContinueAsNewInitiator) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[3].Descriptor()
}

func (ContinueAsNewInitiator) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[3]
}

func (x ContinueAsNewInitiator) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContinueAsNewInitiator.Descriptor instead.
func (ContinueAsNewInitiator) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{3}
}

// (-- api-linter: core::0216::synonyms=disabled
//
//	aip.dev/not-precedent: There is WorkflowExecutionState already in another package. --)
type WorkflowExecutionStatus int32

const (
	WORKFLOW_EXECUTION_STATUS_UNSPECIFIED WorkflowExecutionStatus = 0
	// Value 1 is hardcoded in SQL persistence.
	WORKFLOW_EXECUTION_STATUS_RUNNING          WorkflowExecutionStatus = 1
	WORKFLOW_EXECUTION_STATUS_COMPLETED        WorkflowExecutionStatus = 2
	WORKFLOW_EXECUTION_STATUS_FAILED           WorkflowExecutionStatus = 3
	WORKFLOW_EXECUTION_STATUS_CANCELED         WorkflowExecutionStatus = 4
	WORKFLOW_EXECUTION_STATUS_TERMINATED       WorkflowExecutionStatus = 5
	WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW WorkflowExecutionStatus = 6
	WORKFLOW_EXECUTION_STATUS_TIMED_OUT        WorkflowExecutionStatus = 7
)

// Enum value maps for WorkflowExecutionStatus.
var (
	WorkflowExecutionStatus_name = map[int32]string{
		0: "WORKFLOW_EXECUTION_STATUS_UNSPECIFIED",
		1: "WORKFLOW_EXECUTION_STATUS_RUNNING",
		2: "WORKFLOW_EXECUTION_STATUS_COMPLETED",
		3: "WORKFLOW_EXECUTION_STATUS_FAILED",
		4: "WORKFLOW_EXECUTION_STATUS_CANCELED",
		5: "WORKFLOW_EXECUTION_STATUS_TERMINATED",
		6: "WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW",
		7: "WORKFLOW_EXECUTION_STATUS_TIMED_OUT",
	}
	WorkflowExecutionStatus_value = map[string]int32{
		"WORKFLOW_EXECUTION_STATUS_UNSPECIFIED":      0,
		"WORKFLOW_EXECUTION_STATUS_RUNNING":          1,
		"WORKFLOW_EXECUTION_STATUS_COMPLETED":        2,
		"WORKFLOW_EXECUTION_STATUS_FAILED":           3,
		"WORKFLOW_EXECUTION_STATUS_CANCELED":         4,
		"WORKFLOW_EXECUTION_STATUS_TERMINATED":       5,
		"WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW": 6,
		"WORKFLOW_EXECUTION_STATUS_TIMED_OUT":        7,
	}
)

func (x WorkflowExecutionStatus) Enum() *WorkflowExecutionStatus {
	p := new(WorkflowExecutionStatus)
	*p = x
	return p
}

func (x WorkflowExecutionStatus) String() string {
	switch x {
	case WORKFLOW_EXECUTION_STATUS_UNSPECIFIED:
		return "Unspecified"
	case WORKFLOW_EXECUTION_STATUS_RUNNING:
		return "Running"
	case WORKFLOW_EXECUTION_STATUS_COMPLETED:
		return "Completed"
	case WORKFLOW_EXECUTION_STATUS_FAILED:
		return "Failed"
	case WORKFLOW_EXECUTION_STATUS_CANCELED:
		return "Canceled"
	case WORKFLOW_EXECUTION_STATUS_TERMINATED:
		return "Terminated"
	case WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW:
		return "ContinuedAsNew"
	case WORKFLOW_EXECUTION_STATUS_TIMED_OUT:
		return "TimedOut"
	default

	// Deprecated: Use WorkflowExecutionStatus.Descriptor instead.
	:
		return strconv.Itoa(int(x))
	}

}

func (WorkflowExecutionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[4].Descriptor()
}

func (WorkflowExecutionStatus) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[4]
}

func (x WorkflowExecutionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

func (WorkflowExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{4}
}

type PendingActivityState int32

const (
	PENDING_ACTIVITY_STATE_UNSPECIFIED      PendingActivityState = 0
	PENDING_ACTIVITY_STATE_SCHEDULED        PendingActivityState = 1
	PENDING_ACTIVITY_STATE_STARTED          PendingActivityState = 2
	PENDING_ACTIVITY_STATE_CANCEL_REQUESTED PendingActivityState = 3
	// PAUSED means activity is paused on the server, and is not running in the worker
	PENDING_ACTIVITY_STATE_PAUSED PendingActivityState = 4
	// PAUSE_REQUESTED means activity is currently running on the worker, but paused on the server
	PENDING_ACTIVITY_STATE_PAUSE_REQUESTED PendingActivityState = 5
)

// Enum value maps for PendingActivityState.
var (
	PendingActivityState_name = map[int32]string{
		0: "PENDING_ACTIVITY_STATE_UNSPECIFIED",
		1: "PENDING_ACTIVITY_STATE_SCHEDULED",
		2: "PENDING_ACTIVITY_STATE_STARTED",
		3: "PENDING_ACTIVITY_STATE_CANCEL_REQUESTED",
		4: "PENDING_ACTIVITY_STATE_PAUSED",
		5: "PENDING_ACTIVITY_STATE_PAUSE_REQUESTED",
	}
	PendingActivityState_value = map[string]int32{
		"PENDING_ACTIVITY_STATE_UNSPECIFIED":      0,
		"PENDING_ACTIVITY_STATE_SCHEDULED":        1,
		"PENDING_ACTIVITY_STATE_STARTED":          2,
		"PENDING_ACTIVITY_STATE_CANCEL_REQUESTED": 3,
		"PENDING_ACTIVITY_STATE_PAUSED":           4,
		"PENDING_ACTIVITY_STATE_PAUSE_REQUESTED":  5,
	}
)

func (x PendingActivityState) Enum() *PendingActivityState {
	p := new(PendingActivityState)
	*p = x
	return p
}

func (x PendingActivityState) String() string {
	switch x {
	case PENDING_ACTIVITY_STATE_UNSPECIFIED:
		return "Unspecified"
	case PENDING_ACTIVITY_STATE_SCHEDULED:
		return "Scheduled"
	case PENDING_ACTIVITY_STATE_STARTED:
		return "Started"
	case PENDING_ACTIVITY_STATE_CANCEL_REQUESTED:
		return "CancelRequested"
	case PENDING_ACTIVITY_STATE_PAUSED:
		return "Paused"
	case PENDING_ACTIVITY_STATE_PAUSE_REQUESTED:
		return "PauseRequested"
	default:
		return strconv.Itoa(int(x))
	}

}

func (PendingActivityState) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[5].Descriptor()
}

func (PendingActivityState) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[5]
}

func (x PendingActivityState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PendingActivityState.Descriptor instead.
func (PendingActivityState) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{5}
}

type PendingWorkflowTaskState int32

const (
	PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED PendingWorkflowTaskState = 0
	PENDING_WORKFLOW_TASK_STATE_SCHEDULED   PendingWorkflowTaskState = 1
	PENDING_WORKFLOW_TASK_STATE_STARTED     PendingWorkflowTaskState = 2
)

// Enum value maps for PendingWorkflowTaskState.
var (
	PendingWorkflowTaskState_name = map[int32]string{
		0: "PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED",
		1: "PENDING_WORKFLOW_TASK_STATE_SCHEDULED",
		2: "PENDING_WORKFLOW_TASK_STATE_STARTED",
	}
	PendingWorkflowTaskState_value = map[string]int32{
		"PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED": 0,
		"PENDING_WORKFLOW_TASK_STATE_SCHEDULED":   1,
		"PENDING_WORKFLOW_TASK_STATE_STARTED":     2,
	}
)

func (x PendingWorkflowTaskState) Enum() *PendingWorkflowTaskState {
	p := new(PendingWorkflowTaskState)
	*p = x
	return p
}

func (x PendingWorkflowTaskState) String() string {
	switch x {
	case PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED:
		return "Unspecified"
	case PENDING_WORKFLOW_TASK_STATE_SCHEDULED:
		return "Scheduled"
	case PENDING_WORKFLOW_TASK_STATE_STARTED:
		return "Started"
	default:
		return strconv.Itoa(int(x))
	}

}

func (PendingWorkflowTaskState) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[6].Descriptor()
}

func (PendingWorkflowTaskState) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[6]
}

func (x PendingWorkflowTaskState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PendingWorkflowTaskState.Descriptor instead.
func (PendingWorkflowTaskState) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{6}
}

type HistoryEventFilterType int32

const (
	HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED HistoryEventFilterType = 0
	HISTORY_EVENT_FILTER_TYPE_ALL_EVENT   HistoryEventFilterType = 1
	HISTORY_EVENT_FILTER_TYPE_CLOSE_EVENT HistoryEventFilterType = 2
)

// Enum value maps for HistoryEventFilterType.
var (
	HistoryEventFilterType_name = map[int32]string{
		0: "HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED",
		1: "HISTORY_EVENT_FILTER_TYPE_ALL_EVENT",
		2: "HISTORY_EVENT_FILTER_TYPE_CLOSE_EVENT",
	}
	HistoryEventFilterType_value = map[string]int32{
		"HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED": 0,
		"HISTORY_EVENT_FILTER_TYPE_ALL_EVENT":   1,
		"HISTORY_EVENT_FILTER_TYPE_CLOSE_EVENT": 2,
	}
)

func (x HistoryEventFilterType) Enum() *HistoryEventFilterType {
	p := new(HistoryEventFilterType)
	*p = x
	return p
}

func (x HistoryEventFilterType) String() string {
	switch x {
	case HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED:
		return "Unspecified"
	case HISTORY_EVENT_FILTER_TYPE_ALL_EVENT:
		return "AllEvent"
	case HISTORY_EVENT_FILTER_TYPE_CLOSE_EVENT:
		return "CloseEvent"
	default:
		return strconv.Itoa(int(x))
	}

}

func (HistoryEventFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[7].Descriptor()
}

func (HistoryEventFilterType) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[7]
}

func (x HistoryEventFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HistoryEventFilterType.Descriptor instead.
func (HistoryEventFilterType) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{7}
}

type RetryState int32

const (
	RETRY_STATE_UNSPECIFIED              RetryState = 0
	RETRY_STATE_IN_PROGRESS              RetryState = 1
	RETRY_STATE_NON_RETRYABLE_FAILURE    RetryState = 2
	RETRY_STATE_TIMEOUT                  RetryState = 3
	RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED RetryState = 4
	RETRY_STATE_RETRY_POLICY_NOT_SET     RetryState = 5
	RETRY_STATE_INTERNAL_SERVER_ERROR    RetryState = 6
	RETRY_STATE_CANCEL_REQUESTED         RetryState = 7
)

// Enum value maps for RetryState.
var (
	RetryState_name = map[int32]string{
		0: "RETRY_STATE_UNSPECIFIED",
		1: "RETRY_STATE_IN_PROGRESS",
		2: "RETRY_STATE_NON_RETRYABLE_FAILURE",
		3: "RETRY_STATE_TIMEOUT",
		4: "RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED",
		5: "RETRY_STATE_RETRY_POLICY_NOT_SET",
		6: "RETRY_STATE_INTERNAL_SERVER_ERROR",
		7: "RETRY_STATE_CANCEL_REQUESTED",
	}
	RetryState_value = map[string]int32{
		"RETRY_STATE_UNSPECIFIED":              0,
		"RETRY_STATE_IN_PROGRESS":              1,
		"RETRY_STATE_NON_RETRYABLE_FAILURE":    2,
		"RETRY_STATE_TIMEOUT":                  3,
		"RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED": 4,
		"RETRY_STATE_RETRY_POLICY_NOT_SET":     5,
		"RETRY_STATE_INTERNAL_SERVER_ERROR":    6,
		"RETRY_STATE_CANCEL_REQUESTED":         7,
	}
)

func (x RetryState) Enum() *RetryState {
	p := new(RetryState)
	*p = x
	return p
}

func (x RetryState) String() string {
	switch x {
	case RETRY_STATE_UNSPECIFIED:
		return "Unspecified"
	case RETRY_STATE_IN_PROGRESS:
		return "InProgress"
	case RETRY_STATE_NON_RETRYABLE_FAILURE:
		return "NonRetryableFailure"
	case RETRY_STATE_TIMEOUT:
		return "Timeout"
	case RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED:
		return "MaximumAttemptsReached"
	case RETRY_STATE_RETRY_POLICY_NOT_SET:
		return "RetryPolicyNotSet"
	case RETRY_STATE_INTERNAL_SERVER_ERROR:
		return "InternalServerError"
	case RETRY_STATE_CANCEL_REQUESTED:

		// Deprecated: Use RetryState.Descriptor instead.
		return "CancelRequested"
	default:
		return strconv.Itoa(int(x))
	}

}

func (RetryState) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[8].Descriptor()
}

func (RetryState) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[8]
}

func (x RetryState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

func (RetryState) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{8}
}

type TimeoutType int32

const (
	TIMEOUT_TYPE_UNSPECIFIED       TimeoutType = 0
	TIMEOUT_TYPE_START_TO_CLOSE    TimeoutType = 1
	TIMEOUT_TYPE_SCHEDULE_TO_START TimeoutType = 2
	TIMEOUT_TYPE_SCHEDULE_TO_CLOSE TimeoutType = 3
	TIMEOUT_TYPE_HEARTBEAT         TimeoutType = 4
)

// Enum value maps for TimeoutType.
var (
	TimeoutType_name = map[int32]string{
		0: "TIMEOUT_TYPE_UNSPECIFIED",
		1: "TIMEOUT_TYPE_START_TO_CLOSE",
		2: "TIMEOUT_TYPE_SCHEDULE_TO_START",
		3: "TIMEOUT_TYPE_SCHEDULE_TO_CLOSE",
		4: "TIMEOUT_TYPE_HEARTBEAT",
	}
	TimeoutType_value = map[string]int32{
		"TIMEOUT_TYPE_UNSPECIFIED":       0,
		"TIMEOUT_TYPE_START_TO_CLOSE":    1,
		"TIMEOUT_TYPE_SCHEDULE_TO_START": 2,
		"TIMEOUT_TYPE_SCHEDULE_TO_CLOSE": 3,
		"TIMEOUT_TYPE_HEARTBEAT":         4,
	}
)

func (x TimeoutType) Enum() *TimeoutType {
	p := new(TimeoutType)
	*p = x
	return p
}

func (x TimeoutType) String() string {
	switch x {
	case TIMEOUT_TYPE_UNSPECIFIED:
		return "Unspecified"
	case TIMEOUT_TYPE_START_TO_CLOSE:
		return "StartToClose"
	case TIMEOUT_TYPE_SCHEDULE_TO_START:
		return "ScheduleToStart"
	case TIMEOUT_TYPE_SCHEDULE_TO_CLOSE:
		return "ScheduleToClose"
	case TIMEOUT_TYPE_HEARTBEAT:
		return "Heartbeat"
	default:
		return strconv.Itoa(int(x))
	}

}

func (TimeoutType) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[9].Descriptor()
}

func (TimeoutType) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[9]
}

func (x TimeoutType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeoutType.Descriptor instead.
func (TimeoutType) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{9}
}

// Versioning Behavior specifies if and how a workflow execution moves between Worker Deployment
// Versions. The Versioning Behavior of a workflow execution is typically specified by the worker
// who completes the first task of the execution, but is also overridable manually for new and
// existing workflows (see VersioningOverride).
// Experimental. Worker Deployments are experimental and might significantly change in the future.
type VersioningBehavior int32

const (
	// Workflow execution does not have a Versioning Behavior and is called Unversioned. This is the
	// legacy behavior. An Unversioned workflow's task can go to any Unversioned worker (see
	// `WorkerVersioningMode`.)
	// User needs to use Patching to keep the new code compatible with prior versions when dealing
	// with Unversioned workflows.
	VERSIONING_BEHAVIOR_UNSPECIFIED VersioningBehavior = 0
	// Workflow will start on the Current Deployment Version of its Task Queue, and then
	// will be pinned to that same Deployment Version until completion (the Version that
	// this Workflow is pinned to is specified in `versioning_info.version`).
	// This behavior eliminates most of compatibility concerns users face when changing their code.
	// Patching is not needed when pinned workflows code change.
	// Can be overridden explicitly via `UpdateWorkflowExecutionOptions` API to move the
	// execution to another Deployment Version.
	// Activities of `PINNED` workflows are sent to the same Deployment Version. Exception to this
	// would be when the activity Task Queue workers are not present in the workflow's Deployment
	// Version, in which case the activity will be sent to the Current Deployment Version of its own
	// task queue.
	VERSIONING_BEHAVIOR_PINNED VersioningBehavior = 1
	// Workflow will automatically move to the Current Deployment Version of its Task Queue when the
	// next workflow task is dispatched.
	// AutoUpgrade behavior is suitable for long-running workflows as it allows them to move to the
	// latest Deployment Version, but the user still needs to use Patching to keep the new code
	// compatible with prior versions for changed workflow types.
	// Activities of `AUTO_UPGRADE` workflows are sent to the Deployment Version of the workflow
	// execution (as specified in versioning_info.version based on the last completed
	// workflow task). Exception to this would be when the activity Task Queue workers are not
	// present in the workflow's Deployment Version, in which case, the activity will be sent to a
	// different Deployment Version according to the Current Deployment Version of its own task
	// queue.
	// Workflows stuck on a backlogged activity will still auto-upgrade if the Current Deployment
	// Version of their Task Queue changes, without having to wait for the backlogged activity to
	// complete on the old Version.
	VERSIONING_BEHAVIOR_AUTO_UPGRADE VersioningBehavior = 2
)

// Enum value maps for VersioningBehavior.
var (
	VersioningBehavior_name = map[int32]string{
		0: "VERSIONING_BEHAVIOR_UNSPECIFIED",
		1: "VERSIONING_BEHAVIOR_PINNED",
		2: "VERSIONING_BEHAVIOR_AUTO_UPGRADE",
	}
	VersioningBehavior_value = map[string]int32{
		"VERSIONING_BEHAVIOR_UNSPECIFIED":  0,
		"VERSIONING_BEHAVIOR_PINNED":       1,
		"VERSIONING_BEHAVIOR_AUTO_UPGRADE": 2,
	}
)

func (x VersioningBehavior) Enum() *VersioningBehavior {
	p := new(VersioningBehavior)
	*p = x
	return p
}

func (x VersioningBehavior) String() string {
	switch x {
	case VERSIONING_BEHAVIOR_UNSPECIFIED:
		return "Unspecified"
	case VERSIONING_BEHAVIOR_PINNED:
		return "Pinned"
	case VERSIONING_BEHAVIOR_AUTO_UPGRADE:
		return "AutoUpgrade"
	default:
		return strconv.Itoa(int(x))
	}

}

func (VersioningBehavior) Descriptor() protoreflect.EnumDescriptor {
	return file_temporal_api_enums_v1_workflow_proto_enumTypes[10].Descriptor()
}

func (VersioningBehavior) Type() protoreflect.EnumType {
	return &file_temporal_api_enums_v1_workflow_proto_enumTypes[10]
}

func (x VersioningBehavior) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VersioningBehavior.Descriptor instead.
func (VersioningBehavior) EnumDescriptor() ([]byte, []int) {
	return file_temporal_api_enums_v1_workflow_proto_rawDescGZIP(), []int{10}
}

var File_temporal_api_enums_v1_workflow_proto protoreflect.FileDescriptor

const file_temporal_api_enums_v1_workflow_proto_rawDesc = "" +
	"\n" +
	"$temporal/api/enums/v1/workflow.proto\x12\x15temporal.api.enums.v1*\x8b\x02\n" +
	"\x15WorkflowIdReusePolicy\x12(\n" +
	"$WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED\x10\x00\x12,\n" +
	"(WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE\x10\x01\x128\n" +
	"4WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY\x10\x02\x12-\n" +
	")WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE\x10\x03\x121\n" +
	"-WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING\x10\x04*\xcf\x01\n" +
	"\x18WorkflowIdConflictPolicy\x12+\n" +
	"'WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED\x10\x00\x12$\n" +
	" WORKFLOW_ID_CONFLICT_POLICY_FAIL\x10\x01\x12,\n" +
	"(WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING\x10\x02\x122\n" +
	".WORKFLOW_ID_CONFLICT_POLICY_TERMINATE_EXISTING\x10\x03*\xa4\x01\n" +
	"\x11ParentClosePolicy\x12#\n" +
	"\x1fPARENT_CLOSE_POLICY_UNSPECIFIED\x10\x00\x12!\n" +
	"\x1dPARENT_CLOSE_POLICY_TERMINATE\x10\x01\x12\x1f\n" +
	"\x1bPARENT_CLOSE_POLICY_ABANDON\x10\x02\x12&\n" +
	"\"PARENT_CLOSE_POLICY_REQUEST_CANCEL\x10\x03*\xbd\x01\n" +
	"\x16ContinueAsNewInitiator\x12)\n" +
	"%CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED\x10\x00\x12&\n" +
	"\"CONTINUE_AS_NEW_INITIATOR_WORKFLOW\x10\x01\x12#\n" +
	"\x1fCONTINUE_AS_NEW_INITIATOR_RETRY\x10\x02\x12+\n" +
	"'CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE\x10\x03*\xe5\x02\n" +
	"\x17WorkflowExecutionStatus\x12)\n" +
	"%WORKFLOW_EXECUTION_STATUS_UNSPECIFIED\x10\x00\x12%\n" +
	"!WORKFLOW_EXECUTION_STATUS_RUNNING\x10\x01\x12'\n" +
	"#WORKFLOW_EXECUTION_STATUS_COMPLETED\x10\x02\x12$\n" +
	" WORKFLOW_EXECUTION_STATUS_FAILED\x10\x03\x12&\n" +
	"\"WORKFLOW_EXECUTION_STATUS_CANCELED\x10\x04\x12(\n" +
	"$WORKFLOW_EXECUTION_STATUS_TERMINATED\x10\x05\x12.\n" +
	"*WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW\x10\x06\x12'\n" +
	"#WORKFLOW_EXECUTION_STATUS_TIMED_OUT\x10\a*\x84\x02\n" +
	"\x14PendingActivityState\x12&\n" +
	"\"PENDING_ACTIVITY_STATE_UNSPECIFIED\x10\x00\x12$\n" +
	" PENDING_ACTIVITY_STATE_SCHEDULED\x10\x01\x12\"\n" +
	"\x1ePENDING_ACTIVITY_STATE_STARTED\x10\x02\x12+\n" +
	"'PENDING_ACTIVITY_STATE_CANCEL_REQUESTED\x10\x03\x12!\n" +
	"\x1dPENDING_ACTIVITY_STATE_PAUSED\x10\x04\x12*\n" +
	"&PENDING_ACTIVITY_STATE_PAUSE_REQUESTED\x10\x05*\x9b\x01\n" +
	"\x18PendingWorkflowTaskState\x12+\n" +
	"'PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED\x10\x00\x12)\n" +
	"%PENDING_WORKFLOW_TASK_STATE_SCHEDULED\x10\x01\x12'\n" +
	"#PENDING_WORKFLOW_TASK_STATE_STARTED\x10\x02*\x97\x01\n" +
	"\x16HistoryEventFilterType\x12)\n" +
	"%HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED\x10\x00\x12'\n" +
	"#HISTORY_EVENT_FILTER_TYPE_ALL_EVENT\x10\x01\x12)\n" +
	"%HISTORY_EVENT_FILTER_TYPE_CLOSE_EVENT\x10\x02*\x9f\x02\n" +
	"\n" +
	"RetryState\x12\x1b\n" +
	"\x17RETRY_STATE_UNSPECIFIED\x10\x00\x12\x1b\n" +
	"\x17RETRY_STATE_IN_PROGRESS\x10\x01\x12%\n" +
	"!RETRY_STATE_NON_RETRYABLE_FAILURE\x10\x02\x12\x17\n" +
	"\x13RETRY_STATE_TIMEOUT\x10\x03\x12(\n" +
	"$RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED\x10\x04\x12$\n" +
	" RETRY_STATE_RETRY_POLICY_NOT_SET\x10\x05\x12%\n" +
	"!RETRY_STATE_INTERNAL_SERVER_ERROR\x10\x06\x12 \n" +
	"\x1cRETRY_STATE_CANCEL_REQUESTED\x10\a*\xb0\x01\n" +
	"\vTimeoutType\x12\x1c\n" +
	"\x18TIMEOUT_TYPE_UNSPECIFIED\x10\x00\x12\x1f\n" +
	"\x1bTIMEOUT_TYPE_START_TO_CLOSE\x10\x01\x12\"\n" +
	"\x1eTIMEOUT_TYPE_SCHEDULE_TO_START\x10\x02\x12\"\n" +
	"\x1eTIMEOUT_TYPE_SCHEDULE_TO_CLOSE\x10\x03\x12\x1a\n" +
	"\x16TIMEOUT_TYPE_HEARTBEAT\x10\x04*\x7f\n" +
	"\x12VersioningBehavior\x12#\n" +
	"\x1fVERSIONING_BEHAVIOR_UNSPECIFIED\x10\x00\x12\x1e\n" +
	"\x1aVERSIONING_BEHAVIOR_PINNED\x10\x01\x12$\n" +
	" VERSIONING_BEHAVIOR_AUTO_UPGRADE\x10\x02B\x85\x01\n" +
	"\x18io.temporal.api.enums.v1B\rWorkflowProtoP\x01Z!go.temporal.io/api/enums/v1;enums\xaa\x02\x17Temporalio.Api.Enums.V1\xea\x02\x1aTemporalio::Api::Enums::V1b\x06proto3"

var (
	file_temporal_api_enums_v1_workflow_proto_rawDescOnce sync.Once
	file_temporal_api_enums_v1_workflow_proto_rawDescData []byte
)

func file_temporal_api_enums_v1_workflow_proto_rawDescGZIP() []byte {
	file_temporal_api_enums_v1_workflow_proto_rawDescOnce.Do(func() {
		file_temporal_api_enums_v1_workflow_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_api_enums_v1_workflow_proto_rawDesc), len(file_temporal_api_enums_v1_workflow_proto_rawDesc)))
	})
	return file_temporal_api_enums_v1_workflow_proto_rawDescData
}

var file_temporal_api_enums_v1_workflow_proto_enumTypes = make([]protoimpl.EnumInfo, 11)
var file_temporal_api_enums_v1_workflow_proto_goTypes = []any{
	(WorkflowIdReusePolicy)(0),    // 0: temporal.api.enums.v1.WorkflowIdReusePolicy
	(WorkflowIdConflictPolicy)(0), // 1: temporal.api.enums.v1.WorkflowIdConflictPolicy
	(ParentClosePolicy)(0),        // 2: temporal.api.enums.v1.ParentClosePolicy
	(ContinueAsNewInitiator)(0),   // 3: temporal.api.enums.v1.ContinueAsNewInitiator
	(WorkflowExecutionStatus)(0),  // 4: temporal.api.enums.v1.WorkflowExecutionStatus
	(PendingActivityState)(0),     // 5: temporal.api.enums.v1.PendingActivityState
	(PendingWorkflowTaskState)(0), // 6: temporal.api.enums.v1.PendingWorkflowTaskState
	(HistoryEventFilterType)(0),   // 7: temporal.api.enums.v1.HistoryEventFilterType
	(RetryState)(0),               // 8: temporal.api.enums.v1.RetryState
	(TimeoutType)(0),              // 9: temporal.api.enums.v1.TimeoutType
	(VersioningBehavior)(0),       // 10: temporal.api.enums.v1.VersioningBehavior
}
var file_temporal_api_enums_v1_workflow_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_temporal_api_enums_v1_workflow_proto_init() }
func file_temporal_api_enums_v1_workflow_proto_init() {
	if File_temporal_api_enums_v1_workflow_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_api_enums_v1_workflow_proto_rawDesc), len(file_temporal_api_enums_v1_workflow_proto_rawDesc)),
			NumEnums:      11,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_enums_v1_workflow_proto_goTypes,
		DependencyIndexes: file_temporal_api_enums_v1_workflow_proto_depIdxs,
		EnumInfos:         file_temporal_api_enums_v1_workflow_proto_enumTypes,
	}.Build()
	File_temporal_api_enums_v1_workflow_proto = out.File
	file_temporal_api_enums_v1_workflow_proto_goTypes = nil
	file_temporal_api_enums_v1_workflow_proto_depIdxs = nil
}
