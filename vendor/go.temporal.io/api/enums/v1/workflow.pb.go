// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/enums/v1/workflow.proto

package enums

import (
	fmt "fmt"
	math "math"
	strconv "strconv"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Defines how new runs of a workflow with a particular ID may or may not be allowed. Note that
// it is *never* valid to have two actively running instances of the same workflow id.
type WorkflowIdReusePolicy int32

const (
	WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED WorkflowIdReusePolicy = 0
	// Allow starting a workflow execution using the same workflow id.
	WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE WorkflowIdReusePolicy = 1
	// Allow starting a workflow execution using the same workflow id, only when the last
	// execution's final state is one of [terminated, cancelled, timed out, failed].
	WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY WorkflowIdReusePolicy = 2
	// Do not permit re-use of the workflow id for this workflow. Future start workflow requests
	// could potentially change the policy, allowing re-use of the workflow id.
	WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE WorkflowIdReusePolicy = 3
	// If a workflow is running using the same workflow ID, terminate it and start a new one.
	// If no running workflow, then the behavior is the same as ALLOW_DUPLICATE
	WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING WorkflowIdReusePolicy = 4
)

var WorkflowIdReusePolicy_name = map[int32]string{
	0: "Unspecified",
	1: "AllowDuplicate",
	2: "AllowDuplicateFailedOnly",
	3: "RejectDuplicate",
	4: "TerminateIfRunning",
}

var WorkflowIdReusePolicy_value = map[string]int32{
	"Unspecified":              0,
	"AllowDuplicate":           1,
	"AllowDuplicateFailedOnly": 2,
	"RejectDuplicate":          3,
	"TerminateIfRunning":       4,
}

func (WorkflowIdReusePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_939fa9511cc117f0, []int{0}
}

// Defines how child workflows will react to their parent completing
type ParentClosePolicy int32

const (
	PARENT_CLOSE_POLICY_UNSPECIFIED ParentClosePolicy = 0
	// The child workflow will also terminate
	PARENT_CLOSE_POLICY_TERMINATE ParentClosePolicy = 1
	// The child workflow will do nothing
	PARENT_CLOSE_POLICY_ABANDON ParentClosePolicy = 2
	// Cancellation will be requested of the child workflow
	PARENT_CLOSE_POLICY_REQUEST_CANCEL ParentClosePolicy = 3
)

var ParentClosePolicy_name = map[int32]string{
	0: "Unspecified",
	1: "Terminate",
	2: "Abandon",
	3: "RequestCancel",
}

var ParentClosePolicy_value = map[string]int32{
	"Unspecified":   0,
	"Terminate":     1,
	"Abandon":       2,
	"RequestCancel": 3,
}

func (ParentClosePolicy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_939fa9511cc117f0, []int{1}
}

type ContinueAsNewInitiator int32

const (
	CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED ContinueAsNewInitiator = 0
	// The workflow itself requested to continue as new
	CONTINUE_AS_NEW_INITIATOR_WORKFLOW ContinueAsNewInitiator = 1
	// The workflow continued as new because it is retrying
	CONTINUE_AS_NEW_INITIATOR_RETRY ContinueAsNewInitiator = 2
	// The workflow continued as new because cron has triggered a new execution
	CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE ContinueAsNewInitiator = 3
)

var ContinueAsNewInitiator_name = map[int32]string{
	0: "Unspecified",
	1: "Workflow",
	2: "Retry",
	3: "CronSchedule",
}

var ContinueAsNewInitiator_value = map[string]int32{
	"Unspecified":  0,
	"Workflow":     1,
	"Retry":        2,
	"CronSchedule": 3,
}

func (ContinueAsNewInitiator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_939fa9511cc117f0, []int{2}
}

// (-- api-linter: core::0216::synonyms=disabled
//     aip.dev/not-precedent: There is WorkflowExecutionState already in another package. --)
type WorkflowExecutionStatus int32

const (
	WORKFLOW_EXECUTION_STATUS_UNSPECIFIED WorkflowExecutionStatus = 0
	// Value 1 is hardcoded in SQL persistence.
	WORKFLOW_EXECUTION_STATUS_RUNNING          WorkflowExecutionStatus = 1
	WORKFLOW_EXECUTION_STATUS_COMPLETED        WorkflowExecutionStatus = 2
	WORKFLOW_EXECUTION_STATUS_FAILED           WorkflowExecutionStatus = 3
	WORKFLOW_EXECUTION_STATUS_CANCELED         WorkflowExecutionStatus = 4
	WORKFLOW_EXECUTION_STATUS_TERMINATED       WorkflowExecutionStatus = 5
	WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW WorkflowExecutionStatus = 6
	WORKFLOW_EXECUTION_STATUS_TIMED_OUT        WorkflowExecutionStatus = 7
)

var WorkflowExecutionStatus_name = map[int32]string{
	0: "Unspecified",
	1: "Running",
	2: "Completed",
	3: "Failed",
	4: "Canceled",
	5: "Terminated",
	6: "ContinuedAsNew",
	7: "TimedOut",
}

var WorkflowExecutionStatus_value = map[string]int32{
	"Unspecified":    0,
	"Running":        1,
	"Completed":      2,
	"Failed":         3,
	"Canceled":       4,
	"Terminated":     5,
	"ContinuedAsNew": 6,
	"TimedOut":       7,
}

func (WorkflowExecutionStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_939fa9511cc117f0, []int{3}
}

type PendingActivityState int32

const (
	PENDING_ACTIVITY_STATE_UNSPECIFIED      PendingActivityState = 0
	PENDING_ACTIVITY_STATE_SCHEDULED        PendingActivityState = 1
	PENDING_ACTIVITY_STATE_STARTED          PendingActivityState = 2
	PENDING_ACTIVITY_STATE_CANCEL_REQUESTED PendingActivityState = 3
)

var PendingActivityState_name = map[int32]string{
	0: "Unspecified",
	1: "Scheduled",
	2: "Started",
	3: "CancelRequested",
}

var PendingActivityState_value = map[string]int32{
	"Unspecified":     0,
	"Scheduled":       1,
	"Started":         2,
	"CancelRequested": 3,
}

func (PendingActivityState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_939fa9511cc117f0, []int{4}
}

type PendingWorkflowTaskState int32

const (
	PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED PendingWorkflowTaskState = 0
	PENDING_WORKFLOW_TASK_STATE_SCHEDULED   PendingWorkflowTaskState = 1
	PENDING_WORKFLOW_TASK_STATE_STARTED     PendingWorkflowTaskState = 2
)

var PendingWorkflowTaskState_name = map[int32]string{
	0: "Unspecified",
	1: "Scheduled",
	2: "Started",
}

var PendingWorkflowTaskState_value = map[string]int32{
	"Unspecified": 0,
	"Scheduled":   1,
	"Started":     2,
}

func (PendingWorkflowTaskState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_939fa9511cc117f0, []int{5}
}

type HistoryEventFilterType int32

const (
	HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED HistoryEventFilterType = 0
	HISTORY_EVENT_FILTER_TYPE_ALL_EVENT   HistoryEventFilterType = 1
	HISTORY_EVENT_FILTER_TYPE_CLOSE_EVENT HistoryEventFilterType = 2
)

var HistoryEventFilterType_name = map[int32]string{
	0: "Unspecified",
	1: "AllEvent",
	2: "CloseEvent",
}

var HistoryEventFilterType_value = map[string]int32{
	"Unspecified": 0,
	"AllEvent":    1,
	"CloseEvent":  2,
}

func (HistoryEventFilterType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_939fa9511cc117f0, []int{6}
}

type RetryState int32

const (
	RETRY_STATE_UNSPECIFIED              RetryState = 0
	RETRY_STATE_IN_PROGRESS              RetryState = 1
	RETRY_STATE_NON_RETRYABLE_FAILURE    RetryState = 2
	RETRY_STATE_TIMEOUT                  RetryState = 3
	RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED RetryState = 4
	RETRY_STATE_RETRY_POLICY_NOT_SET     RetryState = 5
	RETRY_STATE_INTERNAL_SERVER_ERROR    RetryState = 6
	RETRY_STATE_CANCEL_REQUESTED         RetryState = 7
)

var RetryState_name = map[int32]string{
	0: "Unspecified",
	1: "InProgress",
	2: "NonRetryableFailure",
	3: "Timeout",
	4: "MaximumAttemptsReached",
	5: "RetryPolicyNotSet",
	6: "InternalServerError",
	7: "CancelRequested",
}

var RetryState_value = map[string]int32{
	"Unspecified":            0,
	"InProgress":             1,
	"NonRetryableFailure":    2,
	"Timeout":                3,
	"MaximumAttemptsReached": 4,
	"RetryPolicyNotSet":      5,
	"InternalServerError":    6,
	"CancelRequested":        7,
}

func (RetryState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_939fa9511cc117f0, []int{7}
}

type TimeoutType int32

const (
	TIMEOUT_TYPE_UNSPECIFIED       TimeoutType = 0
	TIMEOUT_TYPE_START_TO_CLOSE    TimeoutType = 1
	TIMEOUT_TYPE_SCHEDULE_TO_START TimeoutType = 2
	TIMEOUT_TYPE_SCHEDULE_TO_CLOSE TimeoutType = 3
	TIMEOUT_TYPE_HEARTBEAT         TimeoutType = 4
)

var TimeoutType_name = map[int32]string{
	0: "Unspecified",
	1: "StartToClose",
	2: "ScheduleToStart",
	3: "ScheduleToClose",
	4: "Heartbeat",
}

var TimeoutType_value = map[string]int32{
	"Unspecified":     0,
	"StartToClose":    1,
	"ScheduleToStart": 2,
	"ScheduleToClose": 3,
	"Heartbeat":       4,
}

func (TimeoutType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_939fa9511cc117f0, []int{8}
}

func init() {
	proto.RegisterEnum("temporal.api.enums.v1.WorkflowIdReusePolicy", WorkflowIdReusePolicy_name, WorkflowIdReusePolicy_value)
	proto.RegisterEnum("temporal.api.enums.v1.ParentClosePolicy", ParentClosePolicy_name, ParentClosePolicy_value)
	proto.RegisterEnum("temporal.api.enums.v1.ContinueAsNewInitiator", ContinueAsNewInitiator_name, ContinueAsNewInitiator_value)
	proto.RegisterEnum("temporal.api.enums.v1.WorkflowExecutionStatus", WorkflowExecutionStatus_name, WorkflowExecutionStatus_value)
	proto.RegisterEnum("temporal.api.enums.v1.PendingActivityState", PendingActivityState_name, PendingActivityState_value)
	proto.RegisterEnum("temporal.api.enums.v1.PendingWorkflowTaskState", PendingWorkflowTaskState_name, PendingWorkflowTaskState_value)
	proto.RegisterEnum("temporal.api.enums.v1.HistoryEventFilterType", HistoryEventFilterType_name, HistoryEventFilterType_value)
	proto.RegisterEnum("temporal.api.enums.v1.RetryState", RetryState_name, RetryState_value)
	proto.RegisterEnum("temporal.api.enums.v1.TimeoutType", TimeoutType_name, TimeoutType_value)
}

func init() {
	proto.RegisterFile("temporal/api/enums/v1/workflow.proto", fileDescriptor_939fa9511cc117f0)
}

var fileDescriptor_939fa9511cc117f0 = []byte{
	// 974 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xbf, 0x6f, 0x23, 0x45,
	0x14, 0xc7, 0x3d, 0xeb, 0x5c, 0x4e, 0x1a, 0x84, 0x34, 0x2c, 0x5c, 0x12, 0x5d, 0x8e, 0xcd, 0xef,
	0xcb, 0xc5, 0xc7, 0x39, 0x8a, 0xa0, 0x40, 0xa6, 0x9a, 0xec, 0x3e, 0x27, 0xc3, 0xad, 0x67, 0x97,
	0xd9, 0xd9, 0xe4, 0x42, 0x33, 0x32, 0xb9, 0xe5, 0xb4, 0xba, 0xc4, 0x6b, 0xd9, 0xeb, 0x84, 0x74,
	0xf4, 0x34, 0x74, 0x14, 0x14, 0x34, 0x14, 0x88, 0x8a, 0x86, 0x82, 0x82, 0x9e, 0x32, 0xe5, 0x95,
	0xc4, 0x11, 0x12, 0xa2, 0xba, 0x3f, 0x01, 0xcd, 0xae, 0x1d, 0x1c, 0x9f, 0xd7, 0xa2, 0xb3, 0xf6,
	0x7d, 0x66, 0xe6, 0xbd, 0xef, 0xfb, 0xbe, 0xf1, 0xe0, 0xf5, 0x34, 0x3a, 0x6d, 0x27, 0x9d, 0xe6,
	0xc9, 0x76, 0xb3, 0x1d, 0x6f, 0x47, 0xad, 0xde, 0x69, 0x77, 0xfb, 0x6c, 0x67, 0xfb, 0x3c, 0xe9,
	0xbc, 0xfc, 0xf2, 0x24, 0x39, 0xaf, 0xb6, 0x3b, 0x49, 0x9a, 0x98, 0xf7, 0x86, 0x54, 0xb5, 0xd9,
	0x8e, 0xab, 0x19, 0x55, 0x3d, 0xdb, 0xa9, 0x7c, 0x63, 0xe0, 0x7b, 0x87, 0x03, 0x92, 0x3d, 0x17,
	0x51, 0xaf, 0x1b, 0xf9, 0xc9, 0x49, 0x7c, 0x7c, 0x61, 0x3e, 0xc2, 0xeb, 0x87, 0x9e, 0x78, 0x5a,
	0x77, 0xbd, 0x43, 0xc5, 0x1c, 0x25, 0x20, 0x0c, 0x40, 0xf9, 0x9e, 0xcb, 0xec, 0x23, 0x15, 0xf2,
	0xc0, 0x07, 0x9b, 0xd5, 0x19, 0x38, 0xa4, 0x64, 0x7e, 0x80, 0x1f, 0x15, 0x92, 0xd4, 0xd5, 0x5f,
	0x9d, 0xd0, 0x77, 0x99, 0x4d, 0x25, 0x10, 0x64, 0x7e, 0x8c, 0x3f, 0xfa, 0xbf, 0xb4, 0xaa, 0x53,
	0xe6, 0x82, 0xa3, 0x3c, 0xee, 0x1e, 0x11, 0xc3, 0x7c, 0x82, 0xb7, 0x0a, 0x57, 0x0a, 0xf8, 0x14,
	0x6c, 0x39, 0x72, 0x50, 0xd9, 0xdc, 0xc1, 0x4f, 0x0a, 0x71, 0x09, 0xa2, 0xc1, 0xb8, 0x3e, 0x82,
	0xd5, 0x95, 0x08, 0x39, 0x67, 0x7c, 0x8f, 0xcc, 0x54, 0x7e, 0x44, 0xf8, 0x1d, 0xbf, 0xd9, 0x89,
	0x5a, 0xa9, 0x7d, 0x92, 0xdc, 0x28, 0xb1, 0x86, 0x97, 0x7c, 0x2a, 0x80, 0x4b, 0x65, 0xbb, 0x5e,
	0x91, 0x08, 0x2b, 0xf8, 0xfd, 0x49, 0xd0, 0xcd, 0x41, 0x04, 0x99, 0x4b, 0x78, 0x71, 0x12, 0x42,
	0x77, 0x29, 0x77, 0x3c, 0x4e, 0x0c, 0xf3, 0x21, 0x5e, 0x9d, 0x04, 0x08, 0xf8, 0x2c, 0x84, 0x40,
	0x2a, 0x9b, 0x72, 0x1b, 0x5c, 0x52, 0xae, 0xfc, 0x8e, 0xf0, 0x9c, 0x9d, 0xb4, 0xd2, 0xb8, 0xd5,
	0x8b, 0x68, 0x97, 0x47, 0xe7, 0xac, 0x15, 0xa7, 0x71, 0x33, 0x4d, 0x3a, 0xe6, 0x16, 0xde, 0xb0,
	0x3d, 0x2e, 0x19, 0x0f, 0x41, 0xd1, 0x40, 0x71, 0x38, 0x54, 0x8c, 0x33, 0xc9, 0xa8, 0xf4, 0xc4,
	0x58, 0xc6, 0x0f, 0xf1, 0x6a, 0x31, 0x3a, 0x54, 0x8e, 0x20, 0x5d, 0x7e, 0x31, 0x27, 0x40, 0x0a,
	0xdd, 0x9b, 0xc7, 0x78, 0xb3, 0x18, 0xb2, 0x85, 0xc7, 0x55, 0x60, 0xef, 0x83, 0x13, 0xba, 0x40,
	0xca, 0x95, 0xbf, 0x0c, 0x3c, 0x3f, 0x34, 0x1d, 0x7c, 0x15, 0x1d, 0xf7, 0xd2, 0x38, 0x69, 0x05,
	0x69, 0x33, 0xed, 0x75, 0x75, 0x01, 0x37, 0x5d, 0x83, 0x67, 0x60, 0x87, 0x92, 0xe9, 0xc5, 0x92,
	0xca, 0x30, 0x18, 0x2b, 0x60, 0x03, 0xaf, 0x14, 0xa3, 0xc3, 0xa6, 0x22, 0x73, 0x13, 0xaf, 0x15,
	0x63, 0xb6, 0xd7, 0xf0, 0x5d, 0x90, 0xe0, 0x10, 0xc3, 0x5c, 0xc7, 0xcb, 0xc5, 0x60, 0x6e, 0x45,
	0x52, 0xd6, 0xb2, 0x4d, 0xd9, 0x2e, 0x6b, 0x11, 0x38, 0x64, 0xe6, 0xd6, 0xfc, 0xbc, 0xc1, 0xdd,
	0xd8, 0xc2, 0x21, 0x77, 0xcc, 0x2a, 0xae, 0x4c, 0x4b, 0x30, 0x57, 0xd5, 0x19, 0xc8, 0x4a, 0x66,
	0xa7, 0x17, 0x24, 0x59, 0x43, 0x4f, 0x4c, 0x28, 0xc9, 0xdd, 0xca, 0xaf, 0x08, 0xbf, 0xe7, 0x47,
	0xad, 0xe7, 0x71, 0xeb, 0x05, 0x3d, 0x4e, 0xe3, 0xb3, 0x38, 0xbd, 0xd0, 0x2a, 0x47, 0x99, 0xd1,
	0x80, 0x3b, 0x8c, 0xef, 0x29, 0x6a, 0x4b, 0x76, 0xc0, 0xe4, 0x51, 0xb6, 0x1e, 0xc6, 0x14, 0x5e,
	0xc7, 0xcb, 0x05, 0xdc, 0xb0, 0x9b, 0x0e, 0x41, 0xe6, 0x2a, 0xb6, 0x8a, 0x28, 0x49, 0x45, 0xae,
	0xed, 0x63, 0xbc, 0x59, 0xc0, 0xe4, 0x92, 0x0d, 0x4d, 0xae, 0x25, 0xae, 0x7c, 0x8f, 0xf0, 0xc2,
	0x20, 0xef, 0xa1, 0x4d, 0x64, 0xb3, 0xfb, 0x32, 0xcf, 0x7d, 0x64, 0xa7, 0x1b, 0x15, 0x24, 0x0d,
	0x9e, 0x4e, 0x2c, 0x60, 0x0b, 0x6f, 0x4c, 0x83, 0x47, 0xab, 0xd8, 0xc4, 0x6b, 0x53, 0xd1, 0x61,
	0x29, 0x95, 0xef, 0x10, 0x9e, 0xdb, 0x8f, 0xbb, 0x69, 0xd2, 0xb9, 0x80, 0xb3, 0xa8, 0x95, 0xd6,
	0xe3, 0x93, 0x34, 0xea, 0xc8, 0x8b, 0x76, 0xa4, 0x8f, 0xdb, 0x67, 0x81, 0xf4, 0xc4, 0x91, 0x82,
	0x03, 0x3d, 0xc7, 0x75, 0xe6, 0x4a, 0x10, 0x4a, 0x1e, 0xf9, 0xe3, 0x99, 0x6d, 0xe2, 0xb5, 0x62,
	0x94, 0xba, 0x6e, 0xfe, 0x95, 0xa0, 0xe9, 0x7b, 0xe6, 0xf7, 0x44, 0x8e, 0x1a, 0x95, 0x1f, 0x0c,
	0x8c, 0x45, 0x94, 0x76, 0x06, 0x5d, 0x5e, 0xc4, 0xf3, 0xd9, 0x78, 0x4e, 0x54, 0x66, 0x2c, 0xc8,
	0xb8, 0xf2, 0x85, 0xb7, 0x27, 0x20, 0x08, 0x08, 0xd2, 0x93, 0x35, 0x1a, 0xe4, 0x1e, 0xcf, 0x07,
	0x9d, 0xee, 0xba, 0xf9, 0xa5, 0x1c, 0x0a, 0x20, 0x86, 0x39, 0x8f, 0xdf, 0x1d, 0xc5, 0xb4, 0xf5,
	0xb4, 0xf1, 0xca, 0xda, 0xfb, 0xa3, 0x81, 0x06, 0x7d, 0xc6, 0x1a, 0x61, 0x43, 0x51, 0x29, 0xa1,
	0xe1, 0xcb, 0x40, 0x09, 0xa0, 0x5a, 0x79, 0x32, 0xa3, 0x1d, 0x36, 0x4a, 0xe6, 0xbf, 0x07, 0xf7,
	0x1e, 0xf7, 0xa4, 0x0a, 0x40, 0x92, 0x3b, 0xe3, 0xf9, 0x30, 0x2e, 0x41, 0x70, 0xea, 0xaa, 0x00,
	0xc4, 0x01, 0x08, 0x05, 0x42, 0x78, 0x82, 0xcc, 0x9a, 0xcb, 0xf8, 0xc1, 0x28, 0xf6, 0x86, 0xb3,
	0xee, 0x56, 0x7e, 0x41, 0xf8, 0x2d, 0x19, 0x9f, 0x46, 0x49, 0x2f, 0xcd, 0x1a, 0xf6, 0x00, 0x2f,
	0x0c, 0xb2, 0x9e, 0xd4, 0xa3, 0x25, 0xbc, 0x78, 0x2b, 0x9a, 0x79, 0x40, 0x49, 0x2f, 0x97, 0x3d,
	0x77, 0xfe, 0x6d, 0x60, 0xe0, 0x27, 0xcd, 0x64, 0x30, 0x31, 0xa6, 0x32, 0xf9, 0x3e, 0x65, 0xf3,
	0x3e, 0x9e, 0xbb, 0xc5, 0xec, 0x03, 0x15, 0x72, 0x17, 0xa8, 0x24, 0x33, 0xbb, 0xbf, 0xa1, 0xcb,
	0x2b, 0xab, 0xf4, 0xea, 0xca, 0x2a, 0xbd, 0xbe, 0xb2, 0xd0, 0xd7, 0x7d, 0x0b, 0xfd, 0xd4, 0xb7,
	0xd0, 0x1f, 0x7d, 0x0b, 0x5d, 0xf6, 0x2d, 0xf4, 0x67, 0xdf, 0x42, 0x7f, 0xf7, 0xad, 0xd2, 0xeb,
	0xbe, 0x85, 0xbe, 0xbd, 0xb6, 0x4a, 0x97, 0xd7, 0x56, 0xe9, 0xd5, 0xb5, 0x55, 0xc2, 0x0b, 0x71,
	0x52, 0x9d, 0xf8, 0x97, 0xbf, 0xfb, 0xf6, 0x70, 0xa6, 0x7c, 0xfd, 0x30, 0xf0, 0xd1, 0xe7, 0x2b,
	0x2f, 0x46, 0xd0, 0x38, 0xb9, 0xf5, 0x8c, 0xf8, 0x24, 0xfb, 0xf1, 0xb3, 0x31, 0x2f, 0x07, 0x40,
	0x9c, 0x54, 0x69, 0x3b, 0xae, 0x42, 0xb6, 0xdb, 0xc1, 0xce, 0x3f, 0xc6, 0xfd, 0xff, 0x22, 0xb5,
	0x1a, 0x6d, 0xc7, 0xb5, 0x5a, 0x16, 0xab, 0xd5, 0x0e, 0x76, 0xbe, 0x98, 0xcd, 0xde, 0x1e, 0x1f,
	0xfe, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x16, 0x2c, 0xb6, 0xa3, 0x08, 0x00, 0x00,
}

func (x WorkflowIdReusePolicy) String() string {
	s, ok := WorkflowIdReusePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ParentClosePolicy) String() string {
	s, ok := ParentClosePolicy_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x ContinueAsNewInitiator) String() string {
	s, ok := ContinueAsNewInitiator_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x WorkflowExecutionStatus) String() string {
	s, ok := WorkflowExecutionStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PendingActivityState) String() string {
	s, ok := PendingActivityState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x PendingWorkflowTaskState) String() string {
	s, ok := PendingWorkflowTaskState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x HistoryEventFilterType) String() string {
	s, ok := HistoryEventFilterType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x RetryState) String() string {
	s, ok := RetryState_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TimeoutType) String() string {
	s, ok := TimeoutType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
