// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package enums

import (
	"fmt"
)

var (
	NamespaceState_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Registered":  1,
		"Deprecated":  2,
		"Deleted":     3,
	}
)

// NamespaceStateFromString parses a NamespaceState value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to NamespaceState
func NamespaceStateFromString(s string) (NamespaceState, error) {
	if v, ok := NamespaceState_value[s]; ok {
		return NamespaceState(v), nil
	} else if v, ok := NamespaceState_shorthandValue[s]; ok {
		return NamespaceState(v), nil
	}
	return NamespaceState(0), fmt.Errorf("%s is not a valid NamespaceState", s)
}

var (
	ArchivalState_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Disabled":    1,
		"Enabled":     2,
	}
)

// ArchivalStateFromString parses a ArchivalState value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to ArchivalState
func ArchivalStateFromString(s string) (ArchivalState, error) {
	if v, ok := ArchivalState_value[s]; ok {
		return ArchivalState(v), nil
	} else if v, ok := ArchivalState_shorthandValue[s]; ok {
		return ArchivalState(v), nil
	}
	return ArchivalState(0), fmt.Errorf("%s is not a valid ArchivalState", s)
}

var (
	ReplicationState_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Normal":      1,
		"Handover":    2,
	}
)

// ReplicationStateFromString parses a ReplicationState value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to ReplicationState
func ReplicationStateFromString(s string) (ReplicationState, error) {
	if v, ok := ReplicationState_value[s]; ok {
		return ReplicationState(v), nil
	} else if v, ok := ReplicationState_shorthandValue[s]; ok {
		return ReplicationState(v), nil
	}
	return ReplicationState(0), fmt.Errorf("%s is not a valid ReplicationState", s)
}
