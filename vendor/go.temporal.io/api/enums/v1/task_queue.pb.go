// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: temporal/api/enums/v1/task_queue.proto

package enums

import (
	fmt "fmt"
	math "math"
	strconv "strconv"

	proto "github.com/gogo/protobuf/proto"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type TaskQueueKind int32

const (
	TASK_QUEUE_KIND_UNSPECIFIED TaskQueueKind = 0
	// Tasks from a normal workflow task queue always include complete workflow history
	//
	// The task queue specified by the user is always a normal task queue. There can be as many
	// workers as desired for a single normal task queue. All those workers may pick up tasks from
	// that queue.
	TASK_QUEUE_KIND_NORMAL TaskQueueKind = 1
	// A sticky queue only includes new history since the last workflow task, and they are
	// per-worker.
	//
	// Sticky queues are created dynamically by each worker during their start up. They only exist
	// for the lifetime of the worker process. Tasks in a sticky task queue are only available to
	// the worker that created the sticky queue.
	//
	// Sticky queues are only for workflow tasks. There are no sticky task queues for activities.
	TASK_QUEUE_KIND_STICKY TaskQueueKind = 2
)

var TaskQueueKind_name = map[int32]string{
	0: "Unspecified",
	1: "Normal",
	2: "Sticky",
}

var TaskQueueKind_value = map[string]int32{
	"Unspecified": 0,
	"Normal":      1,
	"Sticky":      2,
}

func (TaskQueueKind) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf13a6eba37ec772, []int{0}
}

type TaskQueueType int32

const (
	TASK_QUEUE_TYPE_UNSPECIFIED TaskQueueType = 0
	// Workflow type of task queue.
	TASK_QUEUE_TYPE_WORKFLOW TaskQueueType = 1
	// Activity type of task queue.
	TASK_QUEUE_TYPE_ACTIVITY TaskQueueType = 2
)

var TaskQueueType_name = map[int32]string{
	0: "Unspecified",
	1: "Workflow",
	2: "Activity",
}

var TaskQueueType_value = map[string]int32{
	"Unspecified": 0,
	"Workflow":    1,
	"Activity":    2,
}

func (TaskQueueType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf13a6eba37ec772, []int{1}
}

// Specifies which category of tasks may reach a worker on a versioned task queue.
// Used both in a reachability query and its response.
type TaskReachability int32

const (
	TASK_REACHABILITY_UNSPECIFIED TaskReachability = 0
	// There's a possiblity for a worker to receive new workflow tasks. Workers should *not* be retired.
	TASK_REACHABILITY_NEW_WORKFLOWS TaskReachability = 1
	// There's a possiblity for a worker to receive existing workflow and activity tasks from existing workflows. Workers
	// should *not* be retired.
	// This enum value does not distinguish between open and closed workflows.
	TASK_REACHABILITY_EXISTING_WORKFLOWS TaskReachability = 2
	// There's a possiblity for a worker to receive existing workflow and activity tasks from open workflows. Workers
	// should *not* be retired.
	TASK_REACHABILITY_OPEN_WORKFLOWS TaskReachability = 3
	// There's a possiblity for a worker to receive existing workflow tasks from closed workflows. Workers may be
	// retired dependending on application requirements. For example, if there's no need to query closed workflows.
	TASK_REACHABILITY_CLOSED_WORKFLOWS TaskReachability = 4
)

var TaskReachability_name = map[int32]string{
	0: "Unspecified",
	1: "NewWorkflows",
	2: "ExistingWorkflows",
	3: "OpenWorkflows",
	4: "ClosedWorkflows",
}

var TaskReachability_value = map[string]int32{
	"Unspecified":       0,
	"NewWorkflows":      1,
	"ExistingWorkflows": 2,
	"OpenWorkflows":     3,
	"ClosedWorkflows":   4,
}

func (TaskReachability) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_cf13a6eba37ec772, []int{2}
}

func init() {
	proto.RegisterEnum("temporal.api.enums.v1.TaskQueueKind", TaskQueueKind_name, TaskQueueKind_value)
	proto.RegisterEnum("temporal.api.enums.v1.TaskQueueType", TaskQueueType_name, TaskQueueType_value)
	proto.RegisterEnum("temporal.api.enums.v1.TaskReachability", TaskReachability_name, TaskReachability_value)
}

func init() {
	proto.RegisterFile("temporal/api/enums/v1/task_queue.proto", fileDescriptor_cf13a6eba37ec772)
}

var fileDescriptor_cf13a6eba37ec772 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0xd2, 0xcd, 0xae, 0x93, 0x40,
	0x14, 0xc0, 0x71, 0x06, 0x8d, 0x8b, 0x49, 0x34, 0x84, 0x44, 0xbd, 0xb9, 0xea, 0x5c, 0xab, 0x4d,
	0x63, 0xba, 0x80, 0x10, 0x77, 0xb8, 0xa2, 0x74, 0xaa, 0x13, 0x10, 0x28, 0x4c, 0x5b, 0xeb, 0x86,
	0x50, 0x25, 0x76, 0xd2, 0x0f, 0xb0, 0xa5, 0x4d, 0xba, 0xf3, 0x11, 0x7c, 0x0c, 0xe3, 0x23, 0xf8,
	0x04, 0x2e, 0x1b, 0x57, 0x5d, 0x5a, 0xba, 0x31, 0xae, 0xfa, 0x08, 0x06, 0xa2, 0x95, 0x0b, 0xdd,
	0x91, 0x9c, 0x1f, 0xf3, 0x5f, 0x9c, 0x03, 0x1b, 0x49, 0x38, 0x8b, 0xa3, 0x45, 0x30, 0x95, 0x83,
	0x98, 0xc9, 0xe1, 0x7c, 0x35, 0x5b, 0xca, 0x6b, 0x45, 0x4e, 0x82, 0xe5, 0xc4, 0xff, 0xb8, 0x0a,
	0x57, 0xa1, 0x14, 0x2f, 0xa2, 0x24, 0x12, 0xef, 0xfe, 0x73, 0x52, 0x10, 0x33, 0x29, 0x77, 0xd2,
	0x5a, 0x69, 0x8e, 0xe1, 0x6d, 0x1a, 0x2c, 0x27, 0xdd, 0x4c, 0x1a, 0x6c, 0xfe, 0x5e, 0xbc, 0x82,
	0x0f, 0xa8, 0xe6, 0x19, 0x7e, 0xb7, 0x87, 0x7b, 0xd8, 0x37, 0x88, 0xd5, 0xf6, 0x7b, 0x96, 0xe7,
	0x60, 0x9d, 0x74, 0x08, 0x6e, 0x0b, 0x9c, 0x78, 0x09, 0xef, 0x95, 0x81, 0x65, 0xbb, 0xaf, 0x35,
	0x53, 0x00, 0xe7, 0x66, 0x1e, 0x25, 0xba, 0x31, 0x14, 0xf8, 0xe6, 0xb4, 0x50, 0xa2, 0x9b, 0x38,
	0x2c, 0x95, 0xe8, 0xd0, 0xc1, 0xa5, 0xd2, 0x43, 0x78, 0x51, 0x06, 0x03, 0xdb, 0x35, 0x3a, 0xa6,
	0x3d, 0x10, 0xc0, 0xb9, 0xa9, 0xa6, 0x53, 0xd2, 0x27, 0x34, 0xab, 0xfd, 0x00, 0x50, 0xc8, 0x72,
	0x6e, 0x18, 0xbc, 0x1b, 0x07, 0x23, 0x36, 0x65, 0xc9, 0x46, 0xac, 0xc1, 0x47, 0xf9, 0x2f, 0x2e,
	0xd6, 0xf4, 0x57, 0x5a, 0x8b, 0x98, 0x84, 0x0e, 0x4b, 0xcd, 0xa7, 0xf0, 0xaa, 0x4a, 0x2c, 0x3c,
	0x38, 0x95, 0x3d, 0x01, 0x88, 0xcf, 0x60, 0xbd, 0x8a, 0xf0, 0x1b, 0xe2, 0x51, 0x62, 0xbd, 0x2c,
	0x48, 0x5e, 0xac, 0xc3, 0xc7, 0x55, 0x69, 0x3b, 0xd8, 0x2a, 0xa8, 0x1b, 0x62, 0x03, 0x3e, 0xa9,
	0x2a, 0xdd, 0xb4, 0x3d, 0xdc, 0x2e, 0xb8, 0x9b, 0xad, 0x6f, 0x60, 0xbb, 0x47, 0xdc, 0x6e, 0x8f,
	0xb8, 0xe3, 0x1e, 0x81, 0x4f, 0x29, 0x02, 0x5f, 0x52, 0x04, 0xbe, 0xa7, 0x08, 0x6c, 0x53, 0x04,
	0x7e, 0xa6, 0x08, 0xfc, 0x4a, 0x11, 0x77, 0x4c, 0x11, 0xf8, 0x7c, 0x40, 0xdc, 0xf6, 0x80, 0xb8,
	0xdd, 0x01, 0x71, 0xf0, 0x82, 0x45, 0xd2, 0xd9, 0xed, 0xb7, 0xee, 0x9c, 0x36, 0xe2, 0x64, 0x47,
	0xe2, 0x80, 0xb7, 0xb5, 0x0f, 0x05, 0xcb, 0xa2, 0x6b, 0x47, 0xf5, 0x22, 0xff, 0xf8, 0xca, 0xdf,
	0xa7, 0x7f, 0x01, 0x8b, 0x24, 0x2d, 0x66, 0x12, 0xce, 0x9f, 0xeb, 0x2b, 0xbf, 0xf9, 0xcb, 0xff,
	0x13, 0x55, 0xd5, 0x62, 0xa6, 0xaa, 0xf9, 0x4c, 0x55, 0xfb, 0xca, 0xe8, 0x56, 0x7e, 0x87, 0xcf,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x97, 0x99, 0xc6, 0x6b, 0xb1, 0x02, 0x00, 0x00,
}

func (x TaskQueueKind) String() string {
	s, ok := TaskQueueKind_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TaskQueueType) String() string {
	s, ok := TaskQueueType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x TaskReachability) String() string {
	s, ok := TaskReachability_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
