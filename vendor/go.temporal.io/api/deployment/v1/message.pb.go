// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/deployment/v1/message.proto

package deployment

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	v11 "go.temporal.io/api/common/v1"
	v1 "go.temporal.io/api/enums/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Worker Deployment options set in SDK that need to be sent to server in every poll.
// Experimental. Worker Deployments are experimental and might significantly change in the future.
type WorkerDeploymentOptions struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Required. Worker Deployment name.
	DeploymentName string `protobuf:"bytes,1,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	// The Build ID of the worker. Required when `worker_versioning_mode==VERSIONED`, in which case,
	// the worker will be part of a Deployment Version.
	BuildId string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// Required. Versioning Mode for this worker. Must be the same for all workers with the
	// same `deployment_name` and `build_id` combination, across all Task Queues.
	// When `worker_versioning_mode==VERSIONED`, the worker will be part of a Deployment Version.
	WorkerVersioningMode v1.WorkerVersioningMode `protobuf:"varint,3,opt,name=worker_versioning_mode,json=workerVersioningMode,proto3,enum=temporal.api.enums.v1.WorkerVersioningMode" json:"worker_versioning_mode,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *WorkerDeploymentOptions) Reset() {
	*x = WorkerDeploymentOptions{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerDeploymentOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDeploymentOptions) ProtoMessage() {}

func (x *WorkerDeploymentOptions) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDeploymentOptions.ProtoReflect.Descriptor instead.
func (*WorkerDeploymentOptions) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *WorkerDeploymentOptions) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *WorkerDeploymentOptions) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *WorkerDeploymentOptions) GetWorkerVersioningMode() v1.WorkerVersioningMode {
	if x != nil {
		return x.WorkerVersioningMode
	}
	return v1.WorkerVersioningMode(0)
}

// `Deployment` identifies a deployment of Temporal workers. The combination of deployment series
// name + build ID serves as the identifier. User can use `WorkerDeploymentOptions` in their worker
// programs to specify these values.
// Deprecated.
type Deployment struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Different versions of the same worker service/application are related together by having a
	// shared series name.
	// Out of all deployments of a series, one can be designated as the current deployment, which
	// receives new workflow executions and new tasks of workflows with
	// `VERSIONING_BEHAVIOR_AUTO_UPGRADE` versioning behavior.
	SeriesName string `protobuf:"bytes,1,opt,name=series_name,json=seriesName,proto3" json:"series_name,omitempty"`
	// Build ID changes with each version of the worker when the worker program code and/or config
	// changes.
	BuildId       string `protobuf:"bytes,2,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Deployment) Reset() {
	*x = Deployment{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Deployment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deployment) ProtoMessage() {}

func (x *Deployment) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deployment.ProtoReflect.Descriptor instead.
func (*Deployment) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *Deployment) GetSeriesName() string {
	if x != nil {
		return x.SeriesName
	}
	return ""
}

func (x *Deployment) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

// `DeploymentInfo` holds information about a deployment. Deployment information is tracked
// automatically by server as soon as the first poll from that deployment reaches the server. There
// can be multiple task queue workers in a single deployment which are listed in this message.
// Deprecated.
type DeploymentInfo struct {
	state          protoimpl.MessageState          `protogen:"open.v1"`
	Deployment     *Deployment                     `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	CreateTime     *timestamppb.Timestamp          `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	TaskQueueInfos []*DeploymentInfo_TaskQueueInfo `protobuf:"bytes,3,rep,name=task_queue_infos,json=taskQueueInfos,proto3" json:"task_queue_infos,omitempty"`
	// A user-defined set of key-values. Can be updated as part of write operations to the
	// deployment, such as `SetCurrentDeployment`.
	Metadata map[string]*v11.Payload `protobuf:"bytes,4,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// If this deployment is the current deployment of its deployment series.
	IsCurrent     bool `protobuf:"varint,5,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeploymentInfo) Reset() {
	*x = DeploymentInfo{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentInfo) ProtoMessage() {}

func (x *DeploymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentInfo.ProtoReflect.Descriptor instead.
func (*DeploymentInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{2}
}

func (x *DeploymentInfo) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *DeploymentInfo) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeploymentInfo) GetTaskQueueInfos() []*DeploymentInfo_TaskQueueInfo {
	if x != nil {
		return x.TaskQueueInfos
	}
	return nil
}

func (x *DeploymentInfo) GetMetadata() map[string]*v11.Payload {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DeploymentInfo) GetIsCurrent() bool {
	if x != nil {
		return x.IsCurrent
	}
	return false
}

// Used as part of Deployment write APIs to update metadata attached to a deployment.
// Deprecated.
type UpdateDeploymentMetadata struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	UpsertEntries map[string]*v11.Payload `protobuf:"bytes,1,rep,name=upsert_entries,json=upsertEntries,proto3" json:"upsert_entries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// List of keys to remove from the metadata.
	RemoveEntries []string `protobuf:"bytes,2,rep,name=remove_entries,json=removeEntries,proto3" json:"remove_entries,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UpdateDeploymentMetadata) Reset() {
	*x = UpdateDeploymentMetadata{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateDeploymentMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateDeploymentMetadata) ProtoMessage() {}

func (x *UpdateDeploymentMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateDeploymentMetadata.ProtoReflect.Descriptor instead.
func (*UpdateDeploymentMetadata) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{3}
}

func (x *UpdateDeploymentMetadata) GetUpsertEntries() map[string]*v11.Payload {
	if x != nil {
		return x.UpsertEntries
	}
	return nil
}

func (x *UpdateDeploymentMetadata) GetRemoveEntries() []string {
	if x != nil {
		return x.RemoveEntries
	}
	return nil
}

// DeploymentListInfo is an abbreviated set of fields from DeploymentInfo that's returned in
// ListDeployments.
// Deprecated.
type DeploymentListInfo struct {
	state      protoimpl.MessageState `protogen:"open.v1"`
	Deployment *Deployment            `protobuf:"bytes,1,opt,name=deployment,proto3" json:"deployment,omitempty"`
	CreateTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// If this deployment is the current deployment of its deployment series.
	IsCurrent     bool `protobuf:"varint,3,opt,name=is_current,json=isCurrent,proto3" json:"is_current,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeploymentListInfo) Reset() {
	*x = DeploymentListInfo{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentListInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentListInfo) ProtoMessage() {}

func (x *DeploymentListInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentListInfo.ProtoReflect.Descriptor instead.
func (*DeploymentListInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{4}
}

func (x *DeploymentListInfo) GetDeployment() *Deployment {
	if x != nil {
		return x.Deployment
	}
	return nil
}

func (x *DeploymentListInfo) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *DeploymentListInfo) GetIsCurrent() bool {
	if x != nil {
		return x.IsCurrent
	}
	return false
}

// A Worker Deployment Version (Version, for short) represents all workers of the same
// code and config within a Deployment. Workers of the same Version are expected to
// behave exactly the same so when executions move between them there are no
// non-determinism issues.
// Worker Deployment Versions are created in Temporal server automatically when
// their first poller arrives to the server.
// Experimental. Worker Deployments are experimental and might significantly change in the future.
type WorkerDeploymentVersionInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated. Use `deployment_version`.
	//
	// Deprecated: Marked as deprecated in temporal/api/deployment/v1/message.proto.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Required.
	DeploymentVersion *WorkerDeploymentVersion `protobuf:"bytes,11,opt,name=deployment_version,json=deploymentVersion,proto3" json:"deployment_version,omitempty"`
	DeploymentName    string                   `protobuf:"bytes,2,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	CreateTime        *timestamppb.Timestamp   `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	// Last time `current_since_time`, `ramping_since_time, or `ramp_percentage` of this version changed.
	RoutingChangedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=routing_changed_time,json=routingChangedTime,proto3" json:"routing_changed_time,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
	//
	// Nil if not current.
	CurrentSinceTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=current_since_time,json=currentSinceTime,proto3" json:"current_since_time,omitempty"`
	// (-- api-linter: core::0140::prepositions=disabled
	//
	//	aip.dev/not-precedent: 'Since' captures the field semantics despite being a preposition. --)
	//
	// Nil if not ramping. Updated when the version first starts ramping, not on each ramp change.
	RampingSinceTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ramping_since_time,json=rampingSinceTime,proto3" json:"ramping_since_time,omitempty"`
	// Range: [0, 100]. Must be zero if the version is not ramping (i.e. `ramping_since_time` is nil).
	// Can be in the range [0, 100] if the version is ramping.
	RampPercentage float32 `protobuf:"fixed32,7,opt,name=ramp_percentage,json=rampPercentage,proto3" json:"ramp_percentage,omitempty"`
	// All the Task Queues that have ever polled from this Deployment version.
	TaskQueueInfos []*WorkerDeploymentVersionInfo_VersionTaskQueueInfo `protobuf:"bytes,8,rep,name=task_queue_infos,json=taskQueueInfos,proto3" json:"task_queue_infos,omitempty"`
	// Helps user determine when it is safe to decommission the workers of this
	// Version. Not present when version is current or ramping.
	// Current limitations:
	//   - Not supported for Unversioned mode.
	//   - Periodically refreshed, may have delays up to few minutes (consult the
	//     last_checked_time value).
	//   - Refreshed only when version is not current or ramping AND the status is not
	//     "drained" yet.
	//   - Once the status is changed to "drained", it is not changed until the Version
	//     becomes Current or Ramping again, at which time the drainage info is cleared.
	//     This means if the Version is "drained" but new workflows are sent to it via
	//     Pinned Versioning Override, the status does not account for those Pinned-override
	//     executions and remains "drained".
	DrainageInfo *VersionDrainageInfo `protobuf:"bytes,9,opt,name=drainage_info,json=drainageInfo,proto3" json:"drainage_info,omitempty"`
	// Arbitrary user-provided metadata attached to this version.
	Metadata      *VersionMetadata `protobuf:"bytes,10,opt,name=metadata,proto3" json:"metadata,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerDeploymentVersionInfo) Reset() {
	*x = WorkerDeploymentVersionInfo{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerDeploymentVersionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDeploymentVersionInfo) ProtoMessage() {}

func (x *WorkerDeploymentVersionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDeploymentVersionInfo.ProtoReflect.Descriptor instead.
func (*WorkerDeploymentVersionInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{5}
}

// Deprecated: Marked as deprecated in temporal/api/deployment/v1/message.proto.
func (x *WorkerDeploymentVersionInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkerDeploymentVersionInfo) GetDeploymentVersion() *WorkerDeploymentVersion {
	if x != nil {
		return x.DeploymentVersion
	}
	return nil
}

func (x *WorkerDeploymentVersionInfo) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

func (x *WorkerDeploymentVersionInfo) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WorkerDeploymentVersionInfo) GetRoutingChangedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RoutingChangedTime
	}
	return nil
}

func (x *WorkerDeploymentVersionInfo) GetCurrentSinceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentSinceTime
	}
	return nil
}

func (x *WorkerDeploymentVersionInfo) GetRampingSinceTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RampingSinceTime
	}
	return nil
}

func (x *WorkerDeploymentVersionInfo) GetRampPercentage() float32 {
	if x != nil {
		return x.RampPercentage
	}
	return 0
}

func (x *WorkerDeploymentVersionInfo) GetTaskQueueInfos() []*WorkerDeploymentVersionInfo_VersionTaskQueueInfo {
	if x != nil {
		return x.TaskQueueInfos
	}
	return nil
}

func (x *WorkerDeploymentVersionInfo) GetDrainageInfo() *VersionDrainageInfo {
	if x != nil {
		return x.DrainageInfo
	}
	return nil
}

func (x *WorkerDeploymentVersionInfo) GetMetadata() *VersionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Information about workflow drainage to help the user determine when it is safe
// to decommission a Version. Not present while version is current or ramping.
// Experimental. Worker Deployments are experimental and might significantly change in the future.
type VersionDrainageInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Set to DRAINING when the version first stops accepting new executions (is no longer current or ramping).
	// Set to DRAINED when no more open pinned workflows exist on this version.
	Status v1.VersionDrainageStatus `protobuf:"varint,1,opt,name=status,proto3,enum=temporal.api.enums.v1.VersionDrainageStatus" json:"status,omitempty"`
	// Last time the drainage status changed.
	LastChangedTime *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=last_changed_time,json=lastChangedTime,proto3" json:"last_changed_time,omitempty"`
	// Last time the system checked for drainage of this version.
	LastCheckedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=last_checked_time,json=lastCheckedTime,proto3" json:"last_checked_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *VersionDrainageInfo) Reset() {
	*x = VersionDrainageInfo{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionDrainageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionDrainageInfo) ProtoMessage() {}

func (x *VersionDrainageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionDrainageInfo.ProtoReflect.Descriptor instead.
func (*VersionDrainageInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{6}
}

func (x *VersionDrainageInfo) GetStatus() v1.VersionDrainageStatus {
	if x != nil {
		return x.Status
	}
	return v1.VersionDrainageStatus(0)
}

func (x *VersionDrainageInfo) GetLastChangedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastChangedTime
	}
	return nil
}

func (x *VersionDrainageInfo) GetLastCheckedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastCheckedTime
	}
	return nil
}

// A Worker Deployment (Deployment, for short) represents all workers serving
// a shared set of Task Queues. Typically, a Deployment represents one service or
// application.
// A Deployment contains multiple Deployment Versions, each representing a different
// version of workers. (see documentation of WorkerDeploymentVersionInfo)
// Deployment records are created in Temporal server automatically when their
// first poller arrives to the server.
// Experimental. Worker Deployments are experimental and might significantly change in the future.
type WorkerDeploymentInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Identifies a Worker Deployment. Must be unique within the namespace.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Deployment Versions that are currently tracked in this Deployment. A DeploymentVersion will be
	// cleaned up automatically if all the following conditions meet:
	// - It does not receive new executions (is not current or ramping)
	// - It has no active pollers (see WorkerDeploymentVersionInfo.pollers_status)
	// - It is drained (see WorkerDeploymentVersionInfo.drainage_status)
	VersionSummaries []*WorkerDeploymentInfo_WorkerDeploymentVersionSummary `protobuf:"bytes,2,rep,name=version_summaries,json=versionSummaries,proto3" json:"version_summaries,omitempty"`
	CreateTime       *timestamppb.Timestamp                                 `protobuf:"bytes,3,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	RoutingConfig    *RoutingConfig                                         `protobuf:"bytes,4,opt,name=routing_config,json=routingConfig,proto3" json:"routing_config,omitempty"`
	// Identity of the last client who modified the configuration of this Deployment. Set to the
	// `identity` value sent by APIs such as `SetWorkerDeploymentCurrentVersion` and
	// `SetWorkerDeploymentRampingVersion`.
	LastModifierIdentity string `protobuf:"bytes,5,opt,name=last_modifier_identity,json=lastModifierIdentity,proto3" json:"last_modifier_identity,omitempty"`
	unknownFields        protoimpl.UnknownFields
	sizeCache            protoimpl.SizeCache
}

func (x *WorkerDeploymentInfo) Reset() {
	*x = WorkerDeploymentInfo{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerDeploymentInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDeploymentInfo) ProtoMessage() {}

func (x *WorkerDeploymentInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDeploymentInfo.ProtoReflect.Descriptor instead.
func (*WorkerDeploymentInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{7}
}

func (x *WorkerDeploymentInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerDeploymentInfo) GetVersionSummaries() []*WorkerDeploymentInfo_WorkerDeploymentVersionSummary {
	if x != nil {
		return x.VersionSummaries
	}
	return nil
}

func (x *WorkerDeploymentInfo) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WorkerDeploymentInfo) GetRoutingConfig() *RoutingConfig {
	if x != nil {
		return x.RoutingConfig
	}
	return nil
}

func (x *WorkerDeploymentInfo) GetLastModifierIdentity() string {
	if x != nil {
		return x.LastModifierIdentity
	}
	return ""
}

// A Worker Deployment Version (Version, for short) represents a
// version of workers within a Worker Deployment. (see documentation of WorkerDeploymentVersionInfo)
// Version records are created in Temporal server automatically when their
// first poller arrives to the server.
// Experimental. Worker Deployment Versions are experimental and might significantly change in the future.
type WorkerDeploymentVersion struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// A unique identifier for this Version within the Deployment it is a part of.
	// Not necessarily unique within the namespace.
	// The combination of `deployment_name` and `build_id` uniquely identifies this
	// Version within the namespace, because Deployment names are unique within a namespace.
	BuildId string `protobuf:"bytes,1,opt,name=build_id,json=buildId,proto3" json:"build_id,omitempty"`
	// Identifies the Worker Deployment this Version is part of.
	DeploymentName string `protobuf:"bytes,2,opt,name=deployment_name,json=deploymentName,proto3" json:"deployment_name,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *WorkerDeploymentVersion) Reset() {
	*x = WorkerDeploymentVersion{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerDeploymentVersion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDeploymentVersion) ProtoMessage() {}

func (x *WorkerDeploymentVersion) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDeploymentVersion.ProtoReflect.Descriptor instead.
func (*WorkerDeploymentVersion) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{8}
}

func (x *WorkerDeploymentVersion) GetBuildId() string {
	if x != nil {
		return x.BuildId
	}
	return ""
}

func (x *WorkerDeploymentVersion) GetDeploymentName() string {
	if x != nil {
		return x.DeploymentName
	}
	return ""
}

type VersionMetadata struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Arbitrary key-values.
	Entries       map[string]*v11.Payload `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *VersionMetadata) Reset() {
	*x = VersionMetadata{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *VersionMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionMetadata) ProtoMessage() {}

func (x *VersionMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionMetadata.ProtoReflect.Descriptor instead.
func (*VersionMetadata) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{9}
}

func (x *VersionMetadata) GetEntries() map[string]*v11.Payload {
	if x != nil {
		return x.Entries
	}
	return nil
}

type RoutingConfig struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Specifies which Deployment Version should receive new workflow executions and tasks of
	// existing unversioned or AutoUpgrade workflows.
	// Nil value means no Version in this Deployment (except Ramping Version, if present) receives traffic other than tasks of previously Pinned workflows. In absence of a Current Version, remaining traffic after any ramp (if set)  goes to unversioned workers (those with `UNVERSIONED` (or unspecified) `WorkerVersioningMode`.).
	// Note: Current Version is overridden by the Ramping Version for a portion of traffic when ramp percentage
	// is non-zero (see `ramping_deployment_version` and `ramping_version_percentage`).
	CurrentDeploymentVersion *WorkerDeploymentVersion `protobuf:"bytes,7,opt,name=current_deployment_version,json=currentDeploymentVersion,proto3" json:"current_deployment_version,omitempty"`
	// Deprecated. Use `current_deployment_version`.
	//
	// Deprecated: Marked as deprecated in temporal/api/deployment/v1/message.proto.
	CurrentVersion string `protobuf:"bytes,1,opt,name=current_version,json=currentVersion,proto3" json:"current_version,omitempty"`
	// When ramp percentage is non-zero, that portion of traffic is shifted from the Current Version to the Ramping Version.
	// Must always be different from `current_deployment_version` unless both are nil.
	// Nil value represents all the unversioned workers (those with `UNVERSIONED` (or unspecified) `WorkerVersioningMode`.)
	// Note that it is possible to ramp from one Version to another Version, or from unversioned
	// workers to a particular Version, or from a particular Version to unversioned workers.
	RampingDeploymentVersion *WorkerDeploymentVersion `protobuf:"bytes,9,opt,name=ramping_deployment_version,json=rampingDeploymentVersion,proto3" json:"ramping_deployment_version,omitempty"`
	// Deprecated. Use `ramping_deployment_version`.
	//
	// Deprecated: Marked as deprecated in temporal/api/deployment/v1/message.proto.
	RampingVersion string `protobuf:"bytes,2,opt,name=ramping_version,json=rampingVersion,proto3" json:"ramping_version,omitempty"`
	// Percentage of tasks that are routed to the Ramping Version instead of the Current Version.
	// Valid range: [0, 100]. A 100% value means the Ramping Version is receiving full traffic but
	// not yet "promoted" to be the Current Version, likely due to pending validations.
	// A 0% value means the Ramping Version is receiving no traffic.
	RampingVersionPercentage float32 `protobuf:"fixed32,3,opt,name=ramping_version_percentage,json=rampingVersionPercentage,proto3" json:"ramping_version_percentage,omitempty"`
	// Last time current version was changed.
	CurrentVersionChangedTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=current_version_changed_time,json=currentVersionChangedTime,proto3" json:"current_version_changed_time,omitempty"`
	// Last time ramping version was changed. Not updated if only the ramp percentage changes.
	RampingVersionChangedTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=ramping_version_changed_time,json=rampingVersionChangedTime,proto3" json:"ramping_version_changed_time,omitempty"`
	// Last time ramping version percentage was changed.
	// If ramping version is changed, this is also updated, even if the percentage stays the same.
	RampingVersionPercentageChangedTime *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=ramping_version_percentage_changed_time,json=rampingVersionPercentageChangedTime,proto3" json:"ramping_version_percentage_changed_time,omitempty"`
	unknownFields                       protoimpl.UnknownFields
	sizeCache                           protoimpl.SizeCache
}

func (x *RoutingConfig) Reset() {
	*x = RoutingConfig{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RoutingConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoutingConfig) ProtoMessage() {}

func (x *RoutingConfig) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoutingConfig.ProtoReflect.Descriptor instead.
func (*RoutingConfig) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{10}
}

func (x *RoutingConfig) GetCurrentDeploymentVersion() *WorkerDeploymentVersion {
	if x != nil {
		return x.CurrentDeploymentVersion
	}
	return nil
}

// Deprecated: Marked as deprecated in temporal/api/deployment/v1/message.proto.
func (x *RoutingConfig) GetCurrentVersion() string {
	if x != nil {
		return x.CurrentVersion
	}
	return ""
}

func (x *RoutingConfig) GetRampingDeploymentVersion() *WorkerDeploymentVersion {
	if x != nil {
		return x.RampingDeploymentVersion
	}
	return nil
}

// Deprecated: Marked as deprecated in temporal/api/deployment/v1/message.proto.
func (x *RoutingConfig) GetRampingVersion() string {
	if x != nil {
		return x.RampingVersion
	}
	return ""
}

func (x *RoutingConfig) GetRampingVersionPercentage() float32 {
	if x != nil {
		return x.RampingVersionPercentage
	}
	return 0
}

func (x *RoutingConfig) GetCurrentVersionChangedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CurrentVersionChangedTime
	}
	return nil
}

func (x *RoutingConfig) GetRampingVersionChangedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RampingVersionChangedTime
	}
	return nil
}

func (x *RoutingConfig) GetRampingVersionPercentageChangedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.RampingVersionPercentageChangedTime
	}
	return nil
}

type DeploymentInfo_TaskQueueInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type  v1.TaskQueueType       `protobuf:"varint,2,opt,name=type,proto3,enum=temporal.api.enums.v1.TaskQueueType" json:"type,omitempty"`
	// When server saw the first poller for this task queue in this deployment.
	FirstPollerTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=first_poller_time,json=firstPollerTime,proto3" json:"first_poller_time,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DeploymentInfo_TaskQueueInfo) Reset() {
	*x = DeploymentInfo_TaskQueueInfo{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeploymentInfo_TaskQueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeploymentInfo_TaskQueueInfo) ProtoMessage() {}

func (x *DeploymentInfo_TaskQueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeploymentInfo_TaskQueueInfo.ProtoReflect.Descriptor instead.
func (*DeploymentInfo_TaskQueueInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{2, 1}
}

func (x *DeploymentInfo_TaskQueueInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeploymentInfo_TaskQueueInfo) GetType() v1.TaskQueueType {
	if x != nil {
		return x.Type
	}
	return v1.TaskQueueType(0)
}

func (x *DeploymentInfo_TaskQueueInfo) GetFirstPollerTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstPollerTime
	}
	return nil
}

type WorkerDeploymentVersionInfo_VersionTaskQueueInfo struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type          v1.TaskQueueType       `protobuf:"varint,2,opt,name=type,proto3,enum=temporal.api.enums.v1.TaskQueueType" json:"type,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *WorkerDeploymentVersionInfo_VersionTaskQueueInfo) Reset() {
	*x = WorkerDeploymentVersionInfo_VersionTaskQueueInfo{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerDeploymentVersionInfo_VersionTaskQueueInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDeploymentVersionInfo_VersionTaskQueueInfo) ProtoMessage() {}

func (x *WorkerDeploymentVersionInfo_VersionTaskQueueInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDeploymentVersionInfo_VersionTaskQueueInfo.ProtoReflect.Descriptor instead.
func (*WorkerDeploymentVersionInfo_VersionTaskQueueInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{5, 0}
}

func (x *WorkerDeploymentVersionInfo_VersionTaskQueueInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *WorkerDeploymentVersionInfo_VersionTaskQueueInfo) GetType() v1.TaskQueueType {
	if x != nil {
		return x.Type
	}
	return v1.TaskQueueType(0)
}

type WorkerDeploymentInfo_WorkerDeploymentVersionSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Deprecated. Use `deployment_version`.
	//
	// Deprecated: Marked as deprecated in temporal/api/deployment/v1/message.proto.
	Version string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	// Required.
	DeploymentVersion *WorkerDeploymentVersion `protobuf:"bytes,4,opt,name=deployment_version,json=deploymentVersion,proto3" json:"deployment_version,omitempty"`
	CreateTime        *timestamppb.Timestamp   `protobuf:"bytes,2,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	DrainageStatus    v1.VersionDrainageStatus `protobuf:"varint,3,opt,name=drainage_status,json=drainageStatus,proto3,enum=temporal.api.enums.v1.VersionDrainageStatus" json:"drainage_status,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *WorkerDeploymentInfo_WorkerDeploymentVersionSummary) Reset() {
	*x = WorkerDeploymentInfo_WorkerDeploymentVersionSummary{}
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *WorkerDeploymentInfo_WorkerDeploymentVersionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkerDeploymentInfo_WorkerDeploymentVersionSummary) ProtoMessage() {}

func (x *WorkerDeploymentInfo_WorkerDeploymentVersionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_deployment_v1_message_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkerDeploymentInfo_WorkerDeploymentVersionSummary.ProtoReflect.Descriptor instead.
func (*WorkerDeploymentInfo_WorkerDeploymentVersionSummary) Descriptor() ([]byte, []int) {
	return file_temporal_api_deployment_v1_message_proto_rawDescGZIP(), []int{7, 0}
}

// Deprecated: Marked as deprecated in temporal/api/deployment/v1/message.proto.
func (x *WorkerDeploymentInfo_WorkerDeploymentVersionSummary) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WorkerDeploymentInfo_WorkerDeploymentVersionSummary) GetDeploymentVersion() *WorkerDeploymentVersion {
	if x != nil {
		return x.DeploymentVersion
	}
	return nil
}

func (x *WorkerDeploymentInfo_WorkerDeploymentVersionSummary) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *WorkerDeploymentInfo_WorkerDeploymentVersionSummary) GetDrainageStatus() v1.VersionDrainageStatus {
	if x != nil {
		return x.DrainageStatus
	}
	return v1.VersionDrainageStatus(0)
}

var File_temporal_api_deployment_v1_message_proto protoreflect.FileDescriptor

const file_temporal_api_deployment_v1_message_proto_rawDesc = "" +
	"\n" +
	"(temporal/api/deployment/v1/message.proto\x12\x1atemporal.api.deployment.v1\x1a\x1fgoogle/protobuf/timestamp.proto\x1a&temporal/api/enums/v1/deployment.proto\x1a&temporal/api/enums/v1/task_queue.proto\x1a$temporal/api/common/v1/message.proto\"\xc0\x01\n" +
	"\x17WorkerDeploymentOptions\x12'\n" +
	"\x0fdeployment_name\x18\x01 \x01(\tR\x0edeploymentName\x12\x19\n" +
	"\bbuild_id\x18\x02 \x01(\tR\abuildId\x12a\n" +
	"\x16worker_versioning_mode\x18\x03 \x01(\x0e2+.temporal.api.enums.v1.WorkerVersioningModeR\x14workerVersioningMode\"H\n" +
	"\n" +
	"Deployment\x12\x1f\n" +
	"\vseries_name\x18\x01 \x01(\tR\n" +
	"seriesName\x12\x19\n" +
	"\bbuild_id\x18\x02 \x01(\tR\abuildId\"\xf4\x04\n" +
	"\x0eDeploymentInfo\x12F\n" +
	"\n" +
	"deployment\x18\x01 \x01(\v2&.temporal.api.deployment.v1.DeploymentR\n" +
	"deployment\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12b\n" +
	"\x10task_queue_infos\x18\x03 \x03(\v28.temporal.api.deployment.v1.DeploymentInfo.TaskQueueInfoR\x0etaskQueueInfos\x12T\n" +
	"\bmetadata\x18\x04 \x03(\v28.temporal.api.deployment.v1.DeploymentInfo.MetadataEntryR\bmetadata\x12\x1d\n" +
	"\n" +
	"is_current\x18\x05 \x01(\bR\tisCurrent\x1a\\\n" +
	"\rMetadataEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.temporal.api.common.v1.PayloadR\x05value:\x028\x01\x1a\xa5\x01\n" +
	"\rTaskQueueInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\x04type\x18\x02 \x01(\x0e2$.temporal.api.enums.v1.TaskQueueTypeR\x04type\x12F\n" +
	"\x11first_poller_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x0ffirstPollerTime\"\x94\x02\n" +
	"\x18UpdateDeploymentMetadata\x12n\n" +
	"\x0eupsert_entries\x18\x01 \x03(\v2G.temporal.api.deployment.v1.UpdateDeploymentMetadata.UpsertEntriesEntryR\rupsertEntries\x12%\n" +
	"\x0eremove_entries\x18\x02 \x03(\tR\rremoveEntries\x1aa\n" +
	"\x12UpsertEntriesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.temporal.api.common.v1.PayloadR\x05value:\x028\x01\"\xb8\x01\n" +
	"\x12DeploymentListInfo\x12F\n" +
	"\n" +
	"deployment\x18\x01 \x01(\v2&.temporal.api.deployment.v1.DeploymentR\n" +
	"deployment\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12\x1d\n" +
	"\n" +
	"is_current\x18\x03 \x01(\bR\tisCurrent\"\x8d\a\n" +
	"\x1bWorkerDeploymentVersionInfo\x12\x1c\n" +
	"\aversion\x18\x01 \x01(\tB\x02\x18\x01R\aversion\x12b\n" +
	"\x12deployment_version\x18\v \x01(\v23.temporal.api.deployment.v1.WorkerDeploymentVersionR\x11deploymentVersion\x12'\n" +
	"\x0fdeployment_name\x18\x02 \x01(\tR\x0edeploymentName\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12L\n" +
	"\x14routing_changed_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x12routingChangedTime\x12H\n" +
	"\x12current_since_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x10currentSinceTime\x12H\n" +
	"\x12ramping_since_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR\x10rampingSinceTime\x12'\n" +
	"\x0framp_percentage\x18\a \x01(\x02R\x0erampPercentage\x12v\n" +
	"\x10task_queue_infos\x18\b \x03(\v2L.temporal.api.deployment.v1.WorkerDeploymentVersionInfo.VersionTaskQueueInfoR\x0etaskQueueInfos\x12T\n" +
	"\rdrainage_info\x18\t \x01(\v2/.temporal.api.deployment.v1.VersionDrainageInfoR\fdrainageInfo\x12G\n" +
	"\bmetadata\x18\n" +
	" \x01(\v2+.temporal.api.deployment.v1.VersionMetadataR\bmetadata\x1ad\n" +
	"\x14VersionTaskQueueInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x128\n" +
	"\x04type\x18\x02 \x01(\x0e2$.temporal.api.enums.v1.TaskQueueTypeR\x04type\"\xeb\x01\n" +
	"\x13VersionDrainageInfo\x12D\n" +
	"\x06status\x18\x01 \x01(\x0e2,.temporal.api.enums.v1.VersionDrainageStatusR\x06status\x12F\n" +
	"\x11last_changed_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\x0flastChangedTime\x12F\n" +
	"\x11last_checked_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\x0flastCheckedTime\"\xa6\x05\n" +
	"\x14WorkerDeploymentInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12|\n" +
	"\x11version_summaries\x18\x02 \x03(\v2O.temporal.api.deployment.v1.WorkerDeploymentInfo.WorkerDeploymentVersionSummaryR\x10versionSummaries\x12;\n" +
	"\vcreate_time\x18\x03 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12P\n" +
	"\x0erouting_config\x18\x04 \x01(\v2).temporal.api.deployment.v1.RoutingConfigR\rroutingConfig\x124\n" +
	"\x16last_modifier_identity\x18\x05 \x01(\tR\x14lastModifierIdentity\x1a\xb6\x02\n" +
	"\x1eWorkerDeploymentVersionSummary\x12\x1c\n" +
	"\aversion\x18\x01 \x01(\tB\x02\x18\x01R\aversion\x12b\n" +
	"\x12deployment_version\x18\x04 \x01(\v23.temporal.api.deployment.v1.WorkerDeploymentVersionR\x11deploymentVersion\x12;\n" +
	"\vcreate_time\x18\x02 \x01(\v2\x1a.google.protobuf.TimestampR\n" +
	"createTime\x12U\n" +
	"\x0fdrainage_status\x18\x03 \x01(\x0e2,.temporal.api.enums.v1.VersionDrainageStatusR\x0edrainageStatus\"]\n" +
	"\x17WorkerDeploymentVersion\x12\x19\n" +
	"\bbuild_id\x18\x01 \x01(\tR\abuildId\x12'\n" +
	"\x0fdeployment_name\x18\x02 \x01(\tR\x0edeploymentName\"\xc2\x01\n" +
	"\x0fVersionMetadata\x12R\n" +
	"\aentries\x18\x01 \x03(\v28.temporal.api.deployment.v1.VersionMetadata.EntriesEntryR\aentries\x1a[\n" +
	"\fEntriesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x125\n" +
	"\x05value\x18\x02 \x01(\v2\x1f.temporal.api.common.v1.PayloadR\x05value:\x028\x01\"\xb9\x05\n" +
	"\rRoutingConfig\x12q\n" +
	"\x1acurrent_deployment_version\x18\a \x01(\v23.temporal.api.deployment.v1.WorkerDeploymentVersionR\x18currentDeploymentVersion\x12+\n" +
	"\x0fcurrent_version\x18\x01 \x01(\tB\x02\x18\x01R\x0ecurrentVersion\x12q\n" +
	"\x1aramping_deployment_version\x18\t \x01(\v23.temporal.api.deployment.v1.WorkerDeploymentVersionR\x18rampingDeploymentVersion\x12+\n" +
	"\x0framping_version\x18\x02 \x01(\tB\x02\x18\x01R\x0erampingVersion\x12<\n" +
	"\x1aramping_version_percentage\x18\x03 \x01(\x02R\x18rampingVersionPercentage\x12[\n" +
	"\x1ccurrent_version_changed_time\x18\x04 \x01(\v2\x1a.google.protobuf.TimestampR\x19currentVersionChangedTime\x12[\n" +
	"\x1cramping_version_changed_time\x18\x05 \x01(\v2\x1a.google.protobuf.TimestampR\x19rampingVersionChangedTime\x12p\n" +
	"'ramping_version_percentage_changed_time\x18\x06 \x01(\v2\x1a.google.protobuf.TimestampR#rampingVersionPercentageChangedTimeB\x9d\x01\n" +
	"\x1dio.temporal.api.deployment.v1B\fMessageProtoP\x01Z+go.temporal.io/api/deployment/v1;deployment\xaa\x02\x1cTemporalio.Api.Deployment.V1\xea\x02\x1fTemporalio::Api::Deployment::V1b\x06proto3"

var (
	file_temporal_api_deployment_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_deployment_v1_message_proto_rawDescData []byte
)

func file_temporal_api_deployment_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_deployment_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_deployment_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_api_deployment_v1_message_proto_rawDesc), len(file_temporal_api_deployment_v1_message_proto_rawDesc)))
	})
	return file_temporal_api_deployment_v1_message_proto_rawDescData
}

var file_temporal_api_deployment_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_temporal_api_deployment_v1_message_proto_goTypes = []any{
	(*WorkerDeploymentOptions)(nil),      // 0: temporal.api.deployment.v1.WorkerDeploymentOptions
	(*Deployment)(nil),                   // 1: temporal.api.deployment.v1.Deployment
	(*DeploymentInfo)(nil),               // 2: temporal.api.deployment.v1.DeploymentInfo
	(*UpdateDeploymentMetadata)(nil),     // 3: temporal.api.deployment.v1.UpdateDeploymentMetadata
	(*DeploymentListInfo)(nil),           // 4: temporal.api.deployment.v1.DeploymentListInfo
	(*WorkerDeploymentVersionInfo)(nil),  // 5: temporal.api.deployment.v1.WorkerDeploymentVersionInfo
	(*VersionDrainageInfo)(nil),          // 6: temporal.api.deployment.v1.VersionDrainageInfo
	(*WorkerDeploymentInfo)(nil),         // 7: temporal.api.deployment.v1.WorkerDeploymentInfo
	(*WorkerDeploymentVersion)(nil),      // 8: temporal.api.deployment.v1.WorkerDeploymentVersion
	(*VersionMetadata)(nil),              // 9: temporal.api.deployment.v1.VersionMetadata
	(*RoutingConfig)(nil),                // 10: temporal.api.deployment.v1.RoutingConfig
	nil,                                  // 11: temporal.api.deployment.v1.DeploymentInfo.MetadataEntry
	(*DeploymentInfo_TaskQueueInfo)(nil), // 12: temporal.api.deployment.v1.DeploymentInfo.TaskQueueInfo
	nil,                                  // 13: temporal.api.deployment.v1.UpdateDeploymentMetadata.UpsertEntriesEntry
	(*WorkerDeploymentVersionInfo_VersionTaskQueueInfo)(nil),    // 14: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.VersionTaskQueueInfo
	(*WorkerDeploymentInfo_WorkerDeploymentVersionSummary)(nil), // 15: temporal.api.deployment.v1.WorkerDeploymentInfo.WorkerDeploymentVersionSummary
	nil,                           // 16: temporal.api.deployment.v1.VersionMetadata.EntriesEntry
	(v1.WorkerVersioningMode)(0),  // 17: temporal.api.enums.v1.WorkerVersioningMode
	(*timestamppb.Timestamp)(nil), // 18: google.protobuf.Timestamp
	(v1.VersionDrainageStatus)(0), // 19: temporal.api.enums.v1.VersionDrainageStatus
	(*v11.Payload)(nil),           // 20: temporal.api.common.v1.Payload
	(v1.TaskQueueType)(0),         // 21: temporal.api.enums.v1.TaskQueueType
}
var file_temporal_api_deployment_v1_message_proto_depIdxs = []int32{
	17, // 0: temporal.api.deployment.v1.WorkerDeploymentOptions.worker_versioning_mode:type_name -> temporal.api.enums.v1.WorkerVersioningMode
	1,  // 1: temporal.api.deployment.v1.DeploymentInfo.deployment:type_name -> temporal.api.deployment.v1.Deployment
	18, // 2: temporal.api.deployment.v1.DeploymentInfo.create_time:type_name -> google.protobuf.Timestamp
	12, // 3: temporal.api.deployment.v1.DeploymentInfo.task_queue_infos:type_name -> temporal.api.deployment.v1.DeploymentInfo.TaskQueueInfo
	11, // 4: temporal.api.deployment.v1.DeploymentInfo.metadata:type_name -> temporal.api.deployment.v1.DeploymentInfo.MetadataEntry
	13, // 5: temporal.api.deployment.v1.UpdateDeploymentMetadata.upsert_entries:type_name -> temporal.api.deployment.v1.UpdateDeploymentMetadata.UpsertEntriesEntry
	1,  // 6: temporal.api.deployment.v1.DeploymentListInfo.deployment:type_name -> temporal.api.deployment.v1.Deployment
	18, // 7: temporal.api.deployment.v1.DeploymentListInfo.create_time:type_name -> google.protobuf.Timestamp
	8,  // 8: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.deployment_version:type_name -> temporal.api.deployment.v1.WorkerDeploymentVersion
	18, // 9: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.create_time:type_name -> google.protobuf.Timestamp
	18, // 10: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.routing_changed_time:type_name -> google.protobuf.Timestamp
	18, // 11: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.current_since_time:type_name -> google.protobuf.Timestamp
	18, // 12: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.ramping_since_time:type_name -> google.protobuf.Timestamp
	14, // 13: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.task_queue_infos:type_name -> temporal.api.deployment.v1.WorkerDeploymentVersionInfo.VersionTaskQueueInfo
	6,  // 14: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.drainage_info:type_name -> temporal.api.deployment.v1.VersionDrainageInfo
	9,  // 15: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.metadata:type_name -> temporal.api.deployment.v1.VersionMetadata
	19, // 16: temporal.api.deployment.v1.VersionDrainageInfo.status:type_name -> temporal.api.enums.v1.VersionDrainageStatus
	18, // 17: temporal.api.deployment.v1.VersionDrainageInfo.last_changed_time:type_name -> google.protobuf.Timestamp
	18, // 18: temporal.api.deployment.v1.VersionDrainageInfo.last_checked_time:type_name -> google.protobuf.Timestamp
	15, // 19: temporal.api.deployment.v1.WorkerDeploymentInfo.version_summaries:type_name -> temporal.api.deployment.v1.WorkerDeploymentInfo.WorkerDeploymentVersionSummary
	18, // 20: temporal.api.deployment.v1.WorkerDeploymentInfo.create_time:type_name -> google.protobuf.Timestamp
	10, // 21: temporal.api.deployment.v1.WorkerDeploymentInfo.routing_config:type_name -> temporal.api.deployment.v1.RoutingConfig
	16, // 22: temporal.api.deployment.v1.VersionMetadata.entries:type_name -> temporal.api.deployment.v1.VersionMetadata.EntriesEntry
	8,  // 23: temporal.api.deployment.v1.RoutingConfig.current_deployment_version:type_name -> temporal.api.deployment.v1.WorkerDeploymentVersion
	8,  // 24: temporal.api.deployment.v1.RoutingConfig.ramping_deployment_version:type_name -> temporal.api.deployment.v1.WorkerDeploymentVersion
	18, // 25: temporal.api.deployment.v1.RoutingConfig.current_version_changed_time:type_name -> google.protobuf.Timestamp
	18, // 26: temporal.api.deployment.v1.RoutingConfig.ramping_version_changed_time:type_name -> google.protobuf.Timestamp
	18, // 27: temporal.api.deployment.v1.RoutingConfig.ramping_version_percentage_changed_time:type_name -> google.protobuf.Timestamp
	20, // 28: temporal.api.deployment.v1.DeploymentInfo.MetadataEntry.value:type_name -> temporal.api.common.v1.Payload
	21, // 29: temporal.api.deployment.v1.DeploymentInfo.TaskQueueInfo.type:type_name -> temporal.api.enums.v1.TaskQueueType
	18, // 30: temporal.api.deployment.v1.DeploymentInfo.TaskQueueInfo.first_poller_time:type_name -> google.protobuf.Timestamp
	20, // 31: temporal.api.deployment.v1.UpdateDeploymentMetadata.UpsertEntriesEntry.value:type_name -> temporal.api.common.v1.Payload
	21, // 32: temporal.api.deployment.v1.WorkerDeploymentVersionInfo.VersionTaskQueueInfo.type:type_name -> temporal.api.enums.v1.TaskQueueType
	8,  // 33: temporal.api.deployment.v1.WorkerDeploymentInfo.WorkerDeploymentVersionSummary.deployment_version:type_name -> temporal.api.deployment.v1.WorkerDeploymentVersion
	18, // 34: temporal.api.deployment.v1.WorkerDeploymentInfo.WorkerDeploymentVersionSummary.create_time:type_name -> google.protobuf.Timestamp
	19, // 35: temporal.api.deployment.v1.WorkerDeploymentInfo.WorkerDeploymentVersionSummary.drainage_status:type_name -> temporal.api.enums.v1.VersionDrainageStatus
	20, // 36: temporal.api.deployment.v1.VersionMetadata.EntriesEntry.value:type_name -> temporal.api.common.v1.Payload
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_temporal_api_deployment_v1_message_proto_init() }
func file_temporal_api_deployment_v1_message_proto_init() {
	if File_temporal_api_deployment_v1_message_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_api_deployment_v1_message_proto_rawDesc), len(file_temporal_api_deployment_v1_message_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_deployment_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_deployment_v1_message_proto_depIdxs,
		MessageInfos:      file_temporal_api_deployment_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_deployment_v1_message_proto = out.File
	file_temporal_api_deployment_v1_message_proto_goTypes = nil
	file_temporal_api_deployment_v1_message_proto_depIdxs = nil
}
