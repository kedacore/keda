// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package usage

import (
	"fmt"

	"google.golang.org/protobuf/proto"
)

// Marshal an object of type Summary to the protobuf v3 wire format
func (val *Summary) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Summary from the protobuf v3 wire format
func (val *Summary) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Summary) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Summary values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Summary) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Summary
	switch t := that.(type) {
	case *Summary:
		that1 = t
	case Summary:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type RecordGroup to the protobuf v3 wire format
func (val *RecordGroup) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type RecordGroup from the protobuf v3 wire format
func (val *RecordGroup) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *RecordGroup) Size() int {
	return proto.Size(val)
}

// Equal returns whether two RecordGroup values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *RecordGroup) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *RecordGroup
	switch t := that.(type) {
	case *RecordGroup:
		that1 = t
	case RecordGroup:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type GroupBy to the protobuf v3 wire format
func (val *GroupBy) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type GroupBy from the protobuf v3 wire format
func (val *GroupBy) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *GroupBy) Size() int {
	return proto.Size(val)
}

// Equal returns whether two GroupBy values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *GroupBy) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *GroupBy
	switch t := that.(type) {
	case *GroupBy:
		that1 = t
	case GroupBy:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type Record to the protobuf v3 wire format
func (val *Record) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Record from the protobuf v3 wire format
func (val *Record) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Record) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Record values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Record
	switch t := that.(type) {
	case *Record:
		that1 = t
	case Record:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

var (
	RecordType_shorthandValue = map[string]int32{
		"Unspecified":     0,
		"Actions":         1,
		"ActiveStorage":   2,
		"RetainedStorage": 3,
	}
)

// RecordTypeFromString parses a RecordType value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to RecordType
func RecordTypeFromString(s string) (RecordType, error) {
	if v, ok := RecordType_value[s]; ok {
		return RecordType(v), nil
	} else if v, ok := RecordType_shorthandValue[s]; ok {
		return RecordType(v), nil
	}
	return RecordType(0), fmt.Errorf("%s is not a valid RecordType", s)
}

var (
	RecordUnit_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Number":      1,
		"ByteSeconds": 2,
	}
)

// RecordUnitFromString parses a RecordUnit value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to RecordUnit
func RecordUnitFromString(s string) (RecordUnit, error) {
	if v, ok := RecordUnit_value[s]; ok {
		return RecordUnit(v), nil
	} else if v, ok := RecordUnit_shorthandValue[s]; ok {
		return RecordUnit(v), nil
	}
	return RecordUnit(0), fmt.Errorf("%s is not a valid RecordUnit", s)
}

var (
	GroupByKey_shorthandValue = map[string]int32{
		"Unspecified": 0,
		"Namespace":   1,
	}
)

// GroupByKeyFromString parses a GroupByKey value from  either the protojson
// canonical SCREAMING_CASE enum or the traditional temporal PascalCase enum to GroupByKey
func GroupByKeyFromString(s string) (GroupByKey, error) {
	if v, ok := GroupByKey_value[s]; ok {
		return GroupByKey(v), nil
	} else if v, ok := GroupByKey_shorthandValue[s]; ok {
		return GroupByKey(v), nil
	}
	return GroupByKey(0), fmt.Errorf("%s is not a valid GroupByKey", s)
}
