// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/cloud/sink/v1/message.proto

package sink

import (
	reflect "reflect"
	sync "sync"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type S3Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The IAM role that Temporal Cloud assumes for writing records to the customer's S3 bucket.
	RoleName string `protobuf:"bytes,1,opt,name=role_name,json=roleName,proto3" json:"role_name,omitempty"`
	// The name of the destination S3 bucket where Temporal will send data.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The region where the S3 bucket is located.
	Region string `protobuf:"bytes,3,opt,name=region,proto3" json:"region,omitempty"`
	// The AWS Key Management Service (KMS) ARN used for encryption.
	KmsArn string `protobuf:"bytes,4,opt,name=kms_arn,json=kmsArn,proto3" json:"kms_arn,omitempty"`
	// The AWS account ID associated with the S3 bucket and the assumed role.
	AwsAccountId string `protobuf:"bytes,5,opt,name=aws_account_id,json=awsAccountId,proto3" json:"aws_account_id,omitempty"`
}

func (x *S3Spec) Reset() {
	*x = S3Spec{}
	mi := &file_temporal_api_cloud_sink_v1_message_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Spec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Spec) ProtoMessage() {}

func (x *S3Spec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_sink_v1_message_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Spec.ProtoReflect.Descriptor instead.
func (*S3Spec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_sink_v1_message_proto_rawDescGZIP(), []int{0}
}

func (x *S3Spec) GetRoleName() string {
	if x != nil {
		return x.RoleName
	}
	return ""
}

func (x *S3Spec) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *S3Spec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *S3Spec) GetKmsArn() string {
	if x != nil {
		return x.KmsArn
	}
	return ""
}

func (x *S3Spec) GetAwsAccountId() string {
	if x != nil {
		return x.AwsAccountId
	}
	return ""
}

type GCSSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The customer service account ID that Temporal Cloud impersonates for writing records to the customer's GCS bucket.
	SaId string `protobuf:"bytes,1,opt,name=sa_id,json=saId,proto3" json:"sa_id,omitempty"`
	// The name of the destination GCS bucket where Temporal will send data.
	BucketName string `protobuf:"bytes,2,opt,name=bucket_name,json=bucketName,proto3" json:"bucket_name,omitempty"`
	// The GCP project ID associated with the GCS bucket and service account.
	GcpProjectId string `protobuf:"bytes,3,opt,name=gcp_project_id,json=gcpProjectId,proto3" json:"gcp_project_id,omitempty"`
	// The region of the gcs bucket
	Region string `protobuf:"bytes,4,opt,name=region,proto3" json:"region,omitempty"`
}

func (x *GCSSpec) Reset() {
	*x = GCSSpec{}
	mi := &file_temporal_api_cloud_sink_v1_message_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GCSSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GCSSpec) ProtoMessage() {}

func (x *GCSSpec) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_cloud_sink_v1_message_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GCSSpec.ProtoReflect.Descriptor instead.
func (*GCSSpec) Descriptor() ([]byte, []int) {
	return file_temporal_api_cloud_sink_v1_message_proto_rawDescGZIP(), []int{1}
}

func (x *GCSSpec) GetSaId() string {
	if x != nil {
		return x.SaId
	}
	return ""
}

func (x *GCSSpec) GetBucketName() string {
	if x != nil {
		return x.BucketName
	}
	return ""
}

func (x *GCSSpec) GetGcpProjectId() string {
	if x != nil {
		return x.GcpProjectId
	}
	return ""
}

func (x *GCSSpec) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

var File_temporal_api_cloud_sink_v1_message_proto protoreflect.FileDescriptor

var file_temporal_api_cloud_sink_v1_message_proto_rawDesc = []byte{
	0x0a, 0x28, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2f, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76,
	0x31, 0x22, 0xb1, 0x01, 0x0a, 0x06, 0x53, 0x33, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1f, 0x0a, 0x09, 0x72,
	0x6f, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x6f, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x23, 0x0a, 0x0b, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x1a, 0x0a, 0x06,
	0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67,
	0x69, 0x6f, 0x6e, 0x42, 0x02, 0x68, 0x00, 0x12, 0x1b, 0x0a, 0x07, 0x6b, 0x6d, 0x73, 0x5f, 0x61, 0x72,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6b, 0x6d, 0x73, 0x41, 0x72, 0x6e, 0x42, 0x02,
	0x68, 0x00, 0x12, 0x28, 0x0a, 0x0e, 0x61, 0x77, 0x73, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x77, 0x73, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x42, 0x02, 0x68, 0x00, 0x22, 0x8d, 0x01, 0x0a, 0x07, 0x47, 0x43, 0x53,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x17, 0x0a, 0x05, 0x73, 0x61, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x73, 0x61, 0x49, 0x64, 0x42, 0x02, 0x68, 0x00, 0x12, 0x23, 0x0a, 0x0b, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x02, 0x68, 0x00, 0x12, 0x28,
	0x0a, 0x0e, 0x67, 0x63, 0x70, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74,
	0x49, 0x64, 0x42, 0x02, 0x68, 0x00, 0x12, 0x1a, 0x0a, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x42, 0x02, 0x68, 0x00, 0x42,
	0x98, 0x01, 0x0a, 0x1d, 0x69, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x73, 0x69, 0x6e, 0x6b, 0x2e, 0x76, 0x31, 0x42,
	0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x25,
	0x67, 0x6f, 0x2e, 0x74, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x73, 0x69, 0x6e, 0x6b, 0x2f, 0x76, 0x31, 0x3b, 0x73,
	0x69, 0x6e, 0x6b, 0xaa, 0x02, 0x1c, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x2e, 0x41,
	0x70, 0x69, 0x2e, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x53, 0x69, 0x6e, 0x6b, 0x2e, 0x56, 0x31, 0xea,
	0x02, 0x20, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x6c, 0x69, 0x6f, 0x3a, 0x3a, 0x41, 0x70, 0x69,
	0x3a, 0x3a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x3a, 0x3a, 0x53, 0x69, 0x6e, 0x6b, 0x3a, 0x3a, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_temporal_api_cloud_sink_v1_message_proto_rawDescOnce sync.Once
	file_temporal_api_cloud_sink_v1_message_proto_rawDescData = file_temporal_api_cloud_sink_v1_message_proto_rawDesc
)

func file_temporal_api_cloud_sink_v1_message_proto_rawDescGZIP() []byte {
	file_temporal_api_cloud_sink_v1_message_proto_rawDescOnce.Do(func() {
		file_temporal_api_cloud_sink_v1_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_temporal_api_cloud_sink_v1_message_proto_rawDescData)
	})
	return file_temporal_api_cloud_sink_v1_message_proto_rawDescData
}

var file_temporal_api_cloud_sink_v1_message_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_temporal_api_cloud_sink_v1_message_proto_goTypes = []any{
	(*S3Spec)(nil),  // 0: temporal.api.cloud.sink.v1.S3Spec
	(*GCSSpec)(nil), // 1: temporal.api.cloud.sink.v1.GCSSpec
}
var file_temporal_api_cloud_sink_v1_message_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_temporal_api_cloud_sink_v1_message_proto_init() }
func file_temporal_api_cloud_sink_v1_message_proto_init() {
	if File_temporal_api_cloud_sink_v1_message_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_temporal_api_cloud_sink_v1_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_cloud_sink_v1_message_proto_goTypes,
		DependencyIndexes: file_temporal_api_cloud_sink_v1_message_proto_depIdxs,
		MessageInfos:      file_temporal_api_cloud_sink_v1_message_proto_msgTypes,
	}.Build()
	File_temporal_api_cloud_sink_v1_message_proto = out.File
	file_temporal_api_cloud_sink_v1_message_proto_rawDesc = nil
	file_temporal_api_cloud_sink_v1_message_proto_goTypes = nil
	file_temporal_api_cloud_sink_v1_message_proto_depIdxs = nil
}
