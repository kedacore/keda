// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package namespace

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type CertificateFilterSpec to the protobuf v3 wire format
func (val *CertificateFilterSpec) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type CertificateFilterSpec from the protobuf v3 wire format
func (val *CertificateFilterSpec) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *CertificateFilterSpec) Size() int {
	return proto.Size(val)
}

// Equal returns whether two CertificateFilterSpec values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *CertificateFilterSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *CertificateFilterSpec
	switch t := that.(type) {
	case *CertificateFilterSpec:
		that1 = t
	case CertificateFilterSpec:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type MtlsAuthSpec to the protobuf v3 wire format
func (val *MtlsAuthSpec) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type MtlsAuthSpec from the protobuf v3 wire format
func (val *MtlsAuthSpec) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *MtlsAuthSpec) Size() int {
	return proto.Size(val)
}

// Equal returns whether two MtlsAuthSpec values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *MtlsAuthSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *MtlsAuthSpec
	switch t := that.(type) {
	case *MtlsAuthSpec:
		that1 = t
	case MtlsAuthSpec:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ApiKeyAuthSpec to the protobuf v3 wire format
func (val *ApiKeyAuthSpec) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ApiKeyAuthSpec from the protobuf v3 wire format
func (val *ApiKeyAuthSpec) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ApiKeyAuthSpec) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ApiKeyAuthSpec values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ApiKeyAuthSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ApiKeyAuthSpec
	switch t := that.(type) {
	case *ApiKeyAuthSpec:
		that1 = t
	case ApiKeyAuthSpec:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type CodecServerSpec to the protobuf v3 wire format
func (val *CodecServerSpec) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type CodecServerSpec from the protobuf v3 wire format
func (val *CodecServerSpec) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *CodecServerSpec) Size() int {
	return proto.Size(val)
}

// Equal returns whether two CodecServerSpec values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *CodecServerSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *CodecServerSpec
	switch t := that.(type) {
	case *CodecServerSpec:
		that1 = t
	case CodecServerSpec:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type NamespaceSpec to the protobuf v3 wire format
func (val *NamespaceSpec) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type NamespaceSpec from the protobuf v3 wire format
func (val *NamespaceSpec) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *NamespaceSpec) Size() int {
	return proto.Size(val)
}

// Equal returns whether two NamespaceSpec values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *NamespaceSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *NamespaceSpec
	switch t := that.(type) {
	case *NamespaceSpec:
		that1 = t
	case NamespaceSpec:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type Endpoints to the protobuf v3 wire format
func (val *Endpoints) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Endpoints from the protobuf v3 wire format
func (val *Endpoints) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Endpoints) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Endpoints values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Endpoints) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Endpoints
	switch t := that.(type) {
	case *Endpoints:
		that1 = t
	case Endpoints:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type Limits to the protobuf v3 wire format
func (val *Limits) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Limits from the protobuf v3 wire format
func (val *Limits) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Limits) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Limits values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Limits) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Limits
	switch t := that.(type) {
	case *Limits:
		that1 = t
	case Limits:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type AWSPrivateLinkInfo to the protobuf v3 wire format
func (val *AWSPrivateLinkInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type AWSPrivateLinkInfo from the protobuf v3 wire format
func (val *AWSPrivateLinkInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *AWSPrivateLinkInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two AWSPrivateLinkInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *AWSPrivateLinkInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *AWSPrivateLinkInfo
	switch t := that.(type) {
	case *AWSPrivateLinkInfo:
		that1 = t
	case AWSPrivateLinkInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type PrivateConnectivity to the protobuf v3 wire format
func (val *PrivateConnectivity) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type PrivateConnectivity from the protobuf v3 wire format
func (val *PrivateConnectivity) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *PrivateConnectivity) Size() int {
	return proto.Size(val)
}

// Equal returns whether two PrivateConnectivity values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *PrivateConnectivity) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *PrivateConnectivity
	switch t := that.(type) {
	case *PrivateConnectivity:
		that1 = t
	case PrivateConnectivity:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type Namespace to the protobuf v3 wire format
func (val *Namespace) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Namespace from the protobuf v3 wire format
func (val *Namespace) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Namespace) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Namespace values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Namespace) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Namespace
	switch t := that.(type) {
	case *Namespace:
		that1 = t
	case Namespace:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type NamespaceRegionStatus to the protobuf v3 wire format
func (val *NamespaceRegionStatus) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type NamespaceRegionStatus from the protobuf v3 wire format
func (val *NamespaceRegionStatus) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *NamespaceRegionStatus) Size() int {
	return proto.Size(val)
}

// Equal returns whether two NamespaceRegionStatus values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *NamespaceRegionStatus) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *NamespaceRegionStatus
	switch t := that.(type) {
	case *NamespaceRegionStatus:
		that1 = t
	case NamespaceRegionStatus:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ExportSinkSpec to the protobuf v3 wire format
func (val *ExportSinkSpec) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ExportSinkSpec from the protobuf v3 wire format
func (val *ExportSinkSpec) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ExportSinkSpec) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ExportSinkSpec values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ExportSinkSpec) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ExportSinkSpec
	switch t := that.(type) {
	case *ExportSinkSpec:
		that1 = t
	case ExportSinkSpec:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ExportSink to the protobuf v3 wire format
func (val *ExportSink) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ExportSink from the protobuf v3 wire format
func (val *ExportSink) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ExportSink) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ExportSink values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ExportSink) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ExportSink
	switch t := that.(type) {
	case *ExportSink:
		that1 = t
	case ExportSink:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
