package serviceerror

import (
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"go.temporal.io/api/errordetails/v1"
	"go.temporal.io/api/failure/v1"
)

type (
	// QueryFailed represents query failed error.
	QueryFailed struct {
		Message string
		// The full reason for this query failure. May not be available if the response is generated by an old
		// SDK.
		Failure *failure.Failure
		st      *status.Status
	}
)

// NewQueryFailed returns new QueryFailed error.
func NewQueryFailed(message string) error {
	return &QueryFailed{
		Message: message,
	}
}

// NewQueryFailed returns new QueryFailed error.
func NewQueryFailedWithFailure(message string, failure *failure.Failure) error {
	return &QueryFailed{
		Message: message,
		Failure: failure,
	}
}

// Error returns string message.
func (e *QueryFailed) Error() string {
	return e.Message
}

func (e *QueryFailed) Status() *status.Status {
	if e.st != nil {
		return e.st
	}

	st := status.New(codes.InvalidArgument, e.Message)
	st, _ = st.WithDetails(
		&errordetails.QueryFailedFailure{
			Failure: e.Failure,
		},
	)
	return st
}

func newQueryFailed(st *status.Status, errDetails *errordetails.QueryFailedFailure) error {
	return &QueryFailed{
		Message: st.Message(),
		Failure: errDetails.Failure,
		st:      st,
	}
}
