// The MIT License
//
// Copyright (c) 2022 Temporal Technologies Inc.  All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package failure

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type ApplicationFailureInfo to the protobuf v3 wire format
func (val *ApplicationFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ApplicationFailureInfo from the protobuf v3 wire format
func (val *ApplicationFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ApplicationFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ApplicationFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ApplicationFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ApplicationFailureInfo
	switch t := that.(type) {
	case *ApplicationFailureInfo:
		that1 = t
	case ApplicationFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type TimeoutFailureInfo to the protobuf v3 wire format
func (val *TimeoutFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type TimeoutFailureInfo from the protobuf v3 wire format
func (val *TimeoutFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *TimeoutFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two TimeoutFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *TimeoutFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *TimeoutFailureInfo
	switch t := that.(type) {
	case *TimeoutFailureInfo:
		that1 = t
	case TimeoutFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type CanceledFailureInfo to the protobuf v3 wire format
func (val *CanceledFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type CanceledFailureInfo from the protobuf v3 wire format
func (val *CanceledFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *CanceledFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two CanceledFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *CanceledFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *CanceledFailureInfo
	switch t := that.(type) {
	case *CanceledFailureInfo:
		that1 = t
	case CanceledFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type TerminatedFailureInfo to the protobuf v3 wire format
func (val *TerminatedFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type TerminatedFailureInfo from the protobuf v3 wire format
func (val *TerminatedFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *TerminatedFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two TerminatedFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *TerminatedFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *TerminatedFailureInfo
	switch t := that.(type) {
	case *TerminatedFailureInfo:
		that1 = t
	case TerminatedFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ServerFailureInfo to the protobuf v3 wire format
func (val *ServerFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ServerFailureInfo from the protobuf v3 wire format
func (val *ServerFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ServerFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ServerFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ServerFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ServerFailureInfo
	switch t := that.(type) {
	case *ServerFailureInfo:
		that1 = t
	case ServerFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ResetWorkflowFailureInfo to the protobuf v3 wire format
func (val *ResetWorkflowFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ResetWorkflowFailureInfo from the protobuf v3 wire format
func (val *ResetWorkflowFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ResetWorkflowFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ResetWorkflowFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ResetWorkflowFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ResetWorkflowFailureInfo
	switch t := that.(type) {
	case *ResetWorkflowFailureInfo:
		that1 = t
	case ResetWorkflowFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ActivityFailureInfo to the protobuf v3 wire format
func (val *ActivityFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ActivityFailureInfo from the protobuf v3 wire format
func (val *ActivityFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ActivityFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ActivityFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ActivityFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ActivityFailureInfo
	switch t := that.(type) {
	case *ActivityFailureInfo:
		that1 = t
	case ActivityFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type ChildWorkflowExecutionFailureInfo to the protobuf v3 wire format
func (val *ChildWorkflowExecutionFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type ChildWorkflowExecutionFailureInfo from the protobuf v3 wire format
func (val *ChildWorkflowExecutionFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *ChildWorkflowExecutionFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two ChildWorkflowExecutionFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *ChildWorkflowExecutionFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *ChildWorkflowExecutionFailureInfo
	switch t := that.(type) {
	case *ChildWorkflowExecutionFailureInfo:
		that1 = t
	case ChildWorkflowExecutionFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type NexusOperationFailureInfo to the protobuf v3 wire format
func (val *NexusOperationFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type NexusOperationFailureInfo from the protobuf v3 wire format
func (val *NexusOperationFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *NexusOperationFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two NexusOperationFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *NexusOperationFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *NexusOperationFailureInfo
	switch t := that.(type) {
	case *NexusOperationFailureInfo:
		that1 = t
	case NexusOperationFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type NexusHandlerFailureInfo to the protobuf v3 wire format
func (val *NexusHandlerFailureInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type NexusHandlerFailureInfo from the protobuf v3 wire format
func (val *NexusHandlerFailureInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *NexusHandlerFailureInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two NexusHandlerFailureInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *NexusHandlerFailureInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *NexusHandlerFailureInfo
	switch t := that.(type) {
	case *NexusHandlerFailureInfo:
		that1 = t
	case NexusHandlerFailureInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type Failure to the protobuf v3 wire format
func (val *Failure) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type Failure from the protobuf v3 wire format
func (val *Failure) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *Failure) Size() int {
	return proto.Size(val)
}

// Equal returns whether two Failure values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *Failure) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *Failure
	switch t := that.(type) {
	case *Failure:
		that1 = t
	case Failure:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type MultiOperationExecutionAborted to the protobuf v3 wire format
func (val *MultiOperationExecutionAborted) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type MultiOperationExecutionAborted from the protobuf v3 wire format
func (val *MultiOperationExecutionAborted) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *MultiOperationExecutionAborted) Size() int {
	return proto.Size(val)
}

// Equal returns whether two MultiOperationExecutionAborted values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *MultiOperationExecutionAborted) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *MultiOperationExecutionAborted
	switch t := that.(type) {
	case *MultiOperationExecutionAborted:
		that1 = t
	case MultiOperationExecutionAborted:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
