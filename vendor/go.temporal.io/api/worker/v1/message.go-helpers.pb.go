// Code generated by protoc-gen-go-helpers. DO NOT EDIT.
package worker

import (
	"google.golang.org/protobuf/proto"
)

// Marshal an object of type WorkerPollerInfo to the protobuf v3 wire format
func (val *WorkerPollerInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkerPollerInfo from the protobuf v3 wire format
func (val *WorkerPollerInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkerPollerInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkerPollerInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkerPollerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkerPollerInfo
	switch t := that.(type) {
	case *WorkerPollerInfo:
		that1 = t
	case WorkerPollerInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type WorkerSlotsInfo to the protobuf v3 wire format
func (val *WorkerSlotsInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkerSlotsInfo from the protobuf v3 wire format
func (val *WorkerSlotsInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkerSlotsInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkerSlotsInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkerSlotsInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkerSlotsInfo
	switch t := that.(type) {
	case *WorkerSlotsInfo:
		that1 = t
	case WorkerSlotsInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type WorkerHostInfo to the protobuf v3 wire format
func (val *WorkerHostInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkerHostInfo from the protobuf v3 wire format
func (val *WorkerHostInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkerHostInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkerHostInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkerHostInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkerHostInfo
	switch t := that.(type) {
	case *WorkerHostInfo:
		that1 = t
	case WorkerHostInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type WorkerHeartbeat to the protobuf v3 wire format
func (val *WorkerHeartbeat) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkerHeartbeat from the protobuf v3 wire format
func (val *WorkerHeartbeat) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkerHeartbeat) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkerHeartbeat values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkerHeartbeat) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkerHeartbeat
	switch t := that.(type) {
	case *WorkerHeartbeat:
		that1 = t
	case WorkerHeartbeat:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type WorkerInfo to the protobuf v3 wire format
func (val *WorkerInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type WorkerInfo from the protobuf v3 wire format
func (val *WorkerInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *WorkerInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two WorkerInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *WorkerInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *WorkerInfo
	switch t := that.(type) {
	case *WorkerInfo:
		that1 = t
	case WorkerInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}

// Marshal an object of type PluginInfo to the protobuf v3 wire format
func (val *PluginInfo) Marshal() ([]byte, error) {
	return proto.Marshal(val)
}

// Unmarshal an object of type PluginInfo from the protobuf v3 wire format
func (val *PluginInfo) Unmarshal(buf []byte) error {
	return proto.Unmarshal(buf, val)
}

// Size returns the size of the object, in bytes, once serialized
func (val *PluginInfo) Size() int {
	return proto.Size(val)
}

// Equal returns whether two PluginInfo values are equivalent by recursively
// comparing the message's fields.
// For more information see the documentation for
// https://pkg.go.dev/google.golang.org/protobuf/proto#Equal
func (this *PluginInfo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	var that1 *PluginInfo
	switch t := that.(type) {
	case *PluginInfo:
		that1 = t
	case PluginInfo:
		that1 = &t
	default:
		return false
	}

	return proto.Equal(this, that1)
}
