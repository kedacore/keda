// Code generated by protoc-gen-go. DO NOT EDIT.
// plugins:
// 	protoc-gen-go
// 	protoc
// source: temporal/api/sdk/v1/enhanced_stack_trace.proto

package sdk

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Internal structure used to create worker stack traces with references to code.
type EnhancedStackTrace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Information pertaining to the SDK that the trace has been captured from.
	Sdk *StackTraceSDKInfo `protobuf:"bytes,1,opt,name=sdk,proto3" json:"sdk,omitempty"`
	// Mapping of file path to file contents.
	Sources map[string]*StackTraceFileSlice `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	// Collection of stacks captured.
	Stacks        []*StackTrace `protobuf:"bytes,3,rep,name=stacks,proto3" json:"stacks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EnhancedStackTrace) Reset() {
	*x = EnhancedStackTrace{}
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EnhancedStackTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnhancedStackTrace) ProtoMessage() {}

func (x *EnhancedStackTrace) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnhancedStackTrace.ProtoReflect.Descriptor instead.
func (*EnhancedStackTrace) Descriptor() ([]byte, []int) {
	return file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescGZIP(), []int{0}
}

func (x *EnhancedStackTrace) GetSdk() *StackTraceSDKInfo {
	if x != nil {
		return x.Sdk
	}
	return nil
}

func (x *EnhancedStackTrace) GetSources() map[string]*StackTraceFileSlice {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *EnhancedStackTrace) GetStacks() []*StackTrace {
	if x != nil {
		return x.Stacks
	}
	return nil
}

// Information pertaining to the SDK that the trace has been captured from.
// (-- api-linter: core::0123::resource-annotation=disabled
//
//	aip.dev/not-precedent: Naming SDK version is optional. --)
type StackTraceSDKInfo struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Name of the SDK
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Version string of the SDK
	Version       string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StackTraceSDKInfo) Reset() {
	*x = StackTraceSDKInfo{}
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackTraceSDKInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTraceSDKInfo) ProtoMessage() {}

func (x *StackTraceSDKInfo) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTraceSDKInfo.ProtoReflect.Descriptor instead.
func (*StackTraceSDKInfo) Descriptor() ([]byte, []int) {
	return file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescGZIP(), []int{1}
}

func (x *StackTraceSDKInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StackTraceSDKInfo) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

// "Slice" of a file starting at line_offset -- a line offset and code fragment corresponding to the worker's stack.
type StackTraceFileSlice struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Only used (possibly) to trim the file without breaking syntax highlighting. This is not optional, unlike
	// the `line` property of a `StackTraceFileLocation`.
	// (-- api-linter: core::0141::forbidden-types=disabled
	//
	//	aip.dev/not-precedent: These really shouldn't have negative values. --)
	LineOffset uint32 `protobuf:"varint,1,opt,name=line_offset,json=lineOffset,proto3" json:"line_offset,omitempty"`
	// Slice of a file with the respective OS-specific line terminator.
	Content       string `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StackTraceFileSlice) Reset() {
	*x = StackTraceFileSlice{}
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackTraceFileSlice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTraceFileSlice) ProtoMessage() {}

func (x *StackTraceFileSlice) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTraceFileSlice.ProtoReflect.Descriptor instead.
func (*StackTraceFileSlice) Descriptor() ([]byte, []int) {
	return file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescGZIP(), []int{2}
}

func (x *StackTraceFileSlice) GetLineOffset() uint32 {
	if x != nil {
		return x.LineOffset
	}
	return 0
}

func (x *StackTraceFileSlice) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

// More specific location details of a file: its path, precise line and column numbers if applicable, and function name if available.
// In essence, a pointer to a location in a file
type StackTraceFileLocation struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Path to source file (absolute or relative).
	// If the paths are relative, ensure that they are all relative to the same root.
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	// Optional; If possible, SDK should send this -- this is required for displaying the code location.
	// If not provided, set to -1.
	Line int32 `protobuf:"varint,2,opt,name=line,proto3" json:"line,omitempty"`
	// Optional; if possible, SDK should send this.
	// If not provided, set to -1.
	Column int32 `protobuf:"varint,3,opt,name=column,proto3" json:"column,omitempty"`
	// Function name this line belongs to, if applicable.
	// Used for falling back to stack trace view.
	FunctionName string `protobuf:"bytes,4,opt,name=function_name,json=functionName,proto3" json:"function_name,omitempty"`
	// Flag to communicate whether a location should be hidden by default in the stack view.
	InternalCode  bool `protobuf:"varint,5,opt,name=internal_code,json=internalCode,proto3" json:"internal_code,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StackTraceFileLocation) Reset() {
	*x = StackTraceFileLocation{}
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackTraceFileLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTraceFileLocation) ProtoMessage() {}

func (x *StackTraceFileLocation) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTraceFileLocation.ProtoReflect.Descriptor instead.
func (*StackTraceFileLocation) Descriptor() ([]byte, []int) {
	return file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescGZIP(), []int{3}
}

func (x *StackTraceFileLocation) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *StackTraceFileLocation) GetLine() int32 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *StackTraceFileLocation) GetColumn() int32 {
	if x != nil {
		return x.Column
	}
	return 0
}

func (x *StackTraceFileLocation) GetFunctionName() string {
	if x != nil {
		return x.FunctionName
	}
	return ""
}

func (x *StackTraceFileLocation) GetInternalCode() bool {
	if x != nil {
		return x.InternalCode
	}
	return false
}

// Collection of FileLocation messages from a single stack.
type StackTrace struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Collection of `FileLocation`s, each for a stack frame that comprise a stack trace.
	Locations     []*StackTraceFileLocation `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StackTrace) Reset() {
	*x = StackTrace{}
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StackTrace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StackTrace) ProtoMessage() {}

func (x *StackTrace) ProtoReflect() protoreflect.Message {
	mi := &file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StackTrace.ProtoReflect.Descriptor instead.
func (*StackTrace) Descriptor() ([]byte, []int) {
	return file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescGZIP(), []int{4}
}

func (x *StackTrace) GetLocations() []*StackTraceFileLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

var File_temporal_api_sdk_v1_enhanced_stack_trace_proto protoreflect.FileDescriptor

const file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDesc = "" +
	"\n" +
	".temporal/api/sdk/v1/enhanced_stack_trace.proto\x12\x13temporal.api.sdk.v1\"\xbd\x02\n" +
	"\x12EnhancedStackTrace\x128\n" +
	"\x03sdk\x18\x01 \x01(\v2&.temporal.api.sdk.v1.StackTraceSDKInfoR\x03sdk\x12N\n" +
	"\asources\x18\x02 \x03(\v24.temporal.api.sdk.v1.EnhancedStackTrace.SourcesEntryR\asources\x127\n" +
	"\x06stacks\x18\x03 \x03(\v2\x1f.temporal.api.sdk.v1.StackTraceR\x06stacks\x1ad\n" +
	"\fSourcesEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12>\n" +
	"\x05value\x18\x02 \x01(\v2(.temporal.api.sdk.v1.StackTraceFileSliceR\x05value:\x028\x01\"A\n" +
	"\x11StackTraceSDKInfo\x12\x12\n" +
	"\x04name\x18\x01 \x01(\tR\x04name\x12\x18\n" +
	"\aversion\x18\x02 \x01(\tR\aversion\"P\n" +
	"\x13StackTraceFileSlice\x12\x1f\n" +
	"\vline_offset\x18\x01 \x01(\rR\n" +
	"lineOffset\x12\x18\n" +
	"\acontent\x18\x02 \x01(\tR\acontent\"\xab\x01\n" +
	"\x16StackTraceFileLocation\x12\x1b\n" +
	"\tfile_path\x18\x01 \x01(\tR\bfilePath\x12\x12\n" +
	"\x04line\x18\x02 \x01(\x05R\x04line\x12\x16\n" +
	"\x06column\x18\x03 \x01(\x05R\x06column\x12#\n" +
	"\rfunction_name\x18\x04 \x01(\tR\ffunctionName\x12#\n" +
	"\rinternal_code\x18\x05 \x01(\bR\finternalCode\"W\n" +
	"\n" +
	"StackTrace\x12I\n" +
	"\tlocations\x18\x01 \x03(\v2+.temporal.api.sdk.v1.StackTraceFileLocationR\tlocationsB\x85\x01\n" +
	"\x16io.temporal.api.sdk.v1B\x17EnhancedStackTraceProtoP\x01Z\x1dgo.temporal.io/api/sdk/v1;sdk\xaa\x02\x15Temporalio.Api.Sdk.V1\xea\x02\x18Temporalio::Api::Sdk::V1b\x06proto3"

var (
	file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescOnce sync.Once
	file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescData []byte
)

func file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescGZIP() []byte {
	file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescOnce.Do(func() {
		file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDesc), len(file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDesc)))
	})
	return file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDescData
}

var file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_temporal_api_sdk_v1_enhanced_stack_trace_proto_goTypes = []any{
	(*EnhancedStackTrace)(nil),     // 0: temporal.api.sdk.v1.EnhancedStackTrace
	(*StackTraceSDKInfo)(nil),      // 1: temporal.api.sdk.v1.StackTraceSDKInfo
	(*StackTraceFileSlice)(nil),    // 2: temporal.api.sdk.v1.StackTraceFileSlice
	(*StackTraceFileLocation)(nil), // 3: temporal.api.sdk.v1.StackTraceFileLocation
	(*StackTrace)(nil),             // 4: temporal.api.sdk.v1.StackTrace
	nil,                            // 5: temporal.api.sdk.v1.EnhancedStackTrace.SourcesEntry
}
var file_temporal_api_sdk_v1_enhanced_stack_trace_proto_depIdxs = []int32{
	1, // 0: temporal.api.sdk.v1.EnhancedStackTrace.sdk:type_name -> temporal.api.sdk.v1.StackTraceSDKInfo
	5, // 1: temporal.api.sdk.v1.EnhancedStackTrace.sources:type_name -> temporal.api.sdk.v1.EnhancedStackTrace.SourcesEntry
	4, // 2: temporal.api.sdk.v1.EnhancedStackTrace.stacks:type_name -> temporal.api.sdk.v1.StackTrace
	3, // 3: temporal.api.sdk.v1.StackTrace.locations:type_name -> temporal.api.sdk.v1.StackTraceFileLocation
	2, // 4: temporal.api.sdk.v1.EnhancedStackTrace.SourcesEntry.value:type_name -> temporal.api.sdk.v1.StackTraceFileSlice
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_temporal_api_sdk_v1_enhanced_stack_trace_proto_init() }
func file_temporal_api_sdk_v1_enhanced_stack_trace_proto_init() {
	if File_temporal_api_sdk_v1_enhanced_stack_trace_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDesc), len(file_temporal_api_sdk_v1_enhanced_stack_trace_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_temporal_api_sdk_v1_enhanced_stack_trace_proto_goTypes,
		DependencyIndexes: file_temporal_api_sdk_v1_enhanced_stack_trace_proto_depIdxs,
		MessageInfos:      file_temporal_api_sdk_v1_enhanced_stack_trace_proto_msgTypes,
	}.Build()
	File_temporal_api_sdk_v1_enhanced_stack_trace_proto = out.File
	file_temporal_api_sdk_v1_enhanced_stack_trace_proto_goTypes = nil
	file_temporal_api_sdk_v1_enhanced_stack_trace_proto_depIdxs = nil
}
