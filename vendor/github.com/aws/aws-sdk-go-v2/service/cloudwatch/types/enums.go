// Code generated by smithy-go-codegen DO NOT EDIT.

package types

type ActionsSuppressedBy string

// Enum values for ActionsSuppressedBy
const (
	ActionsSuppressedByWaitPeriod      ActionsSuppressedBy = "WaitPeriod"
	ActionsSuppressedByExtensionPeriod ActionsSuppressedBy = "ExtensionPeriod"
	ActionsSuppressedByAlarm           ActionsSuppressedBy = "Alarm"
)

// Values returns all known values for ActionsSuppressedBy. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ActionsSuppressedBy) Values() []ActionsSuppressedBy {
	return []ActionsSuppressedBy{
		"WaitPeriod",
		"ExtensionPeriod",
		"Alarm",
	}
}

type AlarmType string

// Enum values for AlarmType
const (
	AlarmTypeCompositeAlarm AlarmType = "CompositeAlarm"
	AlarmTypeMetricAlarm    AlarmType = "MetricAlarm"
)

// Values returns all known values for AlarmType. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (AlarmType) Values() []AlarmType {
	return []AlarmType{
		"CompositeAlarm",
		"MetricAlarm",
	}
}

type AnomalyDetectorStateValue string

// Enum values for AnomalyDetectorStateValue
const (
	AnomalyDetectorStateValuePendingTraining         AnomalyDetectorStateValue = "PENDING_TRAINING"
	AnomalyDetectorStateValueTrainedInsufficientData AnomalyDetectorStateValue = "TRAINED_INSUFFICIENT_DATA"
	AnomalyDetectorStateValueTrained                 AnomalyDetectorStateValue = "TRAINED"
)

// Values returns all known values for AnomalyDetectorStateValue. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (AnomalyDetectorStateValue) Values() []AnomalyDetectorStateValue {
	return []AnomalyDetectorStateValue{
		"PENDING_TRAINING",
		"TRAINED_INSUFFICIENT_DATA",
		"TRAINED",
	}
}

type AnomalyDetectorType string

// Enum values for AnomalyDetectorType
const (
	AnomalyDetectorTypeSingleMetric AnomalyDetectorType = "SINGLE_METRIC"
	AnomalyDetectorTypeMetricMath   AnomalyDetectorType = "METRIC_MATH"
)

// Values returns all known values for AnomalyDetectorType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (AnomalyDetectorType) Values() []AnomalyDetectorType {
	return []AnomalyDetectorType{
		"SINGLE_METRIC",
		"METRIC_MATH",
	}
}

type ComparisonOperator string

// Enum values for ComparisonOperator
const (
	ComparisonOperatorGreaterThanOrEqualToThreshold            ComparisonOperator = "GreaterThanOrEqualToThreshold"
	ComparisonOperatorGreaterThanThreshold                     ComparisonOperator = "GreaterThanThreshold"
	ComparisonOperatorLessThanThreshold                        ComparisonOperator = "LessThanThreshold"
	ComparisonOperatorLessThanOrEqualToThreshold               ComparisonOperator = "LessThanOrEqualToThreshold"
	ComparisonOperatorLessThanLowerOrGreaterThanUpperThreshold ComparisonOperator = "LessThanLowerOrGreaterThanUpperThreshold"
	ComparisonOperatorLessThanLowerThreshold                   ComparisonOperator = "LessThanLowerThreshold"
	ComparisonOperatorGreaterThanUpperThreshold                ComparisonOperator = "GreaterThanUpperThreshold"
)

// Values returns all known values for ComparisonOperator. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (ComparisonOperator) Values() []ComparisonOperator {
	return []ComparisonOperator{
		"GreaterThanOrEqualToThreshold",
		"GreaterThanThreshold",
		"LessThanThreshold",
		"LessThanOrEqualToThreshold",
		"LessThanLowerOrGreaterThanUpperThreshold",
		"LessThanLowerThreshold",
		"GreaterThanUpperThreshold",
	}
}

type EvaluationState string

// Enum values for EvaluationState
const (
	EvaluationStatePartialData EvaluationState = "PARTIAL_DATA"
)

// Values returns all known values for EvaluationState. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (EvaluationState) Values() []EvaluationState {
	return []EvaluationState{
		"PARTIAL_DATA",
	}
}

type HistoryItemType string

// Enum values for HistoryItemType
const (
	HistoryItemTypeConfigurationUpdate HistoryItemType = "ConfigurationUpdate"
	HistoryItemTypeStateUpdate         HistoryItemType = "StateUpdate"
	HistoryItemTypeAction              HistoryItemType = "Action"
)

// Values returns all known values for HistoryItemType. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (HistoryItemType) Values() []HistoryItemType {
	return []HistoryItemType{
		"ConfigurationUpdate",
		"StateUpdate",
		"Action",
	}
}

type MetricStreamOutputFormat string

// Enum values for MetricStreamOutputFormat
const (
	MetricStreamOutputFormatJson            MetricStreamOutputFormat = "json"
	MetricStreamOutputFormatOpenTelemetry07 MetricStreamOutputFormat = "opentelemetry0.7"
)

// Values returns all known values for MetricStreamOutputFormat. Note that this
// can be expanded in the future, and so it is only as up to date as the client.
// The ordering of this slice is not guaranteed to be stable across updates.
func (MetricStreamOutputFormat) Values() []MetricStreamOutputFormat {
	return []MetricStreamOutputFormat{
		"json",
		"opentelemetry0.7",
	}
}

type RecentlyActive string

// Enum values for RecentlyActive
const (
	RecentlyActivePt3h RecentlyActive = "PT3H"
)

// Values returns all known values for RecentlyActive. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (RecentlyActive) Values() []RecentlyActive {
	return []RecentlyActive{
		"PT3H",
	}
}

type ScanBy string

// Enum values for ScanBy
const (
	ScanByTimestampDescending ScanBy = "TimestampDescending"
	ScanByTimestampAscending  ScanBy = "TimestampAscending"
)

// Values returns all known values for ScanBy. Note that this can be expanded in
// the future, and so it is only as up to date as the client. The ordering of this
// slice is not guaranteed to be stable across updates.
func (ScanBy) Values() []ScanBy {
	return []ScanBy{
		"TimestampDescending",
		"TimestampAscending",
	}
}

type StandardUnit string

// Enum values for StandardUnit
const (
	StandardUnitSeconds         StandardUnit = "Seconds"
	StandardUnitMicroseconds    StandardUnit = "Microseconds"
	StandardUnitMilliseconds    StandardUnit = "Milliseconds"
	StandardUnitBytes           StandardUnit = "Bytes"
	StandardUnitKilobytes       StandardUnit = "Kilobytes"
	StandardUnitMegabytes       StandardUnit = "Megabytes"
	StandardUnitGigabytes       StandardUnit = "Gigabytes"
	StandardUnitTerabytes       StandardUnit = "Terabytes"
	StandardUnitBits            StandardUnit = "Bits"
	StandardUnitKilobits        StandardUnit = "Kilobits"
	StandardUnitMegabits        StandardUnit = "Megabits"
	StandardUnitGigabits        StandardUnit = "Gigabits"
	StandardUnitTerabits        StandardUnit = "Terabits"
	StandardUnitPercent         StandardUnit = "Percent"
	StandardUnitCount           StandardUnit = "Count"
	StandardUnitBytesSecond     StandardUnit = "Bytes/Second"
	StandardUnitKilobytesSecond StandardUnit = "Kilobytes/Second"
	StandardUnitMegabytesSecond StandardUnit = "Megabytes/Second"
	StandardUnitGigabytesSecond StandardUnit = "Gigabytes/Second"
	StandardUnitTerabytesSecond StandardUnit = "Terabytes/Second"
	StandardUnitBitsSecond      StandardUnit = "Bits/Second"
	StandardUnitKilobitsSecond  StandardUnit = "Kilobits/Second"
	StandardUnitMegabitsSecond  StandardUnit = "Megabits/Second"
	StandardUnitGigabitsSecond  StandardUnit = "Gigabits/Second"
	StandardUnitTerabitsSecond  StandardUnit = "Terabits/Second"
	StandardUnitCountSecond     StandardUnit = "Count/Second"
	StandardUnitNone            StandardUnit = "None"
)

// Values returns all known values for StandardUnit. Note that this can be
// expanded in the future, and so it is only as up to date as the client. The
// ordering of this slice is not guaranteed to be stable across updates.
func (StandardUnit) Values() []StandardUnit {
	return []StandardUnit{
		"Seconds",
		"Microseconds",
		"Milliseconds",
		"Bytes",
		"Kilobytes",
		"Megabytes",
		"Gigabytes",
		"Terabytes",
		"Bits",
		"Kilobits",
		"Megabits",
		"Gigabits",
		"Terabits",
		"Percent",
		"Count",
		"Bytes/Second",
		"Kilobytes/Second",
		"Megabytes/Second",
		"Gigabytes/Second",
		"Terabytes/Second",
		"Bits/Second",
		"Kilobits/Second",
		"Megabits/Second",
		"Gigabits/Second",
		"Terabits/Second",
		"Count/Second",
		"None",
	}
}

type StateValue string

// Enum values for StateValue
const (
	StateValueOk               StateValue = "OK"
	StateValueAlarm            StateValue = "ALARM"
	StateValueInsufficientData StateValue = "INSUFFICIENT_DATA"
)

// Values returns all known values for StateValue. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (StateValue) Values() []StateValue {
	return []StateValue{
		"OK",
		"ALARM",
		"INSUFFICIENT_DATA",
	}
}

type Statistic string

// Enum values for Statistic
const (
	StatisticSampleCount Statistic = "SampleCount"
	StatisticAverage     Statistic = "Average"
	StatisticSum         Statistic = "Sum"
	StatisticMinimum     Statistic = "Minimum"
	StatisticMaximum     Statistic = "Maximum"
)

// Values returns all known values for Statistic. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (Statistic) Values() []Statistic {
	return []Statistic{
		"SampleCount",
		"Average",
		"Sum",
		"Minimum",
		"Maximum",
	}
}

type StatusCode string

// Enum values for StatusCode
const (
	StatusCodeComplete      StatusCode = "Complete"
	StatusCodeInternalError StatusCode = "InternalError"
	StatusCodePartialData   StatusCode = "PartialData"
	StatusCodeForbidden     StatusCode = "Forbidden"
)

// Values returns all known values for StatusCode. Note that this can be expanded
// in the future, and so it is only as up to date as the client. The ordering of
// this slice is not guaranteed to be stable across updates.
func (StatusCode) Values() []StatusCode {
	return []StatusCode{
		"Complete",
		"InternalError",
		"PartialData",
		"Forbidden",
	}
}
