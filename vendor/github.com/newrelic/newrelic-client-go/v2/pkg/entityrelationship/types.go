// Code generated by tutone: DO NOT EDIT
package entityrelationship

// EntityRelationshipEdgeType - The type of the relationship.
type EntityRelationshipEdgeType string

var EntityRelationshipEdgeTypeTypes = struct {
	// The target entity contains the code for the source entity.
	BUILT_FROM EntityRelationshipEdgeType
	// The source entity bypasses the target entity.
	BYPASS_CALLS EntityRelationshipEdgeType
	// The source entity calls the target entity.
	CALLS EntityRelationshipEdgeType
	// The source entity has a connection to the target entity.
	CONNECTS_TO EntityRelationshipEdgeType
	// The source entity consumes messages from a target kafka topic or other queue systems.
	CONSUMES EntityRelationshipEdgeType
	// The source entity contains the target entity.
	CONTAINS EntityRelationshipEdgeType
	// The source entity hosts the target.
	HOSTS EntityRelationshipEdgeType
	// The source and target entities are perspectives on the same thing.
	IS EntityRelationshipEdgeType
	// The source entity manages the target, that represents a subsystem of the source.
	MANAGES EntityRelationshipEdgeType
	// The source entity is used to measure the target entity.
	MEASURES EntityRelationshipEdgeType
	// The source entity monitors the target entity.
	MONITORS EntityRelationshipEdgeType
	// The source operates in the target entity, e.g. a region or a data center.
	OPERATES_IN EntityRelationshipEdgeType
	// The source entity owns the target entity.
	OWNS EntityRelationshipEdgeType
	// The source entity produces messages to a target kafka topic or other queue systems.
	PRODUCES EntityRelationshipEdgeType
	// The source is an Application that serves the target Browser application.
	SERVES EntityRelationshipEdgeType
	// The source entity initiates an action in the target entity.
	TRIGGERS EntityRelationshipEdgeType
}{
	// The target entity contains the code for the source entity.
	BUILT_FROM: "BUILT_FROM",
	// The source entity bypasses the target entity.
	BYPASS_CALLS: "BYPASS_CALLS",
	// The source entity calls the target entity.
	CALLS: "CALLS",
	// The source entity has a connection to the target entity.
	CONNECTS_TO: "CONNECTS_TO",
	// The source entity consumes messages from a target kafka topic or other queue systems.
	CONSUMES: "CONSUMES",
	// The source entity contains the target entity.
	CONTAINS: "CONTAINS",
	// The source entity hosts the target.
	HOSTS: "HOSTS",
	// The source and target entities are perspectives on the same thing.
	IS: "IS",
	// The source entity manages the target, that represents a subsystem of the source.
	MANAGES: "MANAGES",
	// The source entity is used to measure the target entity.
	MEASURES: "MEASURES",
	// The source entity monitors the target entity.
	MONITORS: "MONITORS",
	// The source operates in the target entity, e.g. a region or a data center.
	OPERATES_IN: "OPERATES_IN",
	// The source entity owns the target entity.
	OWNS: "OWNS",
	// The source entity produces messages to a target kafka topic or other queue systems.
	PRODUCES: "PRODUCES",
	// The source is an Application that serves the target Browser application.
	SERVES: "SERVES",
	// The source entity initiates an action in the target entity.
	TRIGGERS: "TRIGGERS",
}

// EntityRelationshipUserDefinedCreateOrReplaceErrorType - The different error types for the entityRelationshipUserDefinedCreateOrReplace mutation.
type EntityRelationshipUserDefinedCreateOrReplaceErrorType string

var EntityRelationshipUserDefinedCreateOrReplaceErrorTypeTypes = struct {
	// Number of user-defined relationships for a given entity has exceeded the limit (2000 relationships).
	LIMIT_EXCEEDED EntityRelationshipUserDefinedCreateOrReplaceErrorType
	// The operation is not allowed.
	NOT_ALLOWED EntityRelationshipUserDefinedCreateOrReplaceErrorType
	// The user does not have permissions to perform the operation.
	NOT_AUTHORIZED EntityRelationshipUserDefinedCreateOrReplaceErrorType
}{
	// Number of user-defined relationships for a given entity has exceeded the limit (2000 relationships).
	LIMIT_EXCEEDED: "LIMIT_EXCEEDED",
	// The operation is not allowed.
	NOT_ALLOWED: "NOT_ALLOWED",
	// The user does not have permissions to perform the operation.
	NOT_AUTHORIZED: "NOT_AUTHORIZED",
}

// EntityRelationshipUserDefinedDeleteErrorType - The different error types for the entityRelationshipUserDefinedDelete mutation.
type EntityRelationshipUserDefinedDeleteErrorType string

var EntityRelationshipUserDefinedDeleteErrorTypeTypes = struct {
	// The user does not have permissions to perform the operation.
	NOT_AUTHORIZED EntityRelationshipUserDefinedDeleteErrorType
}{
	// The user does not have permissions to perform the operation.
	NOT_AUTHORIZED: "NOT_AUTHORIZED",
}

// EntityRelationshipUserDefinedCreateOrReplaceResult - The result of the entityRelationshipUserDefinedCreateOrReplace mutation.
type EntityRelationshipUserDefinedCreateOrReplaceResult struct {
	// The list of errors that occurred when executing the mutation.
	Errors []EntityRelationshipUserDefinedCreateOrReplaceResultError `json:"errors"`
}

// EntityRelationshipUserDefinedCreateOrReplaceResultError - The entityRelationshipUserDefinedCreateOrReplace result error.
type EntityRelationshipUserDefinedCreateOrReplaceResultError struct {
	// A message explaining what the error is about.
	Message string `json:"message"`
	// The mutation error type.
	Type EntityRelationshipUserDefinedCreateOrReplaceErrorType `json:"type"`
}

// EntityRelationshipUserDefinedDeleteResult - The result of the entityRelationshipUserDefinedDelete mutation.
type EntityRelationshipUserDefinedDeleteResult struct {
	// The list of errors that occurred when executing the mutation.
	Errors []EntityRelationshipUserDefinedDeleteResultError `json:"errors"`
}

// EntityRelationshipUserDefinedDeleteResultError - The entityRelationshipUserDefinedDelete result error.
type EntityRelationshipUserDefinedDeleteResultError struct {
	// A message explaining what the error is about.
	Message string `json:"message"`
	// The mutation error type.
	Type EntityRelationshipUserDefinedDeleteErrorType `json:"type"`
}
