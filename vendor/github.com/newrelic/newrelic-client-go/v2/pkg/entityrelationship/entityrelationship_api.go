// Code generated by tutone: DO NOT EDIT
package entityrelationship

import (
	"context"

	"github.com/newrelic/newrelic-client-go/v2/pkg/common"
)

// Create a relationship between entities.
func (a *Entityrelationship) EntityRelationshipUserDefinedCreateOrReplace(
	sourceEntityGUID common.EntityGUID,
	targetEntityGUID common.EntityGUID,
	relationtype EntityRelationshipEdgeType,
) (*EntityRelationshipUserDefinedCreateOrReplaceResult, error) {
	return a.EntityRelationshipUserDefinedCreateOrReplaceWithContext(context.Background(),
		sourceEntityGUID,
		targetEntityGUID,
		relationtype,
	)
}

// Create a relationship between entities.
func (a *Entityrelationship) EntityRelationshipUserDefinedCreateOrReplaceWithContext(
	ctx context.Context,
	sourceEntityGUID common.EntityGUID,
	targetEntityGUID common.EntityGUID,
	relationtype EntityRelationshipEdgeType,
) (*EntityRelationshipUserDefinedCreateOrReplaceResult, error) {

	resp := EntityRelationshipUserDefinedCreateOrReplaceQueryResponse{}
	vars := map[string]interface{}{
		"sourceEntityGuid": sourceEntityGUID,
		"targetEntityGuid": targetEntityGUID,
		"type":             relationtype,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EntityRelationshipUserDefinedCreateOrReplaceMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EntityRelationshipUserDefinedCreateOrReplaceResult, nil
}

type EntityRelationshipUserDefinedCreateOrReplaceQueryResponse struct {
	EntityRelationshipUserDefinedCreateOrReplaceResult EntityRelationshipUserDefinedCreateOrReplaceResult `json:"EntityRelationshipUserDefinedCreateOrReplace"`
}

const EntityRelationshipUserDefinedCreateOrReplaceMutation = `mutation(
	$sourceEntityGuid: EntityGuid!,
	$targetEntityGuid: EntityGuid!,
	$type: EntityRelationshipEdgeType!,
) { entityRelationshipUserDefinedCreateOrReplace(
	sourceEntityGuid: $sourceEntityGuid,
	targetEntityGuid: $targetEntityGuid,
	type: $type,
) {
	errors {
		message
		type
	}
} }`

// Delete a relationship between entities. If no type is provided, it will delete all relationships between source and target.
func (a *Entityrelationship) EntityRelationshipUserDefinedDelete(
	sourceEntityGUID common.EntityGUID,
	targetEntityGUID common.EntityGUID,
	relationtype EntityRelationshipEdgeType,
) (*EntityRelationshipUserDefinedDeleteResult, error) {
	return a.EntityRelationshipUserDefinedDeleteWithContext(context.Background(),
		sourceEntityGUID,
		targetEntityGUID,
		relationtype,
	)
}

// Delete a relationship between entities. If no type is provided, it will delete all relationships between source and target.
func (a *Entityrelationship) EntityRelationshipUserDefinedDeleteWithContext(
	ctx context.Context,
	sourceEntityGUID common.EntityGUID,
	targetEntityGUID common.EntityGUID,
	relationtype EntityRelationshipEdgeType,
) (*EntityRelationshipUserDefinedDeleteResult, error) {

	resp := EntityRelationshipUserDefinedDeleteQueryResponse{}
	vars := map[string]interface{}{
		"sourceEntityGuid": sourceEntityGUID,
		"targetEntityGuid": targetEntityGUID,
		"type":             relationtype,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EntityRelationshipUserDefinedDeleteMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EntityRelationshipUserDefinedDeleteResult, nil
}

type EntityRelationshipUserDefinedDeleteQueryResponse struct {
	EntityRelationshipUserDefinedDeleteResult EntityRelationshipUserDefinedDeleteResult `json:"EntityRelationshipUserDefinedDelete"`
}

const EntityRelationshipUserDefinedDeleteMutation = `mutation(
	$sourceEntityGuid: EntityGuid!,
	$targetEntityGuid: EntityGuid!,
	$type: EntityRelationshipEdgeType,
) { entityRelationshipUserDefinedDelete(
	sourceEntityGuid: $sourceEntityGuid,
	targetEntityGuid: $targetEntityGuid,
	type: $type,
) {
	errors {
		message
		type
	}
} }`
