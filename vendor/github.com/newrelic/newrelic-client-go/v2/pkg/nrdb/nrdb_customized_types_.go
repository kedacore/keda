// Code *NOT* generated by tutone
package nrdb

import (
	"encoding/json"
	"fmt"
)

// NRDBMultiResultCustomized represents a collection of NRDB results.
// This type specifically handles cases where the API returns arrays of NRDBResult objects,
// which happens with certain NRQL queries (particularly those combining FACET and TIMESERIES).
type NRDBMultiResultCustomized []NRDBResult

// NRDBResultContainerMultiResultCustomized is a specialized container for NRQL query results
// that handles the variable format of otherResult and totalResult fields.
//
// This container handles cases where the API might return otherResult and totalResult
// as either a single object or an array. For consistency and improved consumer experience,
// these fields are always presented as arrays (NRDBMultiResultCustomized) even if the API returns
// a single object.
type NRDBResultContainerMultiResultCustomized struct {
	// In a `COMPARE WITH` query, the `currentResults` contain the results for the current comparison time window.
	CurrentResults []NRDBResult `json:"currentResults,omitempty"`
	// Generate a publicly sharable Embedded Chart URL for the NRQL query.
	EmbeddedChartURL string `json:"embeddedChartUrl,omitempty"`
	// Retrieve a list of event type definitions
	EventDefinitions []EventDefinition `json:"eventDefinitions,omitempty"`
	// Metadata about the query and result.
	Metadata NRDBMetadata `json:"metadata,omitempty"`
	// The NRQL query that was executed to yield these results.
	NRQL NRQL `json:"nrql,omitempty"`
	// OtherResult contains the aggregates representing the events _not_ contained in an individual `results` facet.
	//
	// IMPORTANT: This field is always a collection of NRDBResult objects (NRDBMultiResultCustomized).
	// - For standard queries or FACET-only/TIMESERIES-only queries where the API returns a single object,
	//   that object is wrapped in an array with one element
	// - For queries combining both FACET and TIMESERIES clauses where the API returns an array,
	//   the array is used directly
	OtherResult NRDBMultiResultCustomized `json:"otherResult,omitempty"`
	// In a `COMPARE WITH` query, the `previousResults` contain the results for the previous comparison time window.
	PreviousResults []NRDBResult `json:"previousResults,omitempty"`
	// Metadata about the execution of an asynchronous NRQL query.
	QueryProgress NRDBQueryProgress `json:"queryProgress,omitempty"`
	// The raw query results exactly as they are returned from NRDB.
	RawResponse NRDBRawResults `json:"rawResponse,omitempty"`
	// The query results. This is a flat list of objects that match the query submitted.
	Results []NRDBResult `json:"results,omitempty"`
	// Generate a publicly sharable static chart URL for the NRQL query.
	StaticChartURL string `json:"staticChartUrl,omitempty"`
	// Retrieve a list of suggested NRQL facets for this NRDB query
	SuggestedFacets []NRQLFacetSuggestion `json:"suggestedFacets,omitempty"`
	// Suggested queries that could help explain an anomaly
	SuggestedQueries SuggestedNRQLQueryResponse `json:"suggestedQueries,omitempty"`
	// TotalResult contains the aggregates representing _all_ the events in the query results.
	//
	// IMPORTANT: This field is always a collection of NRDBResult objects (NRDBMultiResultCustomized).
	// - For standard queries or FACET-only/TIMESERIES-only queries where the API returns a single object,
	//   that object is wrapped in an array with one element
	// - For queries combining both FACET and TIMESERIES clauses where the API returns an array,
	//   the array is used directly
	TotalResult NRDBMultiResultCustomized `json:"totalResult,omitempty"`
}

// UnmarshalJSON implements custom JSON unmarshalling for NRDBResultContainerMultiResultCustomized.
// This method handles cases where otherResult and totalResult can be either
// a single object or an array of objects in the API response.
//
// For consistency, the unmarshaler always converts these fields to NRDBMultiResultCustomized:
// - When a single object is encountered, it's wrapped in an array with one element
// - When an array is encountered, it's used as-is
// - When the field is null or missing, an empty array is used
//
// This simplifies usage by providing a consistent array interface regardless of the API response format.
func (n *NRDBResultContainerMultiResultCustomized) UnmarshalJSON(data []byte) error {
	type Alias NRDBResultContainerMultiResultCustomized
	aux := &struct {
		TotalResult json.RawMessage `json:"totalResult,omitempty"`
		OtherResult json.RawMessage `json:"otherResult,omitempty"`
		*Alias
	}{
		Alias: (*Alias)(n),
	}

	// Initialize arrays to empty to ensure they're never nil
	n.OtherResult = NRDBMultiResultCustomized{}
	n.TotalResult = NRDBMultiResultCustomized{}

	if err := json.Unmarshal(data, &aux); err != nil {
		return err
	}

	// Handle TotalResult - first try to unmarshal as array, then as single object
	if len(aux.TotalResult) > 0 && string(aux.TotalResult) != "null" {
		// Try as array first
		var multipleTotalResults NRDBMultiResultCustomized
		if err := json.Unmarshal(aux.TotalResult, &multipleTotalResults); err == nil {
			// Successfully unmarshaled as array
			n.TotalResult = multipleTotalResults
		} else {
			// Try as single object
			var singleTotalResult NRDBResult
			if err := json.Unmarshal(aux.TotalResult, &singleTotalResult); err == nil {
				// Successfully unmarshaled as single object, wrap in array
				n.TotalResult = NRDBMultiResultCustomized{singleTotalResult}
			} else {
				return fmt.Errorf("failed to unmarshal TotalResult as either NRDBMultiResultCustomized or NRDBResult: %v", err)
			}
		}
	}

	// Handle OtherResult - first try to unmarshal as array, then as single object
	if len(aux.OtherResult) > 0 && string(aux.OtherResult) != "null" {
		// Try as array first
		var multipleOtherResults NRDBMultiResultCustomized
		if err := json.Unmarshal(aux.OtherResult, &multipleOtherResults); err == nil {
			// Successfully unmarshaled as array
			n.OtherResult = multipleOtherResults
		} else {
			// Try as single object
			var singleOtherResult NRDBResult
			if err := json.Unmarshal(aux.OtherResult, &singleOtherResult); err == nil {
				// Successfully unmarshaled as single object, wrap in array
				n.OtherResult = NRDBMultiResultCustomized{singleOtherResult}
			} else {
				return fmt.Errorf("failed to unmarshal OtherResult as either NRDBMultiResultCustomized or NRDBResult: %v", err)
			}
		}
	}

	return nil
}
