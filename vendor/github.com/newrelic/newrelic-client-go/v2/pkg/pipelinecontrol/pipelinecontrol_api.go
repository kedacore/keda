// Code generated by tutone: DO NOT EDIT
package pipelinecontrol

import "context"

// Creates an entity of type PipelineCloudRuleEntity.
func (a *Pipelinecontrol) EntityManagementCreatePipelineCloudRule(
	pipelineCloudRuleEntity EntityManagementPipelineCloudRuleEntityCreateInput,
) (*EntityManagementPipelineCloudRuleEntityCreateResult, error) {
	return a.EntityManagementCreatePipelineCloudRuleWithContext(context.Background(),
		pipelineCloudRuleEntity,
	)
}

// Creates an entity of type PipelineCloudRuleEntity.
func (a *Pipelinecontrol) EntityManagementCreatePipelineCloudRuleWithContext(
	ctx context.Context,
	pipelineCloudRuleEntity EntityManagementPipelineCloudRuleEntityCreateInput,
) (*EntityManagementPipelineCloudRuleEntityCreateResult, error) {

	resp := EntityManagementCreatePipelineCloudRuleQueryResponse{}
	vars := map[string]interface{}{
		"pipelineCloudRuleEntity": pipelineCloudRuleEntity,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EntityManagementCreatePipelineCloudRuleMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EntityManagementPipelineCloudRuleEntityCreateResult, nil
}

type EntityManagementCreatePipelineCloudRuleQueryResponse struct {
	EntityManagementPipelineCloudRuleEntityCreateResult EntityManagementPipelineCloudRuleEntityCreateResult `json:"EntityManagementCreatePipelineCloudRule"`
}

const EntityManagementCreatePipelineCloudRuleMutation = `mutation(
	$pipelineCloudRuleEntity: EntityManagementPipelineCloudRuleEntityCreateInput!,
) { entityManagementCreatePipelineCloudRule(
	pipelineCloudRuleEntity: $pipelineCloudRuleEntity,
) {
	entity {
		description
		id
		metadata {
			createdAt
			createdBy {
				__typename
				id
				... on EntityManagementSystemActor {
					__typename
				}
				... on EntityManagementUserActor {
					__typename
				}
			}
			updatedAt
			updatedBy {
				__typename
				id
				... on EntityManagementSystemActor {
					__typename
				}
				... on EntityManagementUserActor {
					__typename
				}
			}
			version
		}
		name
		nrql
		scope {
			id
			type
		}
		tags {
			key
			values
		}
		type
	}
} }`

// Deletes an entity.
func (a *Pipelinecontrol) EntityManagementDelete(
	iD string,
	// version int,
) (*EntityManagementEntityDeleteResult, error) {
	return a.EntityManagementDeleteWithContext(context.Background(), iD)
}

// Deletes an entity.
func (a *Pipelinecontrol) EntityManagementDeleteWithContext(
	ctx context.Context,
	iD string,
	// version int,
) (*EntityManagementEntityDeleteResult, error) {

	resp := EntityManagementDeleteQueryResponse{}
	vars := map[string]interface{}{
		"id": iD,
		// "version": version,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EntityManagementDeleteMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EntityManagementEntityDeleteResult, nil
}

type EntityManagementDeleteQueryResponse struct {
	EntityManagementEntityDeleteResult EntityManagementEntityDeleteResult `json:"EntityManagementDelete"`
}

const EntityManagementDeleteMutation = `mutation(
	$id: ID!,
	$version: Int,
) { entityManagementDelete(
	id: $id,
	version: $version,
) {
	id
} }`

// Updates an entity of type PipelineCloudRuleEntity.
func (a *Pipelinecontrol) EntityManagementUpdatePipelineCloudRule(
	iD string,
	pipelineCloudRuleEntity EntityManagementPipelineCloudRuleEntityUpdateInput,
	// version int,
) (*EntityManagementPipelineCloudRuleEntityUpdateResult, error) {
	return a.EntityManagementUpdatePipelineCloudRuleWithContext(context.Background(),
		iD,
		pipelineCloudRuleEntity,
		// version,
	)
}

// Updates an entity of type PipelineCloudRuleEntity.
func (a *Pipelinecontrol) EntityManagementUpdatePipelineCloudRuleWithContext(
	ctx context.Context,
	iD string,
	pipelineCloudRuleEntity EntityManagementPipelineCloudRuleEntityUpdateInput,
	// version int,
) (*EntityManagementPipelineCloudRuleEntityUpdateResult, error) {

	resp := EntityManagementUpdatePipelineCloudRuleQueryResponse{}
	vars := map[string]interface{}{
		"id":                      iD,
		"pipelineCloudRuleEntity": pipelineCloudRuleEntity,
		// "version":                 version,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, EntityManagementUpdatePipelineCloudRuleMutation, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.EntityManagementPipelineCloudRuleEntityUpdateResult, nil
}

type EntityManagementUpdatePipelineCloudRuleQueryResponse struct {
	EntityManagementPipelineCloudRuleEntityUpdateResult EntityManagementPipelineCloudRuleEntityUpdateResult `json:"EntityManagementUpdatePipelineCloudRule"`
}

const EntityManagementUpdatePipelineCloudRuleMutation = `mutation(
	$id: ID!,
	$pipelineCloudRuleEntity: EntityManagementPipelineCloudRuleEntityUpdateInput!,
	$version: Int,
) { entityManagementUpdatePipelineCloudRule(
	id: $id,
	pipelineCloudRuleEntity: $pipelineCloudRuleEntity,
	version: $version,
) {
	entity {
		description
		id
		metadata {
			createdAt
			createdBy {
				__typename
				id
				... on EntityManagementSystemActor {
					__typename
				}
				... on EntityManagementUserActor {
					__typename
				}
			}
			updatedAt
			updatedBy {
				__typename
				id
				... on EntityManagementSystemActor {
					__typename
				}
				... on EntityManagementUserActor {
					__typename
				}
			}
			version
		}
		name
		nrql
		scope {
			id
			type
		}
		tags {
			key
			values
		}
		type
	}
} }`

// Retrieves an entity.
func (a *Pipelinecontrol) GetEntity(
	iD string,
) (*EntityManagementEntityInterface, error) {
	return a.GetEntityWithContext(context.Background(),
		iD,
	)
}

// Retrieves an entity.
func (a *Pipelinecontrol) GetEntityWithContext(
	ctx context.Context,
	iD string,
) (*EntityManagementEntityInterface, error) {

	resp := entityResponse{}
	vars := map[string]interface{}{
		"id": iD,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, getEntityQuery, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.Actor.EntityManagement.Entity, nil
}

const getEntityQuery = `query(
	$id: ID!,
) { actor { entityManagement { entity(
	id: $id,
) {
	id
	metadata {
		createdAt
		createdBy {
			__typename
			id
			... on EntityManagementSystemActor {
				__typename
			}
			... on EntityManagementUserActor {
				__typename
			}
		}
		updatedAt
		updatedBy {
			__typename
			id
			... on EntityManagementSystemActor {
				__typename
			}
			... on EntityManagementUserActor {
				__typename
			}
		}
		version
	}
	name
	scope {
		id
		type
	}
	tags {
		key
		values
	}
	type
	... on EntityManagementPipelineCloudRuleEntity {
		__typename
		description
		metadata {
			createdAt
			createdBy {
				__typename
				id
				... on EntityManagementSystemActor {
					__typename
				}
				... on EntityManagementUserActor {
					__typename
				}
			}
			updatedAt
			updatedBy {
				__typename
				id
				... on EntityManagementSystemActor {
					__typename
				}
				... on EntityManagementUserActor {
					__typename
				}
			}
			version
		}
		nrql
		scope {
			id
			type
		}
		tags {
			key
			values
		}
	}
} } } }`

// Retrieves a set of entities that match the given query predicate.
func (a *Pipelinecontrol) GetEntitySearch(
	cursor string,
	query string,
) (*EntityManagementEntitySearchResult, error) {
	return a.GetEntitySearchWithContext(context.Background(),
		cursor,
		query,
	)
}

// Retrieves a set of entities that match the given query predicate.
func (a *Pipelinecontrol) GetEntitySearchWithContext(
	ctx context.Context,
	cursor string,
	query string,
) (*EntityManagementEntitySearchResult, error) {

	resp := entitySearchResponse{}
	vars := map[string]interface{}{
		"cursor": cursor,
		"query":  query,
	}

	if err := a.client.NerdGraphQueryWithContext(ctx, getEntitySearchQuery, vars, &resp); err != nil {
		return nil, err
	}

	return &resp.Actor.EntityManagement.EntitySearch, nil
}

const getEntitySearchQuery = `query(
	$query: String!,
) { actor { entityManagement { entitySearch(
	query: $query,
) {
	entities {
		__typename
		id
		metadata {
			createdAt
			createdBy {
				__typename
				id
				... on EntityManagementSystemActor {
					__typename
				}
				... on EntityManagementUserActor {
					__typename
				}
			}
			updatedAt
			updatedBy {
				__typename
				id
				... on EntityManagementSystemActor {
					__typename
				}
				... on EntityManagementUserActor {
					__typename
				}
			}
			version
		}
		name
		scope {
			id
			type
		}
		tags {
			key
			values
		}
		type
		... on EntityManagementPipelineCloudRuleEntity {
			__typename
			description
			metadata {
				createdAt
				createdBy {
					__typename
					id
					... on EntityManagementSystemActor {
						__typename
					}
					... on EntityManagementUserActor {
						__typename
					}
				}
				updatedAt
				updatedBy {
					__typename
					id
					... on EntityManagementSystemActor {
						__typename
					}
					... on EntityManagementUserActor {
						__typename
					}
				}
				version
			}
			nrql
			scope {
				id
				type
			}
			tags {
				key
				values
			}
		}
	}
	nextCursor
} } } }`
