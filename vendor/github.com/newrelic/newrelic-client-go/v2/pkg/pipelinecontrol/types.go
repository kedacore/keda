// Code generated by tutone: DO NOT EDIT
package pipelinecontrol

import (
	"encoding/json"
	"fmt"

	"github.com/newrelic/newrelic-client-go/v2/pkg/nrdb"
	"github.com/newrelic/newrelic-client-go/v2/pkg/nrtime"
)

// AgentApplicationSegmentsListType - Allow lists have two different types. They are either internal lists or user lists.
type AgentApplicationSegmentsListType string

var AgentApplicationSegmentsListTypeTypes = struct {
	// INTERNAL refers to a list that has been generated by New Relic.
	INTERNAL AgentApplicationSegmentsListType
	// USER refers to a list that has been generated by the customer.
	USER AgentApplicationSegmentsListType
}{
	// INTERNAL refers to a list that has been generated by New Relic.
	INTERNAL: "INTERNAL",
	// USER refers to a list that has been generated by the customer.
	USER: "USER",
}

// AgentApplicationSettingsBrowserLoader - Determines which browser loader will be configured. Some allowed return values are specified for backwards-compatability and do not represent currently allowed values for new applications.
// See [documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/installation/install-browser-monitoring-agent/#agent-types) for further information.
type AgentApplicationSettingsBrowserLoader string

var AgentApplicationSettingsBrowserLoaderTypes = struct {
	// Use PRO instead
	FULL AgentApplicationSettingsBrowserLoader
	// Lite: Gives you information about some basic page load timing and browser user information. Lacks the Browser Pro features and SPA features.
	LITE AgentApplicationSettingsBrowserLoader
	// Don't use an agent.
	NONE AgentApplicationSettingsBrowserLoader
	// Pro: Gives you access to the Browser Pro features. Lacks the functionality designed for single page app monitoring.
	PRO AgentApplicationSettingsBrowserLoader
	// This value is no longer in use.
	RUM AgentApplicationSettingsBrowserLoader
	// Pro+SPA: This is the default installed agent when you enable browser monitoring. Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications.
	SPA AgentApplicationSettingsBrowserLoader
	// This value is specified for backwards-compatability.
	XHR AgentApplicationSettingsBrowserLoader
}{
	// Use PRO instead
	FULL: "FULL",
	// Lite: Gives you information about some basic page load timing and browser user information. Lacks the Browser Pro features and SPA features.
	LITE: "LITE",
	// Don't use an agent.
	NONE: "NONE",
	// Pro: Gives you access to the Browser Pro features. Lacks the functionality designed for single page app monitoring.
	PRO: "PRO",
	// This value is no longer in use.
	RUM: "RUM",
	// Pro+SPA: This is the default installed agent when you enable browser monitoring. Gives you access to all of the Browser Pro features and to Single Page App (SPA) monitoring. Provides detailed page timing data and the most up-to-date New Relic features, including distributed tracing, for all types of applications.
	SPA: "SPA",
	// This value is specified for backwards-compatability.
	XHR: "XHR",
}

// AgentApplicationSettingsMobileSessionReplayMode - Determines the mode for session replay mobile applications. Valid settings are: 'DEFAULT', 'CUSTOM'.
type AgentApplicationSettingsMobileSessionReplayMode string

var AgentApplicationSettingsMobileSessionReplayModeTypes = struct {
	// Custom value of mode in session replay in mobile settings
	CUSTOM AgentApplicationSettingsMobileSessionReplayMode
	// [DEFAULT] Default value of mode in session replay in mobile settings
	DEFAULT AgentApplicationSettingsMobileSessionReplayMode
}{
	// Custom value of mode in session replay in mobile settings
	CUSTOM: "CUSTOM",
	// [DEFAULT] Default value of mode in session replay in mobile settings
	DEFAULT: "DEFAULT",
}

// AgentApplicationSettingsNetworkFilterMode - Configuration setting to apply either the show or hide strategy for network filtering.
type AgentApplicationSettingsNetworkFilterMode string

var AgentApplicationSettingsNetworkFilterModeTypes = struct {
	// Disables both show and hide confurations.
	DISABLED AgentApplicationSettingsNetworkFilterMode
	// Use the hide list configuration.
	HIDE AgentApplicationSettingsNetworkFilterMode
	// Use the show list configuration.
	SHOW AgentApplicationSettingsNetworkFilterMode
}{
	// Disables both show and hide confurations.
	DISABLED: "DISABLED",
	// Use the hide list configuration.
	HIDE: "HIDE",
	// Use the show list configuration.
	SHOW: "SHOW",
}

// AgentApplicationSettingsRecordSqlEnum - Obfuscation level for SQL queries reported in transaction trace nodes.
//
// When turned on, the New Relic agent will attempt to remove values from SQL qeries.
//
// For example:
//
// ```
// SELECT * FROM Table WHERE ssn='123-45-6789'
// ```
//
// might become:
//
// ```
// SELECT * FROM Table WHERE ssn=?
// ```
//
// This can behave differently for differnet applications and frameworks. Please test for your specific case.
// Note: RAW collection is not campatible with High Security mode and cannot be set if your agent is running in that mode.
type AgentApplicationSettingsRecordSqlEnum string

var AgentApplicationSettingsRecordSqlEnumTypes = struct {
	// This is the default value. This setting strips string literals and numeric sequences from your queries and replaces them with the ? character. For example: the query select * from table where ssn='123-45-6789' would become select * from table where ssn=?.
	OBFUSCATED AgentApplicationSettingsRecordSqlEnum
	// Query collection is turned off entirely.
	OFF AgentApplicationSettingsRecordSqlEnum
	// If you are confident that full query data collection will not impact your data security or your users' privacy, you can change the setting to RAW, which will record all query values. NOTE: 'RAW' is not permitted when 'High security mode' is enabled.
	RAW AgentApplicationSettingsRecordSqlEnum
}{
	// This is the default value. This setting strips string literals and numeric sequences from your queries and replaces them with the ? character. For example: the query select * from table where ssn='123-45-6789' would become select * from table where ssn=?.
	OBFUSCATED: "OBFUSCATED",
	// Query collection is turned off entirely.
	OFF: "OFF",
	// If you are confident that full query data collection will not impact your data security or your users' privacy, you can change the setting to RAW, which will record all query values. NOTE: 'RAW' is not permitted when 'High security mode' is enabled.
	RAW: "RAW",
}

// AgentApplicationSettingsSessionTraceMode - Default (fixed_rate) or custom (probabilistic) option used to collect session traces.
type AgentApplicationSettingsSessionTraceMode string

var AgentApplicationSettingsSessionTraceModeTypes = struct {
	// Fixed Rate mode for Session Trace
	// (Default) Session traces are randomly sampled and stored at a rate of 90/hour.
	FIXED_RATE AgentApplicationSettingsSessionTraceMode
	// Probabilistic mode for Session Trace
	// (Custom) Opt to collect more session traces using percentage from 0-100.
	PROBABILISTIC AgentApplicationSettingsSessionTraceMode
}{
	// Fixed Rate mode for Session Trace
	// (Default) Session traces are randomly sampled and stored at a rate of 90/hour.
	FIXED_RATE: "FIXED_RATE",
	// Probabilistic mode for Session Trace
	// (Custom) Opt to collect more session traces using percentage from 0-100.
	PROBABILISTIC: "PROBABILISTIC",
}

// AgentApplicationSettingsThresholdTypeEnum - Determines whether a threshold is statically configured or dynamically configured.
type AgentApplicationSettingsThresholdTypeEnum string

var AgentApplicationSettingsThresholdTypeEnumTypes = struct {
	// Configures the threshold to be 4 times the value of APDEX_T.
	APDEX_F AgentApplicationSettingsThresholdTypeEnum
	// Threshold will be statically configured via the corresponding "value" field.
	VALUE AgentApplicationSettingsThresholdTypeEnum
}{
	// Configures the threshold to be 4 times the value of APDEX_T.
	APDEX_F: "APDEX_F",
	// Threshold will be statically configured via the corresponding "value" field.
	VALUE: "VALUE",
}

// AgentApplicationSettingsTracer - The type of tracing being done.
type AgentApplicationSettingsTracer string

var AgentApplicationSettingsTracerTypes = struct {
	// Cross-application tracing feature enabled.
	CROSS_APPLICATION_TRACER AgentApplicationSettingsTracer
	// Distributed tracing feature enabled.
	DISTRIBUTED_TRACING AgentApplicationSettingsTracer
	// Both cross-application and distributed tracing disabled.
	NONE AgentApplicationSettingsTracer
	// Opt out of server side settings for Tracer Type
	OPT_OUT AgentApplicationSettingsTracer
}{
	// Cross-application tracing feature enabled.
	CROSS_APPLICATION_TRACER: "CROSS_APPLICATION_TRACER",
	// Distributed tracing feature enabled.
	DISTRIBUTED_TRACING: "DISTRIBUTED_TRACING",
	// Both cross-application and distributed tracing disabled.
	NONE: "NONE",
	// Opt out of server side settings for Tracer Type
	OPT_OUT: "OPT_OUT",
}

// BrowserAgentInstallType - Browser agent install types.
type BrowserAgentInstallType string

var BrowserAgentInstallTypeTypes = struct {
	// Lite agent install type.
	LITE BrowserAgentInstallType
	// Pro agent install type.
	PRO BrowserAgentInstallType
	// Pro + SPA agent install type.
	PRO_SPA BrowserAgentInstallType
}{
	// Lite agent install type.
	LITE: "LITE",
	// Pro agent install type.
	PRO: "PRO",
	// Pro + SPA agent install type.
	PRO_SPA: "PRO_SPA",
}

// ChangeTrackingDeploymentType - Type of deployment.
type ChangeTrackingDeploymentType string

var ChangeTrackingDeploymentTypeTypes = struct {
	// A vanilla deployment
	BASIC ChangeTrackingDeploymentType
	// Blue-green deployment
	BLUE_GREEN ChangeTrackingDeploymentType
	// Canary deployment
	CANARY ChangeTrackingDeploymentType
	// Other types of deployment.
	OTHER ChangeTrackingDeploymentType
	// Rolling deployment.
	ROLLING ChangeTrackingDeploymentType
	// Shadow deployment
	SHADOW ChangeTrackingDeploymentType
}{
	// A vanilla deployment
	BASIC: "BASIC",
	// Blue-green deployment
	BLUE_GREEN: "BLUE_GREEN",
	// Canary deployment
	CANARY: "CANARY",
	// Other types of deployment.
	OTHER: "OTHER",
	// Rolling deployment.
	ROLLING: "ROLLING",
	// Shadow deployment
	SHADOW: "SHADOW",
}

// ChartFormatType - Represents all the format types available for static charts.
type ChartFormatType string

var ChartFormatTypeTypes = struct {
	PDF ChartFormatType
	PNG ChartFormatType
}{
	PDF: "PDF",
	PNG: "PNG",
}

// ChartImageType - Represents all the visualization types available for static charts.
type ChartImageType string

var ChartImageTypeTypes = struct {
	APDEX                  ChartImageType
	AREA                   ChartImageType
	BAR                    ChartImageType
	BASELINE               ChartImageType
	BILLBOARD              ChartImageType
	BULLET                 ChartImageType
	EVENT_FEED             ChartImageType
	FUNNEL                 ChartImageType
	HEATMAP                ChartImageType
	HISTOGRAM              ChartImageType
	LINE                   ChartImageType
	PIE                    ChartImageType
	SCATTER                ChartImageType
	STACKED_HORIZONTAL_BAR ChartImageType
	TABLE                  ChartImageType
	VERTICAL_BAR           ChartImageType
}{
	APDEX:                  "APDEX",
	AREA:                   "AREA",
	BAR:                    "BAR",
	BASELINE:               "BASELINE",
	BILLBOARD:              "BILLBOARD",
	BULLET:                 "BULLET",
	EVENT_FEED:             "EVENT_FEED",
	FUNNEL:                 "FUNNEL",
	HEATMAP:                "HEATMAP",
	HISTOGRAM:              "HISTOGRAM",
	LINE:                   "LINE",
	PIE:                    "PIE",
	SCATTER:                "SCATTER",
	STACKED_HORIZONTAL_BAR: "STACKED_HORIZONTAL_BAR",
	TABLE:                  "TABLE",
	VERTICAL_BAR:           "VERTICAL_BAR",
}

// DashboardAlertSeverity - Alert severity.
type DashboardAlertSeverity string

var DashboardAlertSeverityTypes = struct {
	// CRITICAL.
	CRITICAL DashboardAlertSeverity
	// NOT_ALERTING.
	NOT_ALERTING DashboardAlertSeverity
	// WARNING.
	WARNING DashboardAlertSeverity
}{
	// CRITICAL.
	CRITICAL: "CRITICAL",
	// NOT_ALERTING.
	NOT_ALERTING: "NOT_ALERTING",
	// WARNING.
	WARNING: "WARNING",
}

// DashboardEntityPermissions - Permisions that represent visibility & editability
type DashboardEntityPermissions string

var DashboardEntityPermissionsTypes = struct {
	// Private
	PRIVATE DashboardEntityPermissions
	// Public read only
	PUBLIC_READ_ONLY DashboardEntityPermissions
	// Public read & write
	PUBLIC_READ_WRITE DashboardEntityPermissions
}{
	// Private
	PRIVATE: "PRIVATE",
	// Public read only
	PUBLIC_READ_ONLY: "PUBLIC_READ_ONLY",
	// Public read & write
	PUBLIC_READ_WRITE: "PUBLIC_READ_WRITE",
}

// DashboardVariableReplacementStrategy - Possible strategies when replacing variables in a NRQL query.
type DashboardVariableReplacementStrategy string

var DashboardVariableReplacementStrategyTypes = struct {
	// Replace the variable based on its automatically-inferred type.
	DEFAULT DashboardVariableReplacementStrategy
	// Replace the variable value as an identifier.
	IDENTIFIER DashboardVariableReplacementStrategy
	// Replace the variable value as a number.
	NUMBER DashboardVariableReplacementStrategy
	// Replace the variable value as a string.
	STRING DashboardVariableReplacementStrategy
}{
	// Replace the variable based on its automatically-inferred type.
	DEFAULT: "DEFAULT",
	// Replace the variable value as an identifier.
	IDENTIFIER: "IDENTIFIER",
	// Replace the variable value as a number.
	NUMBER: "NUMBER",
	// Replace the variable value as a string.
	STRING: "STRING",
}

// DashboardVariableType - Indicates where a variable's possible values may come from.
type DashboardVariableType string

var DashboardVariableTypeTypes = struct {
	// Value comes from an enumerated list of possible values.
	ENUM DashboardVariableType
	// Value comes from the results of a NRQL query.
	NRQL DashboardVariableType
	// Dashboard user can supply an arbitrary string value to variable.
	STRING DashboardVariableType
}{
	// Value comes from an enumerated list of possible values.
	ENUM: "ENUM",
	// Value comes from the results of a NRQL query.
	NRQL: "NRQL",
	// Dashboard user can supply an arbitrary string value to variable.
	STRING: "STRING",
}

// EmbeddedChartType - Represents all the visualization types available for embedded charts.
type EmbeddedChartType string

var EmbeddedChartTypeTypes = struct {
	APDEX                  EmbeddedChartType
	AREA                   EmbeddedChartType
	BAR                    EmbeddedChartType
	BASELINE               EmbeddedChartType
	BILLBOARD              EmbeddedChartType
	BULLET                 EmbeddedChartType
	EMPTY                  EmbeddedChartType
	EVENT_FEED             EmbeddedChartType
	FUNNEL                 EmbeddedChartType
	HEATMAP                EmbeddedChartType
	HISTOGRAM              EmbeddedChartType
	JSON                   EmbeddedChartType
	LINE                   EmbeddedChartType
	MARKDOWN               EmbeddedChartType
	PIE                    EmbeddedChartType
	SCATTER                EmbeddedChartType
	STACKED_HORIZONTAL_BAR EmbeddedChartType
	TABLE                  EmbeddedChartType
	TRAFFIC_LIGHT          EmbeddedChartType
	VERTICAL_BAR           EmbeddedChartType
}{
	APDEX:                  "APDEX",
	AREA:                   "AREA",
	BAR:                    "BAR",
	BASELINE:               "BASELINE",
	BILLBOARD:              "BILLBOARD",
	BULLET:                 "BULLET",
	EMPTY:                  "EMPTY",
	EVENT_FEED:             "EVENT_FEED",
	FUNNEL:                 "FUNNEL",
	HEATMAP:                "HEATMAP",
	HISTOGRAM:              "HISTOGRAM",
	JSON:                   "JSON",
	LINE:                   "LINE",
	MARKDOWN:               "MARKDOWN",
	PIE:                    "PIE",
	SCATTER:                "SCATTER",
	STACKED_HORIZONTAL_BAR: "STACKED_HORIZONTAL_BAR",
	TABLE:                  "TABLE",
	TRAFFIC_LIGHT:          "TRAFFIC_LIGHT",
	VERTICAL_BAR:           "VERTICAL_BAR",
}

// EntityAlertSeverity - The alert severity of the entity.
type EntityAlertSeverity string

var EntityAlertSeverityTypes = struct {
	// Indicates an entity has a critical violation in progress.
	CRITICAL EntityAlertSeverity
	// Indicates an entity has no violations and therefore is not alerting.
	NOT_ALERTING EntityAlertSeverity
	// Indicates an entity is not configured for alerting.
	NOT_CONFIGURED EntityAlertSeverity
	// Indicates an entity  has a warning violation in progress.
	WARNING EntityAlertSeverity
}{
	// Indicates an entity has a critical violation in progress.
	CRITICAL: "CRITICAL",
	// Indicates an entity has no violations and therefore is not alerting.
	NOT_ALERTING: "NOT_ALERTING",
	// Indicates an entity is not configured for alerting.
	NOT_CONFIGURED: "NOT_CONFIGURED",
	// Indicates an entity  has a warning violation in progress.
	WARNING: "WARNING",
}

// EntityCollectionType - Indicates where this collection is used
type EntityCollectionType string

var EntityCollectionTypeTypes = struct {
	// Collections that define the entities that belong to a team
	TEAM EntityCollectionType
	// Collections that define the entities that belong to a workload
	WORKLOAD EntityCollectionType
	// Collections that define the entity groups that are used to calculate the status of a workload
	WORKLOAD_STATUS_RULE_GROUP EntityCollectionType
}{
	// Collections that define the entities that belong to a team
	TEAM: "TEAM",
	// Collections that define the entities that belong to a workload
	WORKLOAD: "WORKLOAD",
	// Collections that define the entity groups that are used to calculate the status of a workload
	WORKLOAD_STATUS_RULE_GROUP: "WORKLOAD_STATUS_RULE_GROUP",
}

// EntityGoldenEventObjectId - Types of references for the default WHERE clause.
type EntityGoldenEventObjectId string

var EntityGoldenEventObjectIdTypes = struct {
	// The WHERE clause will be done against a domainId.
	DOMAIN_IDS EntityGoldenEventObjectId
	// The WHERE clause will be done against a GUID.
	ENTITY_GUIDS EntityGoldenEventObjectId
	// The WHERE clause will be done against the name of the entity.
	ENTITY_NAMES EntityGoldenEventObjectId
}{
	// The WHERE clause will be done against a domainId.
	DOMAIN_IDS: "DOMAIN_IDS",
	// The WHERE clause will be done against a GUID.
	ENTITY_GUIDS: "ENTITY_GUIDS",
	// The WHERE clause will be done against the name of the entity.
	ENTITY_NAMES: "ENTITY_NAMES",
}

// EntityGoldenMetricUnit - The different units that can be used to express golden metrics.
type EntityGoldenMetricUnit string

var EntityGoldenMetricUnitTypes = struct {
	// Apdex (Application Performance Index).
	APDEX EntityGoldenMetricUnit
	// Bits.
	BITS EntityGoldenMetricUnit
	// Bits per second.
	BITS_PER_SECOND EntityGoldenMetricUnit
	// Bytes.
	BYTES EntityGoldenMetricUnit
	// Bytes per second.
	BYTES_PER_SECOND EntityGoldenMetricUnit
	// Degrees celsius.
	CELSIUS EntityGoldenMetricUnit
	// Count.
	COUNT EntityGoldenMetricUnit
	// Hertz.
	HERTZ EntityGoldenMetricUnit
	// Messages per second.
	MESSAGES_PER_SECOND EntityGoldenMetricUnit
	// Milliseconds.
	MS EntityGoldenMetricUnit
	// Operations per second.
	OPERATIONS_PER_SECOND EntityGoldenMetricUnit
	// Pages loaded per second.
	PAGES_PER_SECOND EntityGoldenMetricUnit
	// Percentage.
	PERCENTAGE EntityGoldenMetricUnit
	// Requests received per minute.
	REQUESTS_PER_MINUTE EntityGoldenMetricUnit
	// Requests received per second.
	REQUESTS_PER_SECOND EntityGoldenMetricUnit
	// Seconds.
	SECONDS EntityGoldenMetricUnit
	// Timestamp.
	TIMESTAMP EntityGoldenMetricUnit
}{
	// Apdex (Application Performance Index).
	APDEX: "APDEX",
	// Bits.
	BITS: "BITS",
	// Bits per second.
	BITS_PER_SECOND: "BITS_PER_SECOND",
	// Bytes.
	BYTES: "BYTES",
	// Bytes per second.
	BYTES_PER_SECOND: "BYTES_PER_SECOND",
	// Degrees celsius.
	CELSIUS: "CELSIUS",
	// Count.
	COUNT: "COUNT",
	// Hertz.
	HERTZ: "HERTZ",
	// Messages per second.
	MESSAGES_PER_SECOND: "MESSAGES_PER_SECOND",
	// Milliseconds.
	MS: "MS",
	// Operations per second.
	OPERATIONS_PER_SECOND: "OPERATIONS_PER_SECOND",
	// Pages loaded per second.
	PAGES_PER_SECOND: "PAGES_PER_SECOND",
	// Percentage.
	PERCENTAGE: "PERCENTAGE",
	// Requests received per minute.
	REQUESTS_PER_MINUTE: "REQUESTS_PER_MINUTE",
	// Requests received per second.
	REQUESTS_PER_SECOND: "REQUESTS_PER_SECOND",
	// Seconds.
	SECONDS: "SECONDS",
	// Timestamp.
	TIMESTAMP: "TIMESTAMP",
}

// EntityInfrastructureIntegrationType - The type of Infrastructure Integration
type EntityInfrastructureIntegrationType string

var EntityInfrastructureIntegrationTypeTypes = struct {
	// APACHE_SERVER integration
	APACHE_SERVER EntityInfrastructureIntegrationType
	// AWSELASTICSEARCHNODE integration
	AWSELASTICSEARCHNODE EntityInfrastructureIntegrationType
	// AWS_ALB integration
	AWS_ALB EntityInfrastructureIntegrationType
	// AWS_ALB_LISTENER integration
	AWS_ALB_LISTENER EntityInfrastructureIntegrationType
	// AWS_ALB_LISTENER_RULE integration
	AWS_ALB_LISTENER_RULE EntityInfrastructureIntegrationType
	// AWS_ALB_TARGET_GROUP integration
	AWS_ALB_TARGET_GROUP EntityInfrastructureIntegrationType
	// AWS_API_GATEWAY_API integration
	AWS_API_GATEWAY_API EntityInfrastructureIntegrationType
	// AWS_API_GATEWAY_RESOURCE integration
	AWS_API_GATEWAY_RESOURCE EntityInfrastructureIntegrationType
	// AWS_API_GATEWAY_RESOURCE_WITH_METRICS integration
	AWS_API_GATEWAY_RESOURCE_WITH_METRICS EntityInfrastructureIntegrationType
	// AWS_API_GATEWAY_STAGE integration
	AWS_API_GATEWAY_STAGE EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_GROUP integration
	AWS_AUTO_SCALING_GROUP EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_INSTANCE integration
	AWS_AUTO_SCALING_INSTANCE EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_LAUNCH_CONFIGURATION integration
	AWS_AUTO_SCALING_LAUNCH_CONFIGURATION EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_POLICY integration
	AWS_AUTO_SCALING_POLICY EntityInfrastructureIntegrationType
	// AWS_AUTO_SCALING_REGION_LIMIT integration
	AWS_AUTO_SCALING_REGION_LIMIT EntityInfrastructureIntegrationType
	// AWS_BILLING_ACCOUNT_COST integration
	AWS_BILLING_ACCOUNT_COST EntityInfrastructureIntegrationType
	// AWS_BILLING_ACCOUNT_SERVICE_COST integration
	AWS_BILLING_ACCOUNT_SERVICE_COST EntityInfrastructureIntegrationType
	// AWS_BILLING_BUDGET integration
	AWS_BILLING_BUDGET EntityInfrastructureIntegrationType
	// AWS_BILLING_SERVICE_COST integration
	AWS_BILLING_SERVICE_COST EntityInfrastructureIntegrationType
	// AWS_CLOUD_FRONT_DISTRIBUTION integration
	AWS_CLOUD_FRONT_DISTRIBUTION EntityInfrastructureIntegrationType
	// AWS_CLOUD_TRAIL integration
	AWS_CLOUD_TRAIL EntityInfrastructureIntegrationType
	// AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX integration
	AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX EntityInfrastructureIntegrationType
	// AWS_DYNAMO_DB_REGION integration
	AWS_DYNAMO_DB_REGION EntityInfrastructureIntegrationType
	// AWS_DYNAMO_DB_TABLE integration
	AWS_DYNAMO_DB_TABLE EntityInfrastructureIntegrationType
	// AWS_EBS_VOLUME integration
	AWS_EBS_VOLUME EntityInfrastructureIntegrationType
	// AWS_ECS_CLUSTER integration
	AWS_ECS_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ECS_SERVICE integration
	AWS_ECS_SERVICE EntityInfrastructureIntegrationType
	// AWS_EFS_FILE_SYSTEM integration
	AWS_EFS_FILE_SYSTEM EntityInfrastructureIntegrationType
	// AWS_ELASTICSEARCH_CLUSTER integration
	AWS_ELASTICSEARCH_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ELASTICSEARCH_INSTANCE integration
	AWS_ELASTICSEARCH_INSTANCE EntityInfrastructureIntegrationType
	// AWS_ELASTIC_BEANSTALK_ENVIRONMENT integration
	AWS_ELASTIC_BEANSTALK_ENVIRONMENT EntityInfrastructureIntegrationType
	// AWS_ELASTIC_BEANSTALK_INSTANCE integration
	AWS_ELASTIC_BEANSTALK_INSTANCE EntityInfrastructureIntegrationType
	// AWS_ELASTIC_MAP_REDUCE_CLUSTER integration
	AWS_ELASTIC_MAP_REDUCE_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE EntityInfrastructureIntegrationType
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET EntityInfrastructureIntegrationType
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP EntityInfrastructureIntegrationType
	// AWS_ELASTI_CACHE_MEMCACHED_CLUSTER integration
	AWS_ELASTI_CACHE_MEMCACHED_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ELASTI_CACHE_MEMCACHED_NODE integration
	AWS_ELASTI_CACHE_MEMCACHED_NODE EntityInfrastructureIntegrationType
	// AWS_ELASTI_CACHE_REDIS_CLUSTER integration
	AWS_ELASTI_CACHE_REDIS_CLUSTER EntityInfrastructureIntegrationType
	// AWS_ELASTI_CACHE_REDIS_NODE integration
	AWS_ELASTI_CACHE_REDIS_NODE EntityInfrastructureIntegrationType
	// AWS_ELB integration
	AWS_ELB EntityInfrastructureIntegrationType
	// AWS_HEALTH_ISSUE integration
	AWS_HEALTH_ISSUE EntityInfrastructureIntegrationType
	// AWS_HEALTH_NOTIFICATION integration
	AWS_HEALTH_NOTIFICATION EntityInfrastructureIntegrationType
	// AWS_HEALTH_SCHEDULED_CHANGE integration
	AWS_HEALTH_SCHEDULED_CHANGE EntityInfrastructureIntegrationType
	// AWS_HEALTH_UNKNOWN integration
	AWS_HEALTH_UNKNOWN EntityInfrastructureIntegrationType
	// AWS_IAM integration
	AWS_IAM EntityInfrastructureIntegrationType
	// AWS_IAM_GROUP integration
	AWS_IAM_GROUP EntityInfrastructureIntegrationType
	// AWS_IAM_OPEN_ID_PROVIDER integration
	AWS_IAM_OPEN_ID_PROVIDER EntityInfrastructureIntegrationType
	// AWS_IAM_POLICY integration
	AWS_IAM_POLICY EntityInfrastructureIntegrationType
	// AWS_IAM_ROLE integration
	AWS_IAM_ROLE EntityInfrastructureIntegrationType
	// AWS_IAM_SAML_PROVIDER integration
	AWS_IAM_SAML_PROVIDER EntityInfrastructureIntegrationType
	// AWS_IAM_SERVER_CERTIFICATE integration
	AWS_IAM_SERVER_CERTIFICATE EntityInfrastructureIntegrationType
	// AWS_IAM_USER integration
	AWS_IAM_USER EntityInfrastructureIntegrationType
	// AWS_IAM_VIRTUAL_MFA_DEVICE integration
	AWS_IAM_VIRTUAL_MFA_DEVICE EntityInfrastructureIntegrationType
	// AWS_IOT_BROKER integration
	AWS_IOT_BROKER EntityInfrastructureIntegrationType
	// AWS_IOT_RULE integration
	AWS_IOT_RULE EntityInfrastructureIntegrationType
	// AWS_IOT_RULE_ACTION integration
	AWS_IOT_RULE_ACTION EntityInfrastructureIntegrationType
	// AWS_KINESIS_DELIVERY_STREAM integration
	AWS_KINESIS_DELIVERY_STREAM EntityInfrastructureIntegrationType
	// AWS_KINESIS_STREAM integration
	AWS_KINESIS_STREAM EntityInfrastructureIntegrationType
	// AWS_KINESIS_STREAM_SHARD integration
	AWS_KINESIS_STREAM_SHARD EntityInfrastructureIntegrationType
	// AWS_LAMBDA_AGENT_TRANSACTION integration
	AWS_LAMBDA_AGENT_TRANSACTION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_AGENT_TRANSACTION_ERROR integration
	AWS_LAMBDA_AGENT_TRANSACTION_ERROR EntityInfrastructureIntegrationType
	// AWS_LAMBDA_EDGE_FUNCTION integration
	AWS_LAMBDA_EDGE_FUNCTION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_EVENT_SOURCE_MAPPING integration
	AWS_LAMBDA_EVENT_SOURCE_MAPPING EntityInfrastructureIntegrationType
	// AWS_LAMBDA_FUNCTION integration
	AWS_LAMBDA_FUNCTION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_FUNCTION_ALIAS integration
	AWS_LAMBDA_FUNCTION_ALIAS EntityInfrastructureIntegrationType
	// AWS_LAMBDA_OPERATION integration
	AWS_LAMBDA_OPERATION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_REGION integration
	AWS_LAMBDA_REGION EntityInfrastructureIntegrationType
	// AWS_LAMBDA_SPAN integration
	AWS_LAMBDA_SPAN EntityInfrastructureIntegrationType
	// AWS_LAMBDA_TRACE integration
	AWS_LAMBDA_TRACE EntityInfrastructureIntegrationType
	// AWS_RDS_DB_CLUSTER integration
	AWS_RDS_DB_CLUSTER EntityInfrastructureIntegrationType
	// AWS_RDS_DB_INSTANCE integration
	AWS_RDS_DB_INSTANCE EntityInfrastructureIntegrationType
	// AWS_REDSHIFT_CLUSTER integration
	AWS_REDSHIFT_CLUSTER EntityInfrastructureIntegrationType
	// AWS_REDSHIFT_NODE integration
	AWS_REDSHIFT_NODE EntityInfrastructureIntegrationType
	// AWS_ROUTE53_HEALTH_CHECK integration
	AWS_ROUTE53_HEALTH_CHECK EntityInfrastructureIntegrationType
	// AWS_ROUTE53_ZONE integration
	AWS_ROUTE53_ZONE EntityInfrastructureIntegrationType
	// AWS_ROUTE53_ZONE_RECORD_SET integration
	AWS_ROUTE53_ZONE_RECORD_SET EntityInfrastructureIntegrationType
	// AWS_S3_BUCKET integration
	AWS_S3_BUCKET EntityInfrastructureIntegrationType
	// AWS_S3_BUCKET_REQUESTS integration
	AWS_S3_BUCKET_REQUESTS EntityInfrastructureIntegrationType
	// AWS_SES_CONFIGURATION_SET integration
	AWS_SES_CONFIGURATION_SET EntityInfrastructureIntegrationType
	// AWS_SES_EVENT_DESTINATION integration
	AWS_SES_EVENT_DESTINATION EntityInfrastructureIntegrationType
	// AWS_SES_RECEIPT_FILTER integration
	AWS_SES_RECEIPT_FILTER EntityInfrastructureIntegrationType
	// AWS_SES_RECEIPT_RULE integration
	AWS_SES_RECEIPT_RULE EntityInfrastructureIntegrationType
	// AWS_SES_RECEIPT_RULE_SET integration
	AWS_SES_RECEIPT_RULE_SET EntityInfrastructureIntegrationType
	// AWS_SES_REGION integration
	AWS_SES_REGION EntityInfrastructureIntegrationType
	// AWS_SNS_SUBSCRIPTION integration
	AWS_SNS_SUBSCRIPTION EntityInfrastructureIntegrationType
	// AWS_SNS_TOPIC integration
	AWS_SNS_TOPIC EntityInfrastructureIntegrationType
	// AWS_SQS_QUEUE integration
	AWS_SQS_QUEUE EntityInfrastructureIntegrationType
	// AWS_VPC integration
	AWS_VPC EntityInfrastructureIntegrationType
	// AWS_VPC_ENDPOINT integration
	AWS_VPC_ENDPOINT EntityInfrastructureIntegrationType
	// AWS_VPC_INTERNET_GATEWAY integration
	AWS_VPC_INTERNET_GATEWAY EntityInfrastructureIntegrationType
	// AWS_VPC_NAT_GATEWAY integration
	AWS_VPC_NAT_GATEWAY EntityInfrastructureIntegrationType
	// AWS_VPC_NETWORK_ACL integration
	AWS_VPC_NETWORK_ACL EntityInfrastructureIntegrationType
	// AWS_VPC_NETWORK_INTERFACE integration
	AWS_VPC_NETWORK_INTERFACE EntityInfrastructureIntegrationType
	// AWS_VPC_PEERING_CONNECTION integration
	AWS_VPC_PEERING_CONNECTION EntityInfrastructureIntegrationType
	// AWS_VPC_ROUTE_TABLE integration
	AWS_VPC_ROUTE_TABLE EntityInfrastructureIntegrationType
	// AWS_VPC_SECURITY_GROUP integration
	AWS_VPC_SECURITY_GROUP EntityInfrastructureIntegrationType
	// AWS_VPC_SUBNET integration
	AWS_VPC_SUBNET EntityInfrastructureIntegrationType
	// AWS_VPC_VPN_CONNECTION integration
	AWS_VPC_VPN_CONNECTION EntityInfrastructureIntegrationType
	// AWS_VPC_VPN_TUNNEL integration
	AWS_VPC_VPN_TUNNEL EntityInfrastructureIntegrationType
	// AZURE_APP_SERVICE_HOST_NAME integration
	AZURE_APP_SERVICE_HOST_NAME EntityInfrastructureIntegrationType
	// AZURE_APP_SERVICE_WEB_APP integration
	AZURE_APP_SERVICE_WEB_APP EntityInfrastructureIntegrationType
	// AZURE_COSMOS_DB_ACCOUNT integration
	AZURE_COSMOS_DB_ACCOUNT EntityInfrastructureIntegrationType
	// AZURE_FUNCTIONS_APP integration
	AZURE_FUNCTIONS_APP EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER integration
	AZURE_LOAD_BALANCER EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_BACKEND integration
	AZURE_LOAD_BALANCER_BACKEND EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_FRONTEND_IP integration
	AZURE_LOAD_BALANCER_FRONTEND_IP EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_INBOUND_NAT_POOL integration
	AZURE_LOAD_BALANCER_INBOUND_NAT_POOL EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_INBOUND_NAT_RULE integration
	AZURE_LOAD_BALANCER_INBOUND_NAT_RULE EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_PROBE integration
	AZURE_LOAD_BALANCER_PROBE EntityInfrastructureIntegrationType
	// AZURE_LOAD_BALANCER_RULE integration
	AZURE_LOAD_BALANCER_RULE EntityInfrastructureIntegrationType
	// AZURE_MARIADB_SERVER integration
	AZURE_MARIADB_SERVER EntityInfrastructureIntegrationType
	// AZURE_MYSQL_SERVER integration
	AZURE_MYSQL_SERVER EntityInfrastructureIntegrationType
	// AZURE_POSTGRESQL_SERVER integration
	AZURE_POSTGRESQL_SERVER EntityInfrastructureIntegrationType
	// AZURE_REDIS_CACHE integration
	AZURE_REDIS_CACHE EntityInfrastructureIntegrationType
	// AZURE_REDIS_CACHE_SHARD integration
	AZURE_REDIS_CACHE_SHARD EntityInfrastructureIntegrationType
	// AZURE_SERVICE_BUS_NAMESPACE integration
	AZURE_SERVICE_BUS_NAMESPACE EntityInfrastructureIntegrationType
	// AZURE_SERVICE_BUS_QUEUE integration
	AZURE_SERVICE_BUS_QUEUE EntityInfrastructureIntegrationType
	// AZURE_SERVICE_BUS_SUBSCRIPTION integration
	AZURE_SERVICE_BUS_SUBSCRIPTION EntityInfrastructureIntegrationType
	// AZURE_SERVICE_BUS_TOPIC integration
	AZURE_SERVICE_BUS_TOPIC EntityInfrastructureIntegrationType
	// AZURE_SQL_DATABASE integration
	AZURE_SQL_DATABASE EntityInfrastructureIntegrationType
	// AZURE_SQL_ELASTIC_POOL integration
	AZURE_SQL_ELASTIC_POOL EntityInfrastructureIntegrationType
	// AZURE_SQL_FIREWALL integration
	AZURE_SQL_FIREWALL EntityInfrastructureIntegrationType
	// AZURE_SQL_REPLICATION_LINK integration
	AZURE_SQL_REPLICATION_LINK EntityInfrastructureIntegrationType
	// AZURE_SQL_RESTORE_POINT integration
	AZURE_SQL_RESTORE_POINT EntityInfrastructureIntegrationType
	// AZURE_SQL_SERVER integration
	AZURE_SQL_SERVER EntityInfrastructureIntegrationType
	// AZURE_STORAGE_ACCOUNT integration
	AZURE_STORAGE_ACCOUNT EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS integration
	AZURE_VIRTUAL_NETWORKS EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION integration
	AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE integration
	AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_PEERING integration
	AZURE_VIRTUAL_NETWORKS_PEERING EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS integration
	AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_ROUTE integration
	AZURE_VIRTUAL_NETWORKS_ROUTE EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE integration
	AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP integration
	AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_SECURITY_RULE integration
	AZURE_VIRTUAL_NETWORKS_SECURITY_RULE EntityInfrastructureIntegrationType
	// AZURE_VIRTUAL_NETWORKS_SUBNET integration
	AZURE_VIRTUAL_NETWORKS_SUBNET EntityInfrastructureIntegrationType
	// CASSANDRA_NODE integration
	CASSANDRA_NODE EntityInfrastructureIntegrationType
	// CONSUL_AGENT integration
	CONSUL_AGENT EntityInfrastructureIntegrationType
	// COUCHBASE_BUCKET integration
	COUCHBASE_BUCKET EntityInfrastructureIntegrationType
	// COUCHBASE_CLUSTER integration
	COUCHBASE_CLUSTER EntityInfrastructureIntegrationType
	// COUCHBASE_NODE integration
	COUCHBASE_NODE EntityInfrastructureIntegrationType
	// COUCHBASE_QUERY_ENGINE integration
	COUCHBASE_QUERY_ENGINE EntityInfrastructureIntegrationType
	// ELASTICSEARCH_NODE integration
	ELASTICSEARCH_NODE EntityInfrastructureIntegrationType
	// F5_NODE integration
	F5_NODE EntityInfrastructureIntegrationType
	// F5_POOL integration
	F5_POOL EntityInfrastructureIntegrationType
	// F5_POOL_MEMBER integration
	F5_POOL_MEMBER EntityInfrastructureIntegrationType
	// F5_SYSTEM integration
	F5_SYSTEM EntityInfrastructureIntegrationType
	// F5_VIRTUAL_SERVER integration
	F5_VIRTUAL_SERVER EntityInfrastructureIntegrationType
	// GCP_APP_ENGINE_SERVICE integration
	GCP_APP_ENGINE_SERVICE EntityInfrastructureIntegrationType
	// GCP_BIG_QUERY_DATA_SET integration
	GCP_BIG_QUERY_DATA_SET EntityInfrastructureIntegrationType
	// GCP_BIG_QUERY_PROJECT integration
	GCP_BIG_QUERY_PROJECT EntityInfrastructureIntegrationType
	// GCP_BIG_QUERY_TABLE integration
	GCP_BIG_QUERY_TABLE EntityInfrastructureIntegrationType
	// GCP_CLOUD_FUNCTION integration
	GCP_CLOUD_FUNCTION EntityInfrastructureIntegrationType
	// GCP_CLOUD_SQL integration
	GCP_CLOUD_SQL EntityInfrastructureIntegrationType
	// GCP_CLOUD_TASKS_QUEUE integration
	GCP_CLOUD_TASKS_QUEUE EntityInfrastructureIntegrationType
	// GCP_HTTP_LOAD_BALANCER integration
	GCP_HTTP_LOAD_BALANCER EntityInfrastructureIntegrationType
	// GCP_INTERNAL_LOAD_BALANCER integration
	GCP_INTERNAL_LOAD_BALANCER EntityInfrastructureIntegrationType
	// GCP_KUBERNETES_CONTAINER integration
	GCP_KUBERNETES_CONTAINER EntityInfrastructureIntegrationType
	// GCP_KUBERNETES_NODE integration
	GCP_KUBERNETES_NODE EntityInfrastructureIntegrationType
	// GCP_KUBERNETES_POD integration
	GCP_KUBERNETES_POD EntityInfrastructureIntegrationType
	// GCP_PUB_SUB_SUBSCRIPTION integration
	GCP_PUB_SUB_SUBSCRIPTION EntityInfrastructureIntegrationType
	// GCP_PUB_SUB_TOPIC integration
	GCP_PUB_SUB_TOPIC EntityInfrastructureIntegrationType
	// GCP_SPANNER_DATABASE integration
	GCP_SPANNER_DATABASE EntityInfrastructureIntegrationType
	// GCP_SPANNER_INSTANCE integration
	GCP_SPANNER_INSTANCE EntityInfrastructureIntegrationType
	// GCP_STORAGE_BUCKET integration
	GCP_STORAGE_BUCKET EntityInfrastructureIntegrationType
	// GCP_TCP_SSL_PROXY_LOAD_BALANCER integration
	GCP_TCP_SSL_PROXY_LOAD_BALANCER EntityInfrastructureIntegrationType
	// GCP_VIRTUAL_MACHINE_DISK integration
	GCP_VIRTUAL_MACHINE_DISK EntityInfrastructureIntegrationType
	// KAFKA_BROKER integration
	KAFKA_BROKER EntityInfrastructureIntegrationType
	// KAFKA_TOPIC integration
	KAFKA_TOPIC EntityInfrastructureIntegrationType
	// KUBERNETES_CLUSTER integration
	KUBERNETES_CLUSTER EntityInfrastructureIntegrationType
	// MEMCACHED_INSTANCE integration
	MEMCACHED_INSTANCE EntityInfrastructureIntegrationType
	// MSSQL_INSTANCE integration
	MSSQL_INSTANCE EntityInfrastructureIntegrationType
	// MYSQL_NODE integration
	MYSQL_NODE EntityInfrastructureIntegrationType
	// NA integration
	NA EntityInfrastructureIntegrationType
	// NGINX_SERVER integration
	NGINX_SERVER EntityInfrastructureIntegrationType
	// ORACLE_DB_INSTANCE integration
	ORACLE_DB_INSTANCE EntityInfrastructureIntegrationType
	// POSTGRE_SQL_INSTANCE integration
	POSTGRE_SQL_INSTANCE EntityInfrastructureIntegrationType
	// RABBIT_MQ_CLUSTER integration
	RABBIT_MQ_CLUSTER EntityInfrastructureIntegrationType
	// RABBIT_MQ_EXCHANGE integration
	RABBIT_MQ_EXCHANGE EntityInfrastructureIntegrationType
	// RABBIT_MQ_NODE integration
	RABBIT_MQ_NODE EntityInfrastructureIntegrationType
	// RABBIT_MQ_QUEUE integration
	RABBIT_MQ_QUEUE EntityInfrastructureIntegrationType
	// REDIS_INSTANCE integration
	REDIS_INSTANCE EntityInfrastructureIntegrationType
	// VARNISH_INSTANCE integration
	VARNISH_INSTANCE EntityInfrastructureIntegrationType
}{
	// APACHE_SERVER integration
	APACHE_SERVER: "APACHE_SERVER",
	// AWSELASTICSEARCHNODE integration
	AWSELASTICSEARCHNODE: "AWSELASTICSEARCHNODE",
	// AWS_ALB integration
	AWS_ALB: "AWS_ALB",
	// AWS_ALB_LISTENER integration
	AWS_ALB_LISTENER: "AWS_ALB_LISTENER",
	// AWS_ALB_LISTENER_RULE integration
	AWS_ALB_LISTENER_RULE: "AWS_ALB_LISTENER_RULE",
	// AWS_ALB_TARGET_GROUP integration
	AWS_ALB_TARGET_GROUP: "AWS_ALB_TARGET_GROUP",
	// AWS_API_GATEWAY_API integration
	AWS_API_GATEWAY_API: "AWS_API_GATEWAY_API",
	// AWS_API_GATEWAY_RESOURCE integration
	AWS_API_GATEWAY_RESOURCE: "AWS_API_GATEWAY_RESOURCE",
	// AWS_API_GATEWAY_RESOURCE_WITH_METRICS integration
	AWS_API_GATEWAY_RESOURCE_WITH_METRICS: "AWS_API_GATEWAY_RESOURCE_WITH_METRICS",
	// AWS_API_GATEWAY_STAGE integration
	AWS_API_GATEWAY_STAGE: "AWS_API_GATEWAY_STAGE",
	// AWS_AUTO_SCALING_GROUP integration
	AWS_AUTO_SCALING_GROUP: "AWS_AUTO_SCALING_GROUP",
	// AWS_AUTO_SCALING_INSTANCE integration
	AWS_AUTO_SCALING_INSTANCE: "AWS_AUTO_SCALING_INSTANCE",
	// AWS_AUTO_SCALING_LAUNCH_CONFIGURATION integration
	AWS_AUTO_SCALING_LAUNCH_CONFIGURATION: "AWS_AUTO_SCALING_LAUNCH_CONFIGURATION",
	// AWS_AUTO_SCALING_POLICY integration
	AWS_AUTO_SCALING_POLICY: "AWS_AUTO_SCALING_POLICY",
	// AWS_AUTO_SCALING_REGION_LIMIT integration
	AWS_AUTO_SCALING_REGION_LIMIT: "AWS_AUTO_SCALING_REGION_LIMIT",
	// AWS_BILLING_ACCOUNT_COST integration
	AWS_BILLING_ACCOUNT_COST: "AWS_BILLING_ACCOUNT_COST",
	// AWS_BILLING_ACCOUNT_SERVICE_COST integration
	AWS_BILLING_ACCOUNT_SERVICE_COST: "AWS_BILLING_ACCOUNT_SERVICE_COST",
	// AWS_BILLING_BUDGET integration
	AWS_BILLING_BUDGET: "AWS_BILLING_BUDGET",
	// AWS_BILLING_SERVICE_COST integration
	AWS_BILLING_SERVICE_COST: "AWS_BILLING_SERVICE_COST",
	// AWS_CLOUD_FRONT_DISTRIBUTION integration
	AWS_CLOUD_FRONT_DISTRIBUTION: "AWS_CLOUD_FRONT_DISTRIBUTION",
	// AWS_CLOUD_TRAIL integration
	AWS_CLOUD_TRAIL: "AWS_CLOUD_TRAIL",
	// AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX integration
	AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX: "AWS_DYNAMO_DB_GLOBAL_SECONDARY_INDEX",
	// AWS_DYNAMO_DB_REGION integration
	AWS_DYNAMO_DB_REGION: "AWS_DYNAMO_DB_REGION",
	// AWS_DYNAMO_DB_TABLE integration
	AWS_DYNAMO_DB_TABLE: "AWS_DYNAMO_DB_TABLE",
	// AWS_EBS_VOLUME integration
	AWS_EBS_VOLUME: "AWS_EBS_VOLUME",
	// AWS_ECS_CLUSTER integration
	AWS_ECS_CLUSTER: "AWS_ECS_CLUSTER",
	// AWS_ECS_SERVICE integration
	AWS_ECS_SERVICE: "AWS_ECS_SERVICE",
	// AWS_EFS_FILE_SYSTEM integration
	AWS_EFS_FILE_SYSTEM: "AWS_EFS_FILE_SYSTEM",
	// AWS_ELASTICSEARCH_CLUSTER integration
	AWS_ELASTICSEARCH_CLUSTER: "AWS_ELASTICSEARCH_CLUSTER",
	// AWS_ELASTICSEARCH_INSTANCE integration
	AWS_ELASTICSEARCH_INSTANCE: "AWS_ELASTICSEARCH_INSTANCE",
	// AWS_ELASTIC_BEANSTALK_ENVIRONMENT integration
	AWS_ELASTIC_BEANSTALK_ENVIRONMENT: "AWS_ELASTIC_BEANSTALK_ENVIRONMENT",
	// AWS_ELASTIC_BEANSTALK_INSTANCE integration
	AWS_ELASTIC_BEANSTALK_INSTANCE: "AWS_ELASTIC_BEANSTALK_INSTANCE",
	// AWS_ELASTIC_MAP_REDUCE_CLUSTER integration
	AWS_ELASTIC_MAP_REDUCE_CLUSTER: "AWS_ELASTIC_MAP_REDUCE_CLUSTER",
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE: "AWS_ELASTIC_MAP_REDUCE_INSTANCE",
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET: "AWS_ELASTIC_MAP_REDUCE_INSTANCE_FLEET",
	// AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP integration
	AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP: "AWS_ELASTIC_MAP_REDUCE_INSTANCE_GROUP",
	// AWS_ELASTI_CACHE_MEMCACHED_CLUSTER integration
	AWS_ELASTI_CACHE_MEMCACHED_CLUSTER: "AWS_ELASTI_CACHE_MEMCACHED_CLUSTER",
	// AWS_ELASTI_CACHE_MEMCACHED_NODE integration
	AWS_ELASTI_CACHE_MEMCACHED_NODE: "AWS_ELASTI_CACHE_MEMCACHED_NODE",
	// AWS_ELASTI_CACHE_REDIS_CLUSTER integration
	AWS_ELASTI_CACHE_REDIS_CLUSTER: "AWS_ELASTI_CACHE_REDIS_CLUSTER",
	// AWS_ELASTI_CACHE_REDIS_NODE integration
	AWS_ELASTI_CACHE_REDIS_NODE: "AWS_ELASTI_CACHE_REDIS_NODE",
	// AWS_ELB integration
	AWS_ELB: "AWS_ELB",
	// AWS_HEALTH_ISSUE integration
	AWS_HEALTH_ISSUE: "AWS_HEALTH_ISSUE",
	// AWS_HEALTH_NOTIFICATION integration
	AWS_HEALTH_NOTIFICATION: "AWS_HEALTH_NOTIFICATION",
	// AWS_HEALTH_SCHEDULED_CHANGE integration
	AWS_HEALTH_SCHEDULED_CHANGE: "AWS_HEALTH_SCHEDULED_CHANGE",
	// AWS_HEALTH_UNKNOWN integration
	AWS_HEALTH_UNKNOWN: "AWS_HEALTH_UNKNOWN",
	// AWS_IAM integration
	AWS_IAM: "AWS_IAM",
	// AWS_IAM_GROUP integration
	AWS_IAM_GROUP: "AWS_IAM_GROUP",
	// AWS_IAM_OPEN_ID_PROVIDER integration
	AWS_IAM_OPEN_ID_PROVIDER: "AWS_IAM_OPEN_ID_PROVIDER",
	// AWS_IAM_POLICY integration
	AWS_IAM_POLICY: "AWS_IAM_POLICY",
	// AWS_IAM_ROLE integration
	AWS_IAM_ROLE: "AWS_IAM_ROLE",
	// AWS_IAM_SAML_PROVIDER integration
	AWS_IAM_SAML_PROVIDER: "AWS_IAM_SAML_PROVIDER",
	// AWS_IAM_SERVER_CERTIFICATE integration
	AWS_IAM_SERVER_CERTIFICATE: "AWS_IAM_SERVER_CERTIFICATE",
	// AWS_IAM_USER integration
	AWS_IAM_USER: "AWS_IAM_USER",
	// AWS_IAM_VIRTUAL_MFA_DEVICE integration
	AWS_IAM_VIRTUAL_MFA_DEVICE: "AWS_IAM_VIRTUAL_MFA_DEVICE",
	// AWS_IOT_BROKER integration
	AWS_IOT_BROKER: "AWS_IOT_BROKER",
	// AWS_IOT_RULE integration
	AWS_IOT_RULE: "AWS_IOT_RULE",
	// AWS_IOT_RULE_ACTION integration
	AWS_IOT_RULE_ACTION: "AWS_IOT_RULE_ACTION",
	// AWS_KINESIS_DELIVERY_STREAM integration
	AWS_KINESIS_DELIVERY_STREAM: "AWS_KINESIS_DELIVERY_STREAM",
	// AWS_KINESIS_STREAM integration
	AWS_KINESIS_STREAM: "AWS_KINESIS_STREAM",
	// AWS_KINESIS_STREAM_SHARD integration
	AWS_KINESIS_STREAM_SHARD: "AWS_KINESIS_STREAM_SHARD",
	// AWS_LAMBDA_AGENT_TRANSACTION integration
	AWS_LAMBDA_AGENT_TRANSACTION: "AWS_LAMBDA_AGENT_TRANSACTION",
	// AWS_LAMBDA_AGENT_TRANSACTION_ERROR integration
	AWS_LAMBDA_AGENT_TRANSACTION_ERROR: "AWS_LAMBDA_AGENT_TRANSACTION_ERROR",
	// AWS_LAMBDA_EDGE_FUNCTION integration
	AWS_LAMBDA_EDGE_FUNCTION: "AWS_LAMBDA_EDGE_FUNCTION",
	// AWS_LAMBDA_EVENT_SOURCE_MAPPING integration
	AWS_LAMBDA_EVENT_SOURCE_MAPPING: "AWS_LAMBDA_EVENT_SOURCE_MAPPING",
	// AWS_LAMBDA_FUNCTION integration
	AWS_LAMBDA_FUNCTION: "AWS_LAMBDA_FUNCTION",
	// AWS_LAMBDA_FUNCTION_ALIAS integration
	AWS_LAMBDA_FUNCTION_ALIAS: "AWS_LAMBDA_FUNCTION_ALIAS",
	// AWS_LAMBDA_OPERATION integration
	AWS_LAMBDA_OPERATION: "AWS_LAMBDA_OPERATION",
	// AWS_LAMBDA_REGION integration
	AWS_LAMBDA_REGION: "AWS_LAMBDA_REGION",
	// AWS_LAMBDA_SPAN integration
	AWS_LAMBDA_SPAN: "AWS_LAMBDA_SPAN",
	// AWS_LAMBDA_TRACE integration
	AWS_LAMBDA_TRACE: "AWS_LAMBDA_TRACE",
	// AWS_RDS_DB_CLUSTER integration
	AWS_RDS_DB_CLUSTER: "AWS_RDS_DB_CLUSTER",
	// AWS_RDS_DB_INSTANCE integration
	AWS_RDS_DB_INSTANCE: "AWS_RDS_DB_INSTANCE",
	// AWS_REDSHIFT_CLUSTER integration
	AWS_REDSHIFT_CLUSTER: "AWS_REDSHIFT_CLUSTER",
	// AWS_REDSHIFT_NODE integration
	AWS_REDSHIFT_NODE: "AWS_REDSHIFT_NODE",
	// AWS_ROUTE53_HEALTH_CHECK integration
	AWS_ROUTE53_HEALTH_CHECK: "AWS_ROUTE53_HEALTH_CHECK",
	// AWS_ROUTE53_ZONE integration
	AWS_ROUTE53_ZONE: "AWS_ROUTE53_ZONE",
	// AWS_ROUTE53_ZONE_RECORD_SET integration
	AWS_ROUTE53_ZONE_RECORD_SET: "AWS_ROUTE53_ZONE_RECORD_SET",
	// AWS_S3_BUCKET integration
	AWS_S3_BUCKET: "AWS_S3_BUCKET",
	// AWS_S3_BUCKET_REQUESTS integration
	AWS_S3_BUCKET_REQUESTS: "AWS_S3_BUCKET_REQUESTS",
	// AWS_SES_CONFIGURATION_SET integration
	AWS_SES_CONFIGURATION_SET: "AWS_SES_CONFIGURATION_SET",
	// AWS_SES_EVENT_DESTINATION integration
	AWS_SES_EVENT_DESTINATION: "AWS_SES_EVENT_DESTINATION",
	// AWS_SES_RECEIPT_FILTER integration
	AWS_SES_RECEIPT_FILTER: "AWS_SES_RECEIPT_FILTER",
	// AWS_SES_RECEIPT_RULE integration
	AWS_SES_RECEIPT_RULE: "AWS_SES_RECEIPT_RULE",
	// AWS_SES_RECEIPT_RULE_SET integration
	AWS_SES_RECEIPT_RULE_SET: "AWS_SES_RECEIPT_RULE_SET",
	// AWS_SES_REGION integration
	AWS_SES_REGION: "AWS_SES_REGION",
	// AWS_SNS_SUBSCRIPTION integration
	AWS_SNS_SUBSCRIPTION: "AWS_SNS_SUBSCRIPTION",
	// AWS_SNS_TOPIC integration
	AWS_SNS_TOPIC: "AWS_SNS_TOPIC",
	// AWS_SQS_QUEUE integration
	AWS_SQS_QUEUE: "AWS_SQS_QUEUE",
	// AWS_VPC integration
	AWS_VPC: "AWS_VPC",
	// AWS_VPC_ENDPOINT integration
	AWS_VPC_ENDPOINT: "AWS_VPC_ENDPOINT",
	// AWS_VPC_INTERNET_GATEWAY integration
	AWS_VPC_INTERNET_GATEWAY: "AWS_VPC_INTERNET_GATEWAY",
	// AWS_VPC_NAT_GATEWAY integration
	AWS_VPC_NAT_GATEWAY: "AWS_VPC_NAT_GATEWAY",
	// AWS_VPC_NETWORK_ACL integration
	AWS_VPC_NETWORK_ACL: "AWS_VPC_NETWORK_ACL",
	// AWS_VPC_NETWORK_INTERFACE integration
	AWS_VPC_NETWORK_INTERFACE: "AWS_VPC_NETWORK_INTERFACE",
	// AWS_VPC_PEERING_CONNECTION integration
	AWS_VPC_PEERING_CONNECTION: "AWS_VPC_PEERING_CONNECTION",
	// AWS_VPC_ROUTE_TABLE integration
	AWS_VPC_ROUTE_TABLE: "AWS_VPC_ROUTE_TABLE",
	// AWS_VPC_SECURITY_GROUP integration
	AWS_VPC_SECURITY_GROUP: "AWS_VPC_SECURITY_GROUP",
	// AWS_VPC_SUBNET integration
	AWS_VPC_SUBNET: "AWS_VPC_SUBNET",
	// AWS_VPC_VPN_CONNECTION integration
	AWS_VPC_VPN_CONNECTION: "AWS_VPC_VPN_CONNECTION",
	// AWS_VPC_VPN_TUNNEL integration
	AWS_VPC_VPN_TUNNEL: "AWS_VPC_VPN_TUNNEL",
	// AZURE_APP_SERVICE_HOST_NAME integration
	AZURE_APP_SERVICE_HOST_NAME: "AZURE_APP_SERVICE_HOST_NAME",
	// AZURE_APP_SERVICE_WEB_APP integration
	AZURE_APP_SERVICE_WEB_APP: "AZURE_APP_SERVICE_WEB_APP",
	// AZURE_COSMOS_DB_ACCOUNT integration
	AZURE_COSMOS_DB_ACCOUNT: "AZURE_COSMOS_DB_ACCOUNT",
	// AZURE_FUNCTIONS_APP integration
	AZURE_FUNCTIONS_APP: "AZURE_FUNCTIONS_APP",
	// AZURE_LOAD_BALANCER integration
	AZURE_LOAD_BALANCER: "AZURE_LOAD_BALANCER",
	// AZURE_LOAD_BALANCER_BACKEND integration
	AZURE_LOAD_BALANCER_BACKEND: "AZURE_LOAD_BALANCER_BACKEND",
	// AZURE_LOAD_BALANCER_FRONTEND_IP integration
	AZURE_LOAD_BALANCER_FRONTEND_IP: "AZURE_LOAD_BALANCER_FRONTEND_IP",
	// AZURE_LOAD_BALANCER_INBOUND_NAT_POOL integration
	AZURE_LOAD_BALANCER_INBOUND_NAT_POOL: "AZURE_LOAD_BALANCER_INBOUND_NAT_POOL",
	// AZURE_LOAD_BALANCER_INBOUND_NAT_RULE integration
	AZURE_LOAD_BALANCER_INBOUND_NAT_RULE: "AZURE_LOAD_BALANCER_INBOUND_NAT_RULE",
	// AZURE_LOAD_BALANCER_PROBE integration
	AZURE_LOAD_BALANCER_PROBE: "AZURE_LOAD_BALANCER_PROBE",
	// AZURE_LOAD_BALANCER_RULE integration
	AZURE_LOAD_BALANCER_RULE: "AZURE_LOAD_BALANCER_RULE",
	// AZURE_MARIADB_SERVER integration
	AZURE_MARIADB_SERVER: "AZURE_MARIADB_SERVER",
	// AZURE_MYSQL_SERVER integration
	AZURE_MYSQL_SERVER: "AZURE_MYSQL_SERVER",
	// AZURE_POSTGRESQL_SERVER integration
	AZURE_POSTGRESQL_SERVER: "AZURE_POSTGRESQL_SERVER",
	// AZURE_REDIS_CACHE integration
	AZURE_REDIS_CACHE: "AZURE_REDIS_CACHE",
	// AZURE_REDIS_CACHE_SHARD integration
	AZURE_REDIS_CACHE_SHARD: "AZURE_REDIS_CACHE_SHARD",
	// AZURE_SERVICE_BUS_NAMESPACE integration
	AZURE_SERVICE_BUS_NAMESPACE: "AZURE_SERVICE_BUS_NAMESPACE",
	// AZURE_SERVICE_BUS_QUEUE integration
	AZURE_SERVICE_BUS_QUEUE: "AZURE_SERVICE_BUS_QUEUE",
	// AZURE_SERVICE_BUS_SUBSCRIPTION integration
	AZURE_SERVICE_BUS_SUBSCRIPTION: "AZURE_SERVICE_BUS_SUBSCRIPTION",
	// AZURE_SERVICE_BUS_TOPIC integration
	AZURE_SERVICE_BUS_TOPIC: "AZURE_SERVICE_BUS_TOPIC",
	// AZURE_SQL_DATABASE integration
	AZURE_SQL_DATABASE: "AZURE_SQL_DATABASE",
	// AZURE_SQL_ELASTIC_POOL integration
	AZURE_SQL_ELASTIC_POOL: "AZURE_SQL_ELASTIC_POOL",
	// AZURE_SQL_FIREWALL integration
	AZURE_SQL_FIREWALL: "AZURE_SQL_FIREWALL",
	// AZURE_SQL_REPLICATION_LINK integration
	AZURE_SQL_REPLICATION_LINK: "AZURE_SQL_REPLICATION_LINK",
	// AZURE_SQL_RESTORE_POINT integration
	AZURE_SQL_RESTORE_POINT: "AZURE_SQL_RESTORE_POINT",
	// AZURE_SQL_SERVER integration
	AZURE_SQL_SERVER: "AZURE_SQL_SERVER",
	// AZURE_STORAGE_ACCOUNT integration
	AZURE_STORAGE_ACCOUNT: "AZURE_STORAGE_ACCOUNT",
	// AZURE_VIRTUAL_NETWORKS integration
	AZURE_VIRTUAL_NETWORKS: "AZURE_VIRTUAL_NETWORKS",
	// AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION integration
	AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION: "AZURE_VIRTUAL_NETWORKS_IP_CONFIGURATION",
	// AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE integration
	AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE: "AZURE_VIRTUAL_NETWORKS_NETWORK_INTERFACE",
	// AZURE_VIRTUAL_NETWORKS_PEERING integration
	AZURE_VIRTUAL_NETWORKS_PEERING: "AZURE_VIRTUAL_NETWORKS_PEERING",
	// AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS integration
	AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS: "AZURE_VIRTUAL_NETWORKS_PUBLIC_IP_ADDRESS",
	// AZURE_VIRTUAL_NETWORKS_ROUTE integration
	AZURE_VIRTUAL_NETWORKS_ROUTE: "AZURE_VIRTUAL_NETWORKS_ROUTE",
	// AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE integration
	AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE: "AZURE_VIRTUAL_NETWORKS_ROUTE_TABLE",
	// AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP integration
	AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP: "AZURE_VIRTUAL_NETWORKS_SECURITY_GROUP",
	// AZURE_VIRTUAL_NETWORKS_SECURITY_RULE integration
	AZURE_VIRTUAL_NETWORKS_SECURITY_RULE: "AZURE_VIRTUAL_NETWORKS_SECURITY_RULE",
	// AZURE_VIRTUAL_NETWORKS_SUBNET integration
	AZURE_VIRTUAL_NETWORKS_SUBNET: "AZURE_VIRTUAL_NETWORKS_SUBNET",
	// CASSANDRA_NODE integration
	CASSANDRA_NODE: "CASSANDRA_NODE",
	// CONSUL_AGENT integration
	CONSUL_AGENT: "CONSUL_AGENT",
	// COUCHBASE_BUCKET integration
	COUCHBASE_BUCKET: "COUCHBASE_BUCKET",
	// COUCHBASE_CLUSTER integration
	COUCHBASE_CLUSTER: "COUCHBASE_CLUSTER",
	// COUCHBASE_NODE integration
	COUCHBASE_NODE: "COUCHBASE_NODE",
	// COUCHBASE_QUERY_ENGINE integration
	COUCHBASE_QUERY_ENGINE: "COUCHBASE_QUERY_ENGINE",
	// ELASTICSEARCH_NODE integration
	ELASTICSEARCH_NODE: "ELASTICSEARCH_NODE",
	// F5_NODE integration
	F5_NODE: "F5_NODE",
	// F5_POOL integration
	F5_POOL: "F5_POOL",
	// F5_POOL_MEMBER integration
	F5_POOL_MEMBER: "F5_POOL_MEMBER",
	// F5_SYSTEM integration
	F5_SYSTEM: "F5_SYSTEM",
	// F5_VIRTUAL_SERVER integration
	F5_VIRTUAL_SERVER: "F5_VIRTUAL_SERVER",
	// GCP_APP_ENGINE_SERVICE integration
	GCP_APP_ENGINE_SERVICE: "GCP_APP_ENGINE_SERVICE",
	// GCP_BIG_QUERY_DATA_SET integration
	GCP_BIG_QUERY_DATA_SET: "GCP_BIG_QUERY_DATA_SET",
	// GCP_BIG_QUERY_PROJECT integration
	GCP_BIG_QUERY_PROJECT: "GCP_BIG_QUERY_PROJECT",
	// GCP_BIG_QUERY_TABLE integration
	GCP_BIG_QUERY_TABLE: "GCP_BIG_QUERY_TABLE",
	// GCP_CLOUD_FUNCTION integration
	GCP_CLOUD_FUNCTION: "GCP_CLOUD_FUNCTION",
	// GCP_CLOUD_SQL integration
	GCP_CLOUD_SQL: "GCP_CLOUD_SQL",
	// GCP_CLOUD_TASKS_QUEUE integration
	GCP_CLOUD_TASKS_QUEUE: "GCP_CLOUD_TASKS_QUEUE",
	// GCP_HTTP_LOAD_BALANCER integration
	GCP_HTTP_LOAD_BALANCER: "GCP_HTTP_LOAD_BALANCER",
	// GCP_INTERNAL_LOAD_BALANCER integration
	GCP_INTERNAL_LOAD_BALANCER: "GCP_INTERNAL_LOAD_BALANCER",
	// GCP_KUBERNETES_CONTAINER integration
	GCP_KUBERNETES_CONTAINER: "GCP_KUBERNETES_CONTAINER",
	// GCP_KUBERNETES_NODE integration
	GCP_KUBERNETES_NODE: "GCP_KUBERNETES_NODE",
	// GCP_KUBERNETES_POD integration
	GCP_KUBERNETES_POD: "GCP_KUBERNETES_POD",
	// GCP_PUB_SUB_SUBSCRIPTION integration
	GCP_PUB_SUB_SUBSCRIPTION: "GCP_PUB_SUB_SUBSCRIPTION",
	// GCP_PUB_SUB_TOPIC integration
	GCP_PUB_SUB_TOPIC: "GCP_PUB_SUB_TOPIC",
	// GCP_SPANNER_DATABASE integration
	GCP_SPANNER_DATABASE: "GCP_SPANNER_DATABASE",
	// GCP_SPANNER_INSTANCE integration
	GCP_SPANNER_INSTANCE: "GCP_SPANNER_INSTANCE",
	// GCP_STORAGE_BUCKET integration
	GCP_STORAGE_BUCKET: "GCP_STORAGE_BUCKET",
	// GCP_TCP_SSL_PROXY_LOAD_BALANCER integration
	GCP_TCP_SSL_PROXY_LOAD_BALANCER: "GCP_TCP_SSL_PROXY_LOAD_BALANCER",
	// GCP_VIRTUAL_MACHINE_DISK integration
	GCP_VIRTUAL_MACHINE_DISK: "GCP_VIRTUAL_MACHINE_DISK",
	// KAFKA_BROKER integration
	KAFKA_BROKER: "KAFKA_BROKER",
	// KAFKA_TOPIC integration
	KAFKA_TOPIC: "KAFKA_TOPIC",
	// KUBERNETES_CLUSTER integration
	KUBERNETES_CLUSTER: "KUBERNETES_CLUSTER",
	// MEMCACHED_INSTANCE integration
	MEMCACHED_INSTANCE: "MEMCACHED_INSTANCE",
	// MSSQL_INSTANCE integration
	MSSQL_INSTANCE: "MSSQL_INSTANCE",
	// MYSQL_NODE integration
	MYSQL_NODE: "MYSQL_NODE",
	// NA integration
	NA: "NA",
	// NGINX_SERVER integration
	NGINX_SERVER: "NGINX_SERVER",
	// ORACLE_DB_INSTANCE integration
	ORACLE_DB_INSTANCE: "ORACLE_DB_INSTANCE",
	// POSTGRE_SQL_INSTANCE integration
	POSTGRE_SQL_INSTANCE: "POSTGRE_SQL_INSTANCE",
	// RABBIT_MQ_CLUSTER integration
	RABBIT_MQ_CLUSTER: "RABBIT_MQ_CLUSTER",
	// RABBIT_MQ_EXCHANGE integration
	RABBIT_MQ_EXCHANGE: "RABBIT_MQ_EXCHANGE",
	// RABBIT_MQ_NODE integration
	RABBIT_MQ_NODE: "RABBIT_MQ_NODE",
	// RABBIT_MQ_QUEUE integration
	RABBIT_MQ_QUEUE: "RABBIT_MQ_QUEUE",
	// REDIS_INSTANCE integration
	REDIS_INSTANCE: "REDIS_INSTANCE",
	// VARNISH_INSTANCE integration
	VARNISH_INSTANCE: "VARNISH_INSTANCE",
}

// EntityManagementAiToolParameterType - Enum for AiToolParameter
type EntityManagementAiToolParameterType string

var EntityManagementAiToolParameterTypeTypes = struct {
	// when the parameter type is boolean
	BOOLEAN EntityManagementAiToolParameterType
	// when the parameter type is integer
	INTEGER EntityManagementAiToolParameterType
	// when the parameter type is list
	LIST EntityManagementAiToolParameterType
	// when the parameter type is object/dict
	OBJECT EntityManagementAiToolParameterType
	// when the parameter type is String
	STRING EntityManagementAiToolParameterType
}{
	// when the parameter type is boolean
	BOOLEAN: "BOOLEAN",
	// when the parameter type is integer
	INTEGER: "INTEGER",
	// when the parameter type is list
	LIST: "LIST",
	// when the parameter type is object/dict
	OBJECT: "OBJECT",
	// when the parameter type is String
	STRING: "STRING",
}

// EntityManagementCategoryScopeType - Category scope can of two types: Account scope and Global scope
type EntityManagementCategoryScopeType string

var EntityManagementCategoryScopeTypeTypes = struct {
	// Account scope
	ACCOUNT EntityManagementCategoryScopeType
	// Global scope
	GLOBAL EntityManagementCategoryScopeType
}{
	// Account scope
	ACCOUNT: "ACCOUNT",
	// Global scope
	GLOBAL: "GLOBAL",
}

// EntityManagementEncodingName - The Encoding names options
type EntityManagementEncodingName string

var EntityManagementEncodingNameTypes = struct {
	// for gpt 4
	CL100_K_BASE EntityManagementEncodingName
	// For gpt 3
	GPT_3_5_TURBO EntityManagementEncodingName
	// For gpt4
	O200_K_BASE EntityManagementEncodingName
}{
	// for gpt 4
	CL100_K_BASE: "CL100_K_BASE",
	// For gpt 3
	GPT_3_5_TURBO: "GPT_3_5_TURBO",
	// For gpt4
	O200_K_BASE: "O200_K_BASE",
}

// EntityManagementEntityScope - The list of possible scopes of an entity.
type EntityManagementEntityScope string

var EntityManagementEntityScopeTypes = struct {
	// Account scope.
	ACCOUNT EntityManagementEntityScope
	// Organization scope.
	ORGANIZATION EntityManagementEntityScope
}{
	// Account scope.
	ACCOUNT: "ACCOUNT",
	// Organization scope.
	ORGANIZATION: "ORGANIZATION",
}

// EntityManagementExecutionStatus - Rule execution status
type EntityManagementExecutionStatus string

var EntityManagementExecutionStatusTypes = struct {
	// Rule execution failed due to an error.
	FAILED EntityManagementExecutionStatus
	// Rule executed with partial success, some issues occurred.
	PARTIAL_SUCCESS EntityManagementExecutionStatus
	// Rule executed successfully without any issues.
	SUCCESS EntityManagementExecutionStatus
}{
	// Rule execution failed due to an error.
	FAILED: "FAILED",
	// Rule executed with partial success, some issues occurred.
	PARTIAL_SUCCESS: "PARTIAL_SUCCESS",
	// Rule executed successfully without any issues.
	SUCCESS: "SUCCESS",
}

// EntityManagementExternalOwnerType - List of possible owner types of the repository.
type EntityManagementExternalOwnerType string

var EntityManagementExternalOwnerTypeTypes = struct {
	// group if the source is gitlab
	GROUP EntityManagementExternalOwnerType
	// organization if the source is github
	ORGANIZATION EntityManagementExternalOwnerType
	// Default value when the owner type cannot be found
	OTHER EntityManagementExternalOwnerType
	// individual user
	USER EntityManagementExternalOwnerType
	// workspace if the source is bitbucket
	WORKSPACE EntityManagementExternalOwnerType
}{
	// group if the source is gitlab
	GROUP: "GROUP",
	// organization if the source is github
	ORGANIZATION: "ORGANIZATION",
	// Default value when the owner type cannot be found
	OTHER: "OTHER",
	// individual user
	USER: "USER",
	// workspace if the source is bitbucket
	WORKSPACE: "WORKSPACE",
}

// EntityManagementFleetDeploymentPhase - Phases a fleet deployment can have
type EntityManagementFleetDeploymentPhase string

var EntityManagementFleetDeploymentPhaseTypes = struct {
	// Deployment rollout completed
	COMPLETED EntityManagementFleetDeploymentPhase
	// Deployment is in editable phase
	CREATED EntityManagementFleetDeploymentPhase
	// Indicates a deployment failed to deploy to all agents
	FAILED EntityManagementFleetDeploymentPhase
	// Indicates an internal failure in the deployment process
	INTERNAL_FAILURE EntityManagementFleetDeploymentPhase
	// Deployment is under rollout
	IN_PROGRESS EntityManagementFleetDeploymentPhase
}{
	// Deployment rollout completed
	COMPLETED: "COMPLETED",
	// Deployment is in editable phase
	CREATED: "CREATED",
	// Indicates a deployment failed to deploy to all agents
	FAILED: "FAILED",
	// Indicates an internal failure in the deployment process
	INTERNAL_FAILURE: "INTERNAL_FAILURE",
	// Deployment is under rollout
	IN_PROGRESS: "IN_PROGRESS",
}

// EntityManagementHostingPlatform - List of possible hosting platforms of the repository.
type EntityManagementHostingPlatform string

var EntityManagementHostingPlatformTypes = struct {
	// when the hosting platform is bitbucket
	BITBUCKET EntityManagementHostingPlatform
	// when the hosting platform is devlake
	DEVLAKE EntityManagementHostingPlatform
	// when the hosting platform is github
	GITHUB EntityManagementHostingPlatform
	// when the hosting platform is gitlab
	GITLAB EntityManagementHostingPlatform
	// Default value when the hosting platform cannot be found
	OTHER EntityManagementHostingPlatform
}{
	// when the hosting platform is bitbucket
	BITBUCKET: "BITBUCKET",
	// when the hosting platform is devlake
	DEVLAKE: "DEVLAKE",
	// when the hosting platform is github
	GITHUB: "GITHUB",
	// when the hosting platform is gitlab
	GITLAB: "GITLAB",
	// Default value when the hosting platform cannot be found
	OTHER: "OTHER",
}

// EntityManagementIssueType - Top level type for Inbox
type EntityManagementIssueType string

var EntityManagementIssueTypeTypes = struct {
	// Error issue
	ERROR EntityManagementIssueType
	// Performance issue
	PERFORMANCE EntityManagementIssueType
}{
	// Error issue
	ERROR: "ERROR",
	// Performance issue
	PERFORMANCE: "PERFORMANCE",
}

// EntityManagementLicenseName - List of possible repository license name.
type EntityManagementLicenseName string

var EntityManagementLicenseNameTypes = struct {
	// Academic Free License 3.0
	AFL_3_0 EntityManagementLicenseName
	// GNU Affero General Public License v3.0
	AGPL_3_0 EntityManagementLicenseName
	// Apache License 2.0
	APACHE_2_0 EntityManagementLicenseName
	// BSD 2-Clause License
	BSD_2_CLAUSE EntityManagementLicenseName
	// BSD 3-Clause License
	BSD_3_CLAUSE EntityManagementLicenseName
	// Boost Software License 1.0
	BSL_1_0 EntityManagementLicenseName
	// Creative Commons Zero v1.0 Universal
	CC0_1_0 EntityManagementLicenseName
	// Common Development and Distribution License
	CDDL EntityManagementLicenseName
	// Eclipse Public License 2.0
	EPL_2_0 EntityManagementLicenseName
	// GNU General Public License v2.0
	GPL_2_0 EntityManagementLicenseName
	// GNU General Public License v3.0
	GPL_3_0 EntityManagementLicenseName
	// GNU General Public License v3.0 only
	GPL_3_0_ONLY EntityManagementLicenseName
	// GNU General Public License v3.0 or later
	GPL_3_0_PLUS EntityManagementLicenseName
	// GNU Lesser General Public License v2.1
	LGPL_2_1 EntityManagementLicenseName
	// GNU Lesser General Public License v3.0
	LGPL_3_0 EntityManagementLicenseName
	// GNU Lesser General Public License v3.0 only
	LGPL_3_0_ONLY EntityManagementLicenseName
	// GNU Lesser General Public License v3.0 or later
	LGPL_3_0_PLUS EntityManagementLicenseName
	// MIT License
	MIT EntityManagementLicenseName
	// Mozilla Public License 1.1
	MPL_1_1 EntityManagementLicenseName
	// Mozilla Public License 2.0
	MPL_2_0 EntityManagementLicenseName
	// Default value when the license cannot be found
	NA EntityManagementLicenseName
	// The Unlicense
	UNLICENSE EntityManagementLicenseName
}{
	// Academic Free License 3.0
	AFL_3_0: "AFL_3_0",
	// GNU Affero General Public License v3.0
	AGPL_3_0: "AGPL_3_0",
	// Apache License 2.0
	APACHE_2_0: "APACHE_2_0",
	// BSD 2-Clause License
	BSD_2_CLAUSE: "BSD_2_CLAUSE",
	// BSD 3-Clause License
	BSD_3_CLAUSE: "BSD_3_CLAUSE",
	// Boost Software License 1.0
	BSL_1_0: "BSL_1_0",
	// Creative Commons Zero v1.0 Universal
	CC0_1_0: "CC0_1_0",
	// Common Development and Distribution License
	CDDL: "CDDL",
	// Eclipse Public License 2.0
	EPL_2_0: "EPL_2_0",
	// GNU General Public License v2.0
	GPL_2_0: "GPL_2_0",
	// GNU General Public License v3.0
	GPL_3_0: "GPL_3_0",
	// GNU General Public License v3.0 only
	GPL_3_0_ONLY: "GPL_3_0_ONLY",
	// GNU General Public License v3.0 or later
	GPL_3_0_PLUS: "GPL_3_0_PLUS",
	// GNU Lesser General Public License v2.1
	LGPL_2_1: "LGPL_2_1",
	// GNU Lesser General Public License v3.0
	LGPL_3_0: "LGPL_3_0",
	// GNU Lesser General Public License v3.0 only
	LGPL_3_0_ONLY: "LGPL_3_0_ONLY",
	// GNU Lesser General Public License v3.0 or later
	LGPL_3_0_PLUS: "LGPL_3_0_PLUS",
	// MIT License
	MIT: "MIT",
	// Mozilla Public License 1.1
	MPL_1_1: "MPL_1_1",
	// Mozilla Public License 2.0
	MPL_2_0: "MPL_2_0",
	// Default value when the license cannot be found
	NA: "NA",
	// The Unlicense
	UNLICENSE: "UNLICENSE",
}

// EntityManagementManagedEntityType - Entity types that a Fleet can manage
type EntityManagementManagedEntityType string

var EntityManagementManagedEntityTypeTypes = struct {
	// Infra Host
	HOST EntityManagementManagedEntityType
	// Kubernetes Cluster
	KUBERNETESCLUSTER EntityManagementManagedEntityType
}{
	// Infra Host
	HOST: "HOST",
	// Kubernetes Cluster
	KUBERNETESCLUSTER: "KUBERNETESCLUSTER",
}

// EntityManagementStatusCode - Rule execution status codes
type EntityManagementStatusCode string

var EntityManagementStatusCodeTypes = struct {
	// Indicates the rule execution was unable to proceed due to missing data from the source.
	MISSING_DATA_SOURCE EntityManagementStatusCode
	// System error
	SYSTEM_ERROR EntityManagementStatusCode
}{
	// Indicates the rule execution was unable to proceed due to missing data from the source.
	MISSING_DATA_SOURCE: "MISSING_DATA_SOURCE",
	// System error
	SYSTEM_ERROR: "SYSTEM_ERROR",
}

// EntityManagementSyncGroupRuleConditionType - The types of conditions for group sync rules.
type EntityManagementSyncGroupRuleConditionType string

var EntityManagementSyncGroupRuleConditionTypeTypes = struct {
	// Group name contains.
	CONTAINS EntityManagementSyncGroupRuleConditionType
	// Group name ends with.
	ENDS_WITH EntityManagementSyncGroupRuleConditionType
	// Group name starts with.
	STARTS_WITH EntityManagementSyncGroupRuleConditionType
}{
	// Group name contains.
	CONTAINS: "CONTAINS",
	// Group name ends with.
	ENDS_WITH: "ENDS_WITH",
	// Group name starts with.
	STARTS_WITH: "STARTS_WITH",
}

// EntityManagementTeamExternalIntegrationType - Possible types for the External Integration.
type EntityManagementTeamExternalIntegrationType string

var EntityManagementTeamExternalIntegrationTypeTypes = struct {
	// GitHub Team Integration.
	GITHUB_TEAM EntityManagementTeamExternalIntegrationType
	// IAM Group Integration.
	IAM_GROUP EntityManagementTeamExternalIntegrationType
	// ServiceNow Team Integration.
	SERVICENOW_TEAM EntityManagementTeamExternalIntegrationType
}{
	// GitHub Team Integration.
	GITHUB_TEAM: "GITHUB_TEAM",
	// IAM Group Integration.
	IAM_GROUP: "IAM_GROUP",
	// ServiceNow Team Integration.
	SERVICENOW_TEAM: "SERVICENOW_TEAM",
}

// EntityManagementTextSplitterType - The text splitter enum
type EntityManagementTextSplitterType string

var EntityManagementTextSplitterTypeTypes = struct {
	// For character splitter
	CHARACTER_TEXT_SPLITTER EntityManagementTextSplitterType
	// For markdown content splitting
	MARKDOWN_TEXT_SPLITTER EntityManagementTextSplitterType
	// For token text splitting
	TOKEN_TEXT_SPLITTER EntityManagementTextSplitterType
}{
	// For character splitter
	CHARACTER_TEXT_SPLITTER: "CHARACTER_TEXT_SPLITTER",
	// For markdown content splitting
	MARKDOWN_TEXT_SPLITTER: "MARKDOWN_TEXT_SPLITTER",
	// For token text splitting
	TOKEN_TEXT_SPLITTER: "TOKEN_TEXT_SPLITTER",
}

// EntityRelationshipEdgeDirection - Values for relationship direction filter.
type EntityRelationshipEdgeDirection string

var EntityRelationshipEdgeDirectionTypes = struct {
	// Traverse both inbound and outbound connections.
	BOTH EntityRelationshipEdgeDirection
	// Traverse inbound connections to the source of the relationship.
	INBOUND EntityRelationshipEdgeDirection
	// Traverse outbound connections to the target of the relationship.
	OUTBOUND EntityRelationshipEdgeDirection
}{
	// Traverse both inbound and outbound connections.
	BOTH: "BOTH",
	// Traverse inbound connections to the source of the relationship.
	INBOUND: "INBOUND",
	// Traverse outbound connections to the target of the relationship.
	OUTBOUND: "OUTBOUND",
}

// EntityRelationshipEdgeType - The type of the relationship.
type EntityRelationshipEdgeType string

var EntityRelationshipEdgeTypeTypes = struct {
	// The target entity contains the code for the source entity.
	BUILT_FROM EntityRelationshipEdgeType
	// The source entity bypasses the target entity.
	BYPASS_CALLS EntityRelationshipEdgeType
	// The source entity calls the target entity.
	CALLS EntityRelationshipEdgeType
	// The source entity has a connection to the target entity.
	CONNECTS_TO EntityRelationshipEdgeType
	// The source entity consumes messages from a target kafka topic or other queue systems.
	CONSUMES EntityRelationshipEdgeType
	// The source entity contains the target entity.
	CONTAINS EntityRelationshipEdgeType
	// The source entity hosts the target.
	HOSTS EntityRelationshipEdgeType
	// The source and target entities are perspectives on the same thing.
	IS EntityRelationshipEdgeType
	// The source entity manages the target, that represents a subsystem of the source.
	MANAGES EntityRelationshipEdgeType
	// The source entity is used to measure the target entity.
	MEASURES EntityRelationshipEdgeType
	// The source entity monitors the target entity.
	MONITORS EntityRelationshipEdgeType
	// The source operates in the target entity, e.g. a region or a data center.
	OPERATES_IN EntityRelationshipEdgeType
	// The source entity owns the target entity.
	OWNS EntityRelationshipEdgeType
	// The source entity produces messages to a target kafka topic or other queue systems.
	PRODUCES EntityRelationshipEdgeType
	// Captures a security relationship where the source entity provides a security mechanism for the target entity. For example, an Identity Provider (IdP) securing an application or a firewall securing a host
	SECURES EntityRelationshipEdgeType
	// The source is an Application that serves the target Browser application.
	SERVES EntityRelationshipEdgeType
	// The source entity initiates an action in the target entity.
	TRIGGERS EntityRelationshipEdgeType
}{
	// The target entity contains the code for the source entity.
	BUILT_FROM: "BUILT_FROM",
	// The source entity bypasses the target entity.
	BYPASS_CALLS: "BYPASS_CALLS",
	// The source entity calls the target entity.
	CALLS: "CALLS",
	// The source entity has a connection to the target entity.
	CONNECTS_TO: "CONNECTS_TO",
	// The source entity consumes messages from a target kafka topic or other queue systems.
	CONSUMES: "CONSUMES",
	// The source entity contains the target entity.
	CONTAINS: "CONTAINS",
	// The source entity hosts the target.
	HOSTS: "HOSTS",
	// The source and target entities are perspectives on the same thing.
	IS: "IS",
	// The source entity manages the target, that represents a subsystem of the source.
	MANAGES: "MANAGES",
	// The source entity is used to measure the target entity.
	MEASURES: "MEASURES",
	// The source entity monitors the target entity.
	MONITORS: "MONITORS",
	// The source operates in the target entity, e.g. a region or a data center.
	OPERATES_IN: "OPERATES_IN",
	// The source entity owns the target entity.
	OWNS: "OWNS",
	// The source entity produces messages to a target kafka topic or other queue systems.
	PRODUCES: "PRODUCES",
	// Captures a security relationship where the source entity provides a security mechanism for the target entity. For example, an Identity Provider (IdP) securing an application or a firewall securing a host
	SECURES: "SECURES",
	// The source is an Application that serves the target Browser application.
	SERVES: "SERVES",
	// The source entity initiates an action in the target entity.
	TRIGGERS: "TRIGGERS",
}

// EntityRelationshipType - The type of the relationship.
//
// For details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
type EntityRelationshipType string

var EntityRelationshipTypeTypes = struct {
	// The source repository containing the code for the target
	BUILT_FROM EntityRelationshipType
	// The source entity calls the target entity.
	CALLS EntityRelationshipType
	// The source establishes TCP connections to the target
	CONNECTS_TO EntityRelationshipType
	// The source entity contains the target entity
	CONTAINS EntityRelationshipType
	// The source entity hosts the target
	HOSTS EntityRelationshipType
	// The source and target entities are perspectives on the same thing
	IS EntityRelationshipType
	// The source is an Application that serves the target Browser application
	SERVES EntityRelationshipType
	// Type not known
	UNKNOWN EntityRelationshipType
}{
	// The source repository containing the code for the target
	BUILT_FROM: "BUILT_FROM",
	// The source entity calls the target entity.
	CALLS: "CALLS",
	// The source establishes TCP connections to the target
	CONNECTS_TO: "CONNECTS_TO",
	// The source entity contains the target entity
	CONTAINS: "CONTAINS",
	// The source entity hosts the target
	HOSTS: "HOSTS",
	// The source and target entities are perspectives on the same thing
	IS: "IS",
	// The source is an Application that serves the target Browser application
	SERVES: "SERVES",
	// Type not known
	UNKNOWN: "UNKNOWN",
}

// EntitySearchCountsFacet - Possible entity search count facets.
type EntitySearchCountsFacet string

var EntitySearchCountsFacetTypes = struct {
	// Facet by account id.
	ACCOUNT_ID EntitySearchCountsFacet
	// Facet by alert severity.
	ALERT_SEVERITY EntitySearchCountsFacet
	// Facet by entity domain.
	DOMAIN EntitySearchCountsFacet
	// Facet by entity domain and entity type.
	DOMAIN_TYPE EntitySearchCountsFacet
	// Facet by entity name
	NAME EntitySearchCountsFacet
	// Facet by reporting state.
	REPORTING EntitySearchCountsFacet
	// Facet by entity type.
	TYPE EntitySearchCountsFacet
}{
	// Facet by account id.
	ACCOUNT_ID: "ACCOUNT_ID",
	// Facet by alert severity.
	ALERT_SEVERITY: "ALERT_SEVERITY",
	// Facet by entity domain.
	DOMAIN: "DOMAIN",
	// Facet by entity domain and entity type.
	DOMAIN_TYPE: "DOMAIN_TYPE",
	// Facet by entity name
	NAME: "NAME",
	// Facet by reporting state.
	REPORTING: "REPORTING",
	// Facet by entity type.
	TYPE: "TYPE",
}

// EntityType - The specific type of entity
type EntityType string

var EntityTypeTypes = struct {
	// An APM Application
	APM_APPLICATION_ENTITY EntityType
	// A database instance seen by an APM Application
	APM_DATABASE_INSTANCE_ENTITY EntityType
	// An external service seen by an APM Application
	APM_EXTERNAL_SERVICE_ENTITY EntityType
	// A Browser Application
	BROWSER_APPLICATION_ENTITY EntityType
	// A Dashboard entity
	DASHBOARD_ENTITY EntityType
	// An External entity. For more information about defining External entities, see the [open source documentation](https://github.com/newrelic-experimental/entity-synthesis-definitions).
	EXTERNAL_ENTITY EntityType
	// A Generic entity with no detailed data
	GENERIC_ENTITY EntityType
	// An Infrastructure entity
	GENERIC_INFRASTRUCTURE_ENTITY EntityType
	// An Infrastructure Integration AWS Lambda Function entity
	INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY EntityType
	// An Infrastructure Host entity
	INFRASTRUCTURE_HOST_ENTITY EntityType
	// A Key Transaction entity
	KEY_TRANSACTION_ENTITY EntityType
	// A Mobile Application
	MOBILE_APPLICATION_ENTITY EntityType
	// A Secure Credential entity
	SECURE_CREDENTIAL_ENTITY EntityType
	// A Synthetic Monitor entity
	SYNTHETIC_MONITOR_ENTITY EntityType
	// A Team Entity
	TEAM_ENTITY EntityType
	// A Third Party Service entity
	THIRD_PARTY_SERVICE_ENTITY EntityType
	// A entity that is unavailable
	UNAVAILABLE_ENTITY EntityType
	// A Workload entity
	WORKLOAD_ENTITY EntityType
}{
	// An APM Application
	APM_APPLICATION_ENTITY: "APM_APPLICATION_ENTITY",
	// A database instance seen by an APM Application
	APM_DATABASE_INSTANCE_ENTITY: "APM_DATABASE_INSTANCE_ENTITY",
	// An external service seen by an APM Application
	APM_EXTERNAL_SERVICE_ENTITY: "APM_EXTERNAL_SERVICE_ENTITY",
	// A Browser Application
	BROWSER_APPLICATION_ENTITY: "BROWSER_APPLICATION_ENTITY",
	// A Dashboard entity
	DASHBOARD_ENTITY: "DASHBOARD_ENTITY",
	// An External entity. For more information about defining External entities, see the [open source documentation](https://github.com/newrelic-experimental/entity-synthesis-definitions).
	EXTERNAL_ENTITY: "EXTERNAL_ENTITY",
	// A Generic entity with no detailed data
	GENERIC_ENTITY: "GENERIC_ENTITY",
	// An Infrastructure entity
	GENERIC_INFRASTRUCTURE_ENTITY: "GENERIC_INFRASTRUCTURE_ENTITY",
	// An Infrastructure Integration AWS Lambda Function entity
	INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY: "INFRASTRUCTURE_AWS_LAMBDA_FUNCTION_ENTITY",
	// An Infrastructure Host entity
	INFRASTRUCTURE_HOST_ENTITY: "INFRASTRUCTURE_HOST_ENTITY",
	// A Key Transaction entity
	KEY_TRANSACTION_ENTITY: "KEY_TRANSACTION_ENTITY",
	// A Mobile Application
	MOBILE_APPLICATION_ENTITY: "MOBILE_APPLICATION_ENTITY",
	// A Secure Credential entity
	SECURE_CREDENTIAL_ENTITY: "SECURE_CREDENTIAL_ENTITY",
	// A Synthetic Monitor entity
	SYNTHETIC_MONITOR_ENTITY: "SYNTHETIC_MONITOR_ENTITY",
	// A Team Entity
	TEAM_ENTITY: "TEAM_ENTITY",
	// A Third Party Service entity
	THIRD_PARTY_SERVICE_ENTITY: "THIRD_PARTY_SERVICE_ENTITY",
	// A entity that is unavailable
	UNAVAILABLE_ENTITY: "UNAVAILABLE_ENTITY",
	// A Workload entity
	WORKLOAD_ENTITY: "WORKLOAD_ENTITY",
}

// MetricNormalizationRuleAction - The different rule actions.
type MetricNormalizationRuleAction string

var MetricNormalizationRuleActionTypes = struct {
	// Deny new metrics.
	DENY_NEW_METRICS MetricNormalizationRuleAction
	// Ignore matching metrics.
	IGNORE MetricNormalizationRuleAction
	// Replace metrics.
	REPLACE MetricNormalizationRuleAction
}{
	// Deny new metrics.
	DENY_NEW_METRICS: "DENY_NEW_METRICS",
	// Ignore matching metrics.
	IGNORE: "IGNORE",
	// Replace metrics.
	REPLACE: "REPLACE",
}

// ServiceLevelEventsQuerySelectFunction - The function to use in the SELECT clause.
type ServiceLevelEventsQuerySelectFunction string

var ServiceLevelEventsQuerySelectFunctionTypes = struct {
	// Use on events and unaggregated data.
	COUNT ServiceLevelEventsQuerySelectFunction
	// Use on distribution metric types.
	GET_CDF_COUNT ServiceLevelEventsQuerySelectFunction
	// Use in valid events combined with GET_CDF_COUNT.
	GET_FIELD ServiceLevelEventsQuerySelectFunction
	// Use on aggregated counts.
	SUM ServiceLevelEventsQuerySelectFunction
}{
	// Use on events and unaggregated data.
	COUNT: "COUNT",
	// Use on distribution metric types.
	GET_CDF_COUNT: "GET_CDF_COUNT",
	// Use in valid events combined with GET_CDF_COUNT.
	GET_FIELD: "GET_FIELD",
	// Use on aggregated counts.
	SUM: "SUM",
}

// ServiceLevelObjectiveRollingTimeWindowUnit - The rolling time window units.
type ServiceLevelObjectiveRollingTimeWindowUnit string

var ServiceLevelObjectiveRollingTimeWindowUnitTypes = struct {
	// Day.
	DAY ServiceLevelObjectiveRollingTimeWindowUnit
}{
	// Day.
	DAY: "DAY",
}

type SyntheticMonitorStatus string

var SyntheticMonitorStatusTypes = struct {
	DELETED  SyntheticMonitorStatus
	DISABLED SyntheticMonitorStatus
	ENABLED  SyntheticMonitorStatus
	FAULTY   SyntheticMonitorStatus
	MUTED    SyntheticMonitorStatus
	PAUSED   SyntheticMonitorStatus
}{
	DELETED:  "DELETED",
	DISABLED: "DISABLED",
	ENABLED:  "ENABLED",
	FAULTY:   "FAULTY",
	MUTED:    "MUTED",
	PAUSED:   "PAUSED",
}

// SyntheticMonitorType - The types of Synthetic Monitors.
type SyntheticMonitorType string

var SyntheticMonitorTypeTypes = struct {
	BROKEN_LINKS   SyntheticMonitorType
	BROWSER        SyntheticMonitorType
	CERT_CHECK     SyntheticMonitorType
	SCRIPT_API     SyntheticMonitorType
	SCRIPT_BROWSER SyntheticMonitorType
	SIMPLE         SyntheticMonitorType
	STEP_MONITOR   SyntheticMonitorType
}{
	BROKEN_LINKS:   "BROKEN_LINKS",
	BROWSER:        "BROWSER",
	CERT_CHECK:     "CERT_CHECK",
	SCRIPT_API:     "SCRIPT_API",
	SCRIPT_BROWSER: "SCRIPT_BROWSER",
	SIMPLE:         "SIMPLE",
	STEP_MONITOR:   "STEP_MONITOR",
}

// WorkloadStatusSource - Indicates where the status value derives from.
type WorkloadStatusSource string

var WorkloadStatusSourceTypes = struct {
	// Refers to the result of an automatic rule defined for a workload.
	ROLLUP_RULE WorkloadStatusSource
	// Refers to a static status defined for a workload.
	STATIC WorkloadStatusSource
	// Refers to an undetermined status source.
	UNKNOWN WorkloadStatusSource
	// Refers to the override policy that is applied to a set of partial results within a workload. Any static status always overrides any other status values calculated automatically. Otherwise, the worst status of the partial results is rolled up.
	WORKLOAD WorkloadStatusSource
}{
	// Refers to the result of an automatic rule defined for a workload.
	ROLLUP_RULE: "ROLLUP_RULE",
	// Refers to a static status defined for a workload.
	STATIC: "STATIC",
	// Refers to an undetermined status source.
	UNKNOWN: "UNKNOWN",
	// Refers to the override policy that is applied to a set of partial results within a workload. Any static status always overrides any other status values calculated automatically. Otherwise, the worst status of the partial results is rolled up.
	WORKLOAD: "WORKLOAD",
}

// WorkloadStatusValue - The status of the workload, which is derived from the static and the automatic statuses configured. Any static status always overrides any other status values calculated automatically.
type WorkloadStatusValue string

var WorkloadStatusValueTypes = struct {
	// The status of the workload is degraded.
	DEGRADED WorkloadStatusValue
	// The status of the workload is disrupted.
	DISRUPTED WorkloadStatusValue
	// The status of the workload is operational.
	OPERATIONAL WorkloadStatusValue
	// The status of the workload is unknown.
	UNKNOWN WorkloadStatusValue
}{
	// The status of the workload is degraded.
	DEGRADED: "DEGRADED",
	// The status of the workload is disrupted.
	DISRUPTED: "DISRUPTED",
	// The status of the workload is operational.
	OPERATIONAL: "OPERATIONAL",
	// The status of the workload is unknown.
	UNKNOWN: "UNKNOWN",
}

// AccountOutline - The `AccountOutline` object provides basic data about an account.
type AccountOutline struct {
	ID   int    `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
	// Returns event types that are currently reporting in the account.
	ReportingEventTypes []string `json:"reportingEventTypes,omitempty"`
}

// AccountReference - The `AccountReference` object provides basic identifying information about the account.
type AccountReference struct {
	ID   int    `json:"id,omitempty"`
	Name string `json:"name,omitempty"`
}

// Actor - The `Actor` object contains fields that are scoped to the API user's access level.
type Actor struct {
	// The `accounts` field returns all accounts that the Actor is authorized to view.
	Accounts []AccountOutline `json:"accounts,omitempty"`
	// Fetch a list of entities.
	//
	// You can fetch a max of 25 entities in one query.
	//
	// For more details on entities, visit our [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
	Entities []EntityInterface `json:"entities,omitempty"`
	// Fetch a single entity.
	//
	// For more details on entities, visit our [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
	Entity EntityInterface `json:"entity,omitempty"`
	// This field provides access to EntityManagement data.
	EntityManagement EntityManagementActorStitchedFields `json:"entityManagement,omitempty"`
	// Search for entities using a custom query.
	//
	// For more details on how to create a custom query
	// and what entity data you can request, visit our
	// [entity docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
	//
	// Note: you must supply either a `query` OR a `queryBuilder` argument, not both.
	EntitySearch EntitySearch `json:"entitySearch,omitempty"`
}

// AgentApplicationSegmentsBrowserSegmentAllowList - The allow list object for browser applications.
type AgentApplicationSegmentsBrowserSegmentAllowList struct {
	// The url segments that are allowed.
	Segments []string `json:"segments,omitempty"`
}

// AgentApplicationSegmentsSegmentAllowListFilters - Filter the allow lists by fields specified in this object.
type AgentApplicationSegmentsSegmentAllowListFilters struct {
	// INTERNAL or USER. Defaults to USER
	ListType AgentApplicationSegmentsListType `json:"listType,omitempty"`
}

// AgentApplicationSettingsApmBase - Settings that are applicable to APM applications and their agents.
type AgentApplicationSettingsApmBase struct {
	// The name for the application
	Alias string `json:"alias,omitempty"`
	// Access general settings for the application.
	ApmConfig AgentApplicationSettingsApmConfig `json:"apmConfig"`
	// Access log forwarding settings for the application.
	ApplicationLogging AgentApplicationSettingsApplicationLogging `json:"applicationLogging,omitempty"`
	// Enable or disable the capture of memcache keys.
	CaptureMemcacheKeys bool `json:"captureMemcacheKeys,omitempty"`
	// Access error collector settings for the application. The error collector captures information about uncaught exceptions and sends them to New Relic for viewing.
	ErrorCollector AgentApplicationSettingsErrorCollector `json:"errorCollector,omitempty"`
	// Access enabled state for the Java Flight Recorder. This is available only for the Java language agent version 8.0.0 or later.
	Jfr AgentApplicationSettingsJfr `json:"jfr,omitempty"`
	// The name originally given to the application for reporting.
	OriginalName string `json:"originalName,omitempty"`
	// In APM, when transaction traces are collected, there may be additional Slow query data available.
	SlowSql AgentApplicationSettingsSlowSql `json:"slowSql,omitempty"`
	// Measures wall clock time, CPU time, and method call counts in your application's threads as they run.
	ThreadProfiler AgentApplicationSettingsThreadProfiler `json:"threadProfiler,omitempty"`
	// Type of tracer used. APM's cross application tracing links transactions between APM apps in your service-oriented architecture (SOA).  Distributed tracing is an improvement on the cross application tracing feature, and is recommended for large, distributed systems.
	TracerType AgentApplicationSettingsTracer `json:"tracerType,omitempty"`
	// Access transaction tracer settings for the application.
	TransactionTracer AgentApplicationSettingsTransactionTracer `json:"transactionTracer,omitempty"`
}

// AgentApplicationSettingsApmConfig - General settings related to APM applications.
type AgentApplicationSettingsApmConfig struct {
	// The desired target for the APDEX measurement of this APM application.
	ApdexTarget float64 `json:"apdexTarget,omitempty"`
	// Sets if agents for this APM application should get some of their configuration from the server.
	UseServerSideConfig bool `json:"useServerSideConfig,omitempty"`
}

// AgentApplicationSettingsApplicationExitInfo - Reports on application exits, which can be used to determine if an application is not responding.
type AgentApplicationSettingsApplicationExitInfo struct {
	// Whether or not application exit info is collected.
	Enabled bool `json:"enabled"`
}

// AgentApplicationSettingsApplicationLogging - Monitoring application logs is crucial for maintaining health and performance, directly impacting user satisfaction, operational efficiency, and overall product quality.
type AgentApplicationSettingsApplicationLogging struct {
	// Configure agent to capture logs and forward them to New Relic One.
	Enabled bool `json:"enabled,omitempty"`
	// Manages the configuration for automatic log forwarding for APM, including logs in context.
	Forwarding AgentApplicationSettingsForwarding `json:"forwarding,omitempty"`
	// Controls whether locally stored log lines are decorated or not. This is independent of whether log forwarding is enabled or not and is used to support customers that want to use a separate log forwarding solution.
	LocalDecorating AgentApplicationSettingsLocalDecorating `json:"localDecorating,omitempty"`
	// Enables the capture of metrics information about your logs and log levels, which is displayed in a chart on the APM Summary page.
	Metrics AgentApplicationSettingsMetrics `json:"metrics,omitempty"`
}

// AgentApplicationSettingsBrowserAjax - Enables ajax traces in the browser app.
type AgentApplicationSettingsBrowserAjax struct {
	// List of domains excluded from Ajax traces by the browser agent.
	DenyList []string `json:"denyList"`
}

// AgentApplicationSettingsBrowserBase - Settings that are applicable to browser applications.
type AgentApplicationSettingsBrowserBase struct {
	// Access general settings for the application.
	BrowserConfig AgentApplicationSettingsBrowserConfig `json:"browserConfig"`
	// browser monitoring provides real user monitoring (RUM) that measures the speed and performance of end users as they navigate the application using different web browsers, devices, operating systems, and networks.
	BrowserMonitoring AgentApplicationSettingsBrowserMonitoring `json:"browserMonitoring"`
	// Session Replay configuration.
	SessionReplay AgentApplicationSettingsSessionReplay `json:"sessionReplay"`
	// Session Trace configuration.
	SessionTrace AgentApplicationSettingsSessionTrace `json:"sessionTrace"`
}

// AgentApplicationSettingsBrowserConfig - General settings related to APM applications.
type AgentApplicationSettingsBrowserConfig struct {
	// The desired target for the APDEX measurement of this browser application.
	ApdexTarget float64 `json:"apdexTarget,omitempty"`
}

// AgentApplicationSettingsBrowserDistributedTracing - Distributed tracing type. See [documentation](https://docs.newrelic.com/docs/browser/new-relic-browser/browser-pro-features/browser-data-distributed-tracing/) for further information.
type AgentApplicationSettingsBrowserDistributedTracing struct {
	// List of allowed origins for use with distributed tracing.
	AllowedOrigins []string `json:"allowedOrigins"`
	// Whether or not CORS is enabled in distributed tracing.
	CorsEnabled bool `json:"corsEnabled,omitempty"`
	// Whether or not CORS uses the `newrelic` header in distributed tracing.
	CorsUseNewrelicHeader bool `json:"corsUseNewrelicHeader,omitempty"`
	// Whether or not CORS uses tracecontext headers in distributed tracing.
	CorsUseTracecontextHeaders bool `json:"corsUseTracecontextHeaders,omitempty"`
	// Whether or not distributed tracing is enabled.
	Enabled bool `json:"enabled,omitempty"`
	// Whether or not to exclude the `newrelic` header in distributed tracing.
	ExcludeNewrelicHeader bool `json:"excludeNewrelicHeader,omitempty"`
}

// AgentApplicationSettingsBrowserMonitoring - Provides fields to set browser monitoring application settings.
type AgentApplicationSettingsBrowserMonitoring struct {
	// Enables ajax traces in the browser app.
	Ajax AgentApplicationSettingsBrowserAjax `json:"ajax,omitempty"`
	// Distributed tracing type. See [documentation](https://docs.newrelic.com/docs/browser/new-relic-browser/browser-pro-features/browser-data-distributed-tracing/) for further information.
	DistributedTracing AgentApplicationSettingsBrowserDistributedTracing `json:"distributedTracing"`
	// The type of browser agent that will be loaded.
	Loader AgentApplicationSettingsBrowserLoader `json:"loader"`
	// Specify the semantic version of the browser agent that you would like your app to use. Leave this blank to use the most recent version. Use 'x' in place of a numeric digit to represent the latest release within the version range. For example, '1.x.x'
	PinnedVersion string `json:"pinnedVersion,omitempty"`
	// Browser privacy. See [documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/page-load-timing-resources/cookie-collection-session-tracking/) for further information.
	Privacy AgentApplicationSettingsBrowserPrivacy `json:"privacy"`
}

// AgentApplicationSettingsBrowserPrivacy - Browser privacy. See [documentation](https://docs.newrelic.com/docs/browser/browser-monitoring/page-load-timing-resources/cookie-collection-session-tracking/) for further information.
type AgentApplicationSettingsBrowserPrivacy struct {
	// Whether or not cookies are enabled.
	CookiesEnabled bool `json:"cookiesEnabled"`
}

// AgentApplicationSettingsBrowserProperties - General Properties related to browser applications.
type AgentApplicationSettingsBrowserProperties struct {
	// The configuration required to run the npm version of the JS agent. This is the "pure" JSON configuration block without surrounding HTML <script> tags.
	JsConfig AgentApplicationSettingsRawJsConfiguration `json:"jsConfig,omitempty"`
	// The configuration block required to run the npm version of the JS agent. This includes the HTML <script> tags.
	JsConfigScript string `json:"jsConfigScript,omitempty"`
	// The snippet of JavaScript used to copy/paste into your JavaScript app if you aren’t using an auto-instrumentating agent on the backend.
	JsLoaderScript string `json:"jsLoaderScript,omitempty"`
}

// AgentApplicationSettingsErrorCollector - The error collector captures information about uncaught exceptions and sends them to New Relic for viewing. For more information about what these settings do and which ones are applicable for your application, please see https://docs.newrelic.com for more information about agent configuration for your language agent.
type AgentApplicationSettingsErrorCollector struct {
	// Enables error collector.
	Enabled bool `json:"enabled,omitempty"`
	// Prevents specified exception classes from affecting error rate or Apdex score while still reporting the errors to APM.
	ExpectedErrorClasses []string `json:"expectedErrorClasses"`
	// An array of individual HTTP status codes to be marked as expected and thus prevented from affecting error rate or Apdex score.
	ExpectedErrorCodes []AgentApplicationSettingsErrorCollectorHttpStatus `json:"expectedErrorCodes"`
	// Specified exception class names will be ignored and will not affect error rate or Apdex score, or be reported to APM.
	IgnoredErrorClasses []string `json:"ignoredErrorClasses"`
	// An array of individual HTTP status codes that should not be treated as errors.
	IgnoredErrorCodes []AgentApplicationSettingsErrorCollectorHttpStatus `json:"ignoredErrorCodes"`
}

// AgentApplicationSettingsForwarding - Manages the configuration for automatic log forwarding for APM, including logs in context.
type AgentApplicationSettingsForwarding struct {
	// This controls the number of logs sent per minute.
	Enabled bool `json:"enabled,omitempty"`
	// This controls the number of logs sent per minute.
	MaxSamplesStored int `json:"maxSamplesStored,omitempty"`
}

// AgentApplicationSettingsIgnoredStatusCodeRule - A configuration setting used ignore status codes associated with different hosts.
type AgentApplicationSettingsIgnoredStatusCodeRule struct {
	// An array of hosts to apply the status code rule to.
	Hosts []string `json:"hosts"`
	// An array of status codes to be be ignored on these hosts.
	StatusCodes []string `json:"statusCodes"`
}

// AgentApplicationSettingsJfr - Access to the enabled state of the Java Flight Recorder. This feature only available on the Java language agent version 8.0.0 or later.
type AgentApplicationSettingsJfr struct {
	// If true, the java agent collects Java Flight Recorder data. (Java Agent version 8.0.0 required.)
	Enabled bool `json:"enabled,omitempty"`
}

// AgentApplicationSettingsLocalDecorating - Controls whether locally stored log lines are decorated or not. This is independent of whether log forwarding is enabled or not and is used to support customers that want to use a separate log forwarding solution.
type AgentApplicationSettingsLocalDecorating struct {
	// Enables application logging local decorating.
	Enabled bool `json:"enabled,omitempty"`
}

// AgentApplicationSettingsMaskInputOptions - Mask specific kinds of input options as *.
type AgentApplicationSettingsMaskInputOptions struct {
	// Mask 'color' input type.
	Color bool `json:"color"`
	// Mask 'date' input type.
	Date bool `json:"date"`
	// Mask 'datetime_local' input type.
	DatetimeLocal bool `json:"datetimeLocal"`
	// Mask 'email' input type.
	Email bool `json:"email"`
	// Mask 'month' input type.
	Month bool `json:"month"`
	// Mask 'number' input type.
	Number bool `json:"number"`
	// Mask 'range' input type.
	Range bool `json:"range"`
	// Mask 'search' input type.
	Search bool `json:"search"`
	// Mask 'select' input type.
	Select bool `json:"select"`
	// Mask 'tel' input type.
	Tel bool `json:"tel"`
	// Mask 'text' input type.
	Text bool `json:"text"`
	// Mask 'textarea' input type.
	TextArea bool `json:"textArea"`
	// Mask 'time' input type.
	Time bool `json:"time"`
	// Mask 'url' input type.
	URL bool `json:"url"`
	// Mask 'week' input type.
	Week bool `json:"week"`
}

// AgentApplicationSettingsMetrics - Enables the capture of metrics information about your logs and log levels, which is displayed in a chart on the APM Summary page.
type AgentApplicationSettingsMetrics struct {
	// Enables application logging metrics.
	Enabled bool `json:"enabled,omitempty"`
}

// AgentApplicationSettingsMobileBase - Settings that are applicable to mobile applications
type AgentApplicationSettingsMobileBase struct {
	// Reports on application exits, which can be used to determine if an application is not responding.
	ApplicationExitInfo AgentApplicationSettingsApplicationExitInfo `json:"applicationExitInfo"`
	// Mobile Session Replay configuration.
	MobileSessionReplay AgentApplicationSettingsMobileSessionReplay `json:"mobileSessionReplay,omitempty"`
	// Network settings associated with the mobile application.
	NetworkSettings AgentApplicationSettingsMobileNetworkSettings `json:"networkSettings,omitempty"`
	// Enables viewing in-depth reports for mobile application crashes.
	UseCrashReports bool `json:"useCrashReports,omitempty"`
}

// AgentApplicationSettingsMobileNetworkSettings - Network settings associated with the mobile application.
type AgentApplicationSettingsMobileNetworkSettings struct {
	// A list of configuration settings that map host to alias names for grouping and identification purposes.
	Aliases []AgentApplicationSettingsNetworkAlias `json:"aliases"`
	// Configuration setting to apply either the show or hide strategy for network filtering.
	FilterMode AgentApplicationSettingsNetworkFilterMode `json:"filterMode,omitempty"`
	// A list of hostnames that would be applied to our filter settings when the filterMode is 'HIDE.'
	HideList []string `json:"hideList"`
	// A list of rules to ignore status codes associated with different hosts.
	IgnoredStatusCodeRules []AgentApplicationSettingsIgnoredStatusCodeRule `json:"ignoredStatusCodeRules"`
	// A list of hostnames that would be applied to our filter settings when the filterMode is 'SHOW.'
	ShowList []string `json:"showList"`
}

// AgentApplicationSettingsMobileProperties - General properties related to mobile applications.
type AgentApplicationSettingsMobileProperties struct {
	// A token used to authenticate your mobile application for data ingest.
	ApplicationToken SecureValue `json:"applicationToken,omitempty"`
}

// AgentApplicationSettingsMobileSessionReplay - Mobile Session Replay configuration.
type AgentApplicationSettingsMobileSessionReplay struct {
	// Rules to mask or unmask specific components or views. These rules override other masking settings.
	CustomMaskingRules AgentApplicationSettingsCustomJsConfiguration `json:"customMaskingRules,omitempty"`
	// Mobile Session Replay enabled.
	Enabled bool `json:"enabled"`
	// Percentage from 0-10 specifying how many of all user sessions that contain errors should be recorded.
	ErrorSamplingRate float64 `json:"errorSamplingRate"`
	// Replace all images with placeholder
	MaskAllImages bool `json:"maskAllImages"`
	// Ignore all user input from recording
	MaskAllUserTouches bool `json:"maskAllUserTouches"`
	// Mask all application text content as *
	MaskApplicationText bool `json:"maskApplicationText"`
	// Mask all input text content as *
	MaskUserInputText bool `json:"maskUserInputText"`
	// Toggle between default masking settings and custom masking settings.
	Mode AgentApplicationSettingsMobileSessionReplayMode `json:"mode"`
	// Percentage from 0-10 specifying how many of all user sessions should be recorded.
	SamplingRate float64 `json:"samplingRate"`
}

// AgentApplicationSettingsNetworkAlias - A configuration setting that maps hosts to alias names for grouping and identification purposes.
type AgentApplicationSettingsNetworkAlias struct {
	// An alternative name that can be used to reference the hostnames.
	Alias string `json:"alias,omitempty"`
	// A list of hostnames to associate with an alias.
	Hosts []string `json:"hosts"`
}

// AgentApplicationSettingsSessionReplay - Session Replay configuration.
type AgentApplicationSettingsSessionReplay struct {
	// When true, Session Replay will activate normally (this is the default). If set to false, Session Replay will not record automatically, but the agent will allow recording to be turned on via it's API. Please see [here](https://docs.newrelic.com/docs/browser/new-relic-browser/browser-apis/start/) for more details.
	AutoStart bool `json:"autoStart"`
	// String to configure which selector should be blocked
	BlockSelector string `json:"blockSelector"`
	// Indicates whether the agent will serialize fonts for collection without public asset url.
	CollectFonts bool `json:"collectFonts"`
	// Session Replay enabled.
	Enabled bool `json:"enabled"`
	// Percentage from 0-10 specifying how many of all user sessions that contain errors should be recorded.
	ErrorSamplingRate float64 `json:"errorSamplingRate"`
	// Agent session replay asset fetching.
	FixStylesheets bool `json:"fixStylesheets"`
	// Indicates whether the agent will serialize images for collection without public asset url
	InlineImages bool `json:"inlineImages"`
	// Indicates whether the agent will serialize css for collection without public asset url.
	InlineStylesheet bool `json:"inlineStylesheet"`
	// Mask all input content as *
	MaskAllInputs bool `json:"maskAllInputs"`
	// Mask specific kinds of input options as *.
	MaskInputOptions AgentApplicationSettingsMaskInputOptions `json:"maskInputOptions"`
	// String to configure which selector should be masked.
	MaskTextSelector string `json:"maskTextSelector,omitempty"`
	// This setting in Session Replay allows users to capture replays of the initial page load for enhanced analysis when using automatic start.
	Preload bool `json:"preload"`
	// Percentage from 0-10 specifying how many of all user sessions should be recorded.
	SamplingRate float64 `json:"samplingRate"`
}

// AgentApplicationSettingsSessionTrace - Session Trace configuration.
type AgentApplicationSettingsSessionTrace struct {
	// Session Trace enabled.
	Enabled bool `json:"enabled"`
	// Percentage from 0-100 specifying how many of all user sessions that contain errors should be recorded.
	ErrorSamplingRate float64 `json:"errorSamplingRate"`
	// Default (fixed_rate) or custom (probabilistic) option used to collect session traces.
	Mode AgentApplicationSettingsSessionTraceMode `json:"mode,omitempty"`
	// Percentage from 0-100 specifying how many of all user sessions should be recorded.
	SamplingRate float64 `json:"samplingRate"`
}

// AgentApplicationSettingsSlowSql - In APM, when transaction traces are collected, there may be additional Slow query data available.
type AgentApplicationSettingsSlowSql struct {
	// If true, the agent collects slow SQL queries.
	Enabled bool `json:"enabled,omitempty"`
}

// AgentApplicationSettingsThreadProfiler - Measures wall clock time, CPU time, and method call counts in your application's threads as they run.
type AgentApplicationSettingsThreadProfiler struct {
	// Whether or not the Thread Profiler is enabled for your application.
	Enabled bool `json:"enabled,omitempty"`
}

// AgentApplicationSettingsTransactionTracer - Transaction tracer settings related to APM applications. For more information about what these settings do and which ones are applicable for your application, please see https://docs.newrelic.com for more information about agent configuration for your language agent.
type AgentApplicationSettingsTransactionTracer struct {
	// DEPRECATED: Please use capture_memcache_keys on parent type.
	CaptureMemcacheKeys bool `json:"captureMemcacheKeys,omitempty"`
	// If true, this enables the transaction tracer feature, enabling collection of transaction traces.
	Enabled bool `json:"enabled,omitempty"`
	// If true, enables the collection of explain plans in transaction traces. This setting will also apply to explain plans in slow SQL traces if slow_sql.explain_enabled is not set separately.
	ExplainEnabled bool `json:"explainEnabled,omitempty"`
	// Relevant only when explain_enabled is true. Can be set to automatic configuration (APDEX_F) or manual (see explainThresholdValue).
	ExplainThresholdType AgentApplicationSettingsThresholdTypeEnum `json:"explainThresholdType,omitempty"`
	// Threshold (in seconds) above which the agent will collect explain plans. Relevant only when explainEnabled is true and explainThresholdType is set to VALUE.
	ExplainThresholdValue nrtime.Seconds `json:"explainThresholdValue,omitempty"`
	// Set to true to enable logging of queries to the agent log file instead of uploading to New Relic. Queries are logged using the record_sql mode.
	LogSql bool `json:"logSql,omitempty"`
	// Obfuscation level for SQL queries reported in transaction trace nodes.
	RecordSql AgentApplicationSettingsRecordSqlEnum `json:"recordSql,omitempty"`
	// Specify a threshold in seconds. The agent includes stack traces in transaction trace nodes when the stack trace duration exceeds this threshold.
	StackTraceThreshold nrtime.Seconds `json:"stackTraceThreshold,omitempty"`
	// Relevant only when TransactionTracer is enabled. Can be set to automatic configuration (APDEX_F) or manual (see TransactionThresholdValue).
	TransactionThresholdType AgentApplicationSettingsThresholdTypeEnum `json:"transactionThresholdType,omitempty"`
	// Threshold (in seconds) that transactions with a duration longer than this threshold are eligible for transaction traces.  Relevant only when transaction tracer is enabled and transaction_threshold_type is set to VALUE.
	TransactionThresholdValue nrtime.Seconds `json:"transactionThresholdValue,omitempty"`
}

// AgentEnvironmentApplicationInstance - Representation of the New Relic agent collecting data.
type AgentEnvironmentApplicationInstance struct {
	// Contains environment attributes regarding the reported setting of the reporting agent.
	AgentSettingsAttributes []AgentEnvironmentAttribute `json:"agentSettingsAttributes"`
	// Information of the application instance, such as host and language.
	Details AgentEnvironmentApplicationInstanceDetails `json:"details"`
	// Contains general environment attributes from the same environment where the application instance is running.
	EnvironmentAttributes []AgentEnvironmentAttribute `json:"environmentAttributes"`
	// Contains environment attributes regarding modules loaded by the application instance. Used only by the Java agent.
	Modules []AgentEnvironmentApplicationLoadedModule `json:"modules"`
}

// AgentEnvironmentApplicationInstanceDetails - Details of an application instance such as host and language.
type AgentEnvironmentApplicationInstanceDetails struct {
	// Host of the application instance.
	Host string `json:"host"`
	// Host display name of the application instance.
	HostDisplayName string `json:"hostDisplayName"`
	// ID of the application instance.
	ID string `json:"id"`
	// Instance name generated by language, host and name
	InstanceName string `json:"instanceName"`
	// Language of the application instance.
	Language string `json:"language"`
	// Name of the application instance.
	Name string `json:"name"`
}

// AgentEnvironmentApplicationInstancesResult - List of APM application instances with pagination data.
type AgentEnvironmentApplicationInstancesResult struct {
	// List of APM application instances .
	ApplicationInstances []AgentEnvironmentApplicationInstance `json:"applicationInstances"`
	// If nextCursor is a String value, set it to the cursor input field while searching in order to get the next page of results.
	NextCursor string `json:"nextCursor,omitempty"`
}

// AgentEnvironmentApplicationLoadedModule - Represents a module loaded by the apm application.
type AgentEnvironmentApplicationLoadedModule struct {
	// Extra module attributes.
	Attributes []AgentEnvironmentLoadedModuleAttribute `json:"attributes"`
	// Module name.
	Name string `json:"name"`
	// Module version.
	Version string `json:"version,omitempty"`
}

// AgentEnvironmentAttribute - Represents one attribute from within the environment on which an agent is running.
type AgentEnvironmentAttribute struct {
	// Environment attribute name.
	Attribute string `json:"attribute"`
	// Value of the environment attribute.
	Value string `json:"value"`
}

// AgentEnvironmentFilter - A filter that can be applied to filter results.
type AgentEnvironmentFilter struct {
	// A string to filter results that includes this string anywhere. Case insensitive.
	Contains string `json:"contains,omitempty"`
	// A string to filter out results that includes this string anywhere. Case insensitive.
	DoesNotContain string `json:"doesNotContain,omitempty"`
	// A string to filter results that are exactly as the string provided. Case sensitive.
	Equals string `json:"equals,omitempty"`
	// A string to filter results that starts with this string. Case insensitive.
	StartsWith string `json:"startsWith,omitempty"`
}

// AgentEnvironmentLoadedModuleAttribute - Attribute belonging to a loaded module.
type AgentEnvironmentLoadedModuleAttribute struct {
	// Name of the module attribute.
	Name string `json:"name"`
	// Value of the module attribute.
	Value string `json:"value"`
}

type AlertableEntity struct {
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the timewindow or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
}

func (x *AlertableEntity) ImplementsAlertableEntity() {}

type AlertableEntityOutline struct {
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
}

func (x *AlertableEntityOutline) ImplementsAlertableEntityOutline() {}

// ApmApplicationDeployment - An APM application deployment marker
type ApmApplicationDeployment struct {
	// The changelog of the deployment
	Changelog string `json:"changelog,omitempty"`
	// Description of the deployment
	Description string `json:"description,omitempty"`
	// A link to view the deployment in the UI
	Permalink string `json:"permalink,omitempty"`
	// The revision of the app that was deployed
	Revision string `json:"revision,omitempty"`
	// The moment the deployment occured
	Timestamp *nrtime.EpochMilliseconds `json:"timestamp,omitempty"`
	// The user who triggered the deployment
	User string `json:"user,omitempty"`
}

// ApmApplicationEntity - An APM Application entity.
type ApmApplicationEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Summary statistics about the Browser App injected by an APM Application.
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary,omitempty"`
	// Settings that are common across APM applications.
	ApmSettings AgentApplicationSettingsApmBase `json:"apmSettings,omitempty"`
	// Summary statistics about the APM App.
	ApmSummary ApmApplicationSummaryData `json:"apmSummary,omitempty"`
	// The ID of the APM Application.
	ApplicationID int `json:"applicationId,omitempty"`
	// List of APM application instances.
	ApplicationInstances []AgentEnvironmentApplicationInstance `json:"applicationInstances"`
	// Paginated list of APM application instances.
	ApplicationInstancesV2 AgentEnvironmentApplicationInstancesResult `json:"applicationInstancesV2"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// Deployments of the APM Application.
	Deployments []ApmApplicationDeployment `json:"deployments,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// An Exception that occurred in your Application.
	Exception StackTraceApmException `json:"exception,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// Retrieves a flamegraph for the specific entity over the time period specified.
	Flamegraph JavaFlightRecorderFlamegraph `json:"flamegraph,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The programming language of the APM Application.
	Language string `json:"language,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Retrieves the entity metric grouping issues.
	MetricGroupingIssues []MetricNormalizationRuleMetricGroupingIssue `json:"metricGroupingIssues"`
	// Retrieves a rule.
	MetricNormalizationRule MetricNormalizationRule `json:"metricNormalizationRule,omitempty"`
	// Retrieves the rules for the application.
	MetricNormalizationRules []MetricNormalizationRule `json:"metricNormalizationRules"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The running versions of the language agent in the APM Application.
	RunningAgentVersions ApmApplicationRunningAgentVersions `json:"runningAgentVersions,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// Configuration settings for the APM Application
	Settings ApmApplicationSettings `json:"settings,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *ApmApplicationEntity) ImplementsAlertableEntity() {}

func (x *ApmApplicationEntity) ImplementsApmBrowserApplicationEntity() {}

func (x *ApmApplicationEntity) ImplementsEntity() {}

// ApmApplicationEntityOutline - An APM Application entity outline.
type ApmApplicationEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Summary statistics about the Browser App injected by an APM Application.
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary,omitempty"`
	// Summary statistics about the APM App.
	ApmSummary ApmApplicationSummaryData `json:"apmSummary,omitempty"`
	// The ID of the APM Application.
	ApplicationID int `json:"applicationId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The programming language of the APM Application.
	Language string `json:"language,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The running versions of the language agent in the APM Application.
	RunningAgentVersions ApmApplicationRunningAgentVersions `json:"runningAgentVersions,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// Configuration settings for the APM Application
	Settings ApmApplicationSettings `json:"settings,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *ApmApplicationEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *ApmApplicationEntityOutline) ImplementsApmBrowserApplicationEntityOutline() {}

func (x *ApmApplicationEntityOutline) ImplementsEntityOutline() {}

// ApmApplicationRunningAgentVersions - Represents the currently running agent versions in an APM Application.
// An application could be running multiple versions of an agent (across different hosts, for example).
type ApmApplicationRunningAgentVersions struct {
	// The maximum (newest) language agent version running in the APM Application.
	MaxVersion string `json:"maxVersion,omitempty"`
	// The minimum (oldest) language agent version running in the APM Application.
	MinVersion string `json:"minVersion,omitempty"`
}

// ApmApplicationSettings - Configuration settings for the APM Application
type ApmApplicationSettings struct {
	// The current Apdex target setting
	ApdexTarget float64 `json:"apdexTarget,omitempty"`
	// State of server-side configuration setting
	ServerSideConfig bool `json:"serverSideConfig,omitempty"`
}

// ApmApplicationSummaryData - Summary statistics about the APM App.
type ApmApplicationSummaryData struct {
	// The apdex score. For more details on the use of apdex, visit [our docs](https://docs.newrelic.com/docs/apm/new-relic-apm/apdex/apdex-measure-user-satisfaction).
	ApdexScore float64 `json:"apdexScore,omitempty"`
	// The percentage of responses to all transactions with an error.
	ErrorRate float64 `json:"errorRate,omitempty"`
	// The number of hosts this application is running on.
	HostCount int `json:"hostCount,omitempty"`
	// The number of instances of this application running.
	InstanceCount int `json:"instanceCount,omitempty"`
	// The average response time for non-web transactions in seconds.
	NonWebResponseTimeAverage nrtime.Seconds `json:"nonWebResponseTimeAverage,omitempty"`
	// The number of non-web transactions per minute.
	NonWebThroughput float64 `json:"nonWebThroughput,omitempty"`
	// The average response time for all transactions in seconds.
	ResponseTimeAverage nrtime.Seconds `json:"responseTimeAverage,omitempty"`
	// The number of all transactions per minute.
	Throughput float64 `json:"throughput,omitempty"`
	// The average response time for web transactions in seconds.
	WebResponseTimeAverage nrtime.Seconds `json:"webResponseTimeAverage,omitempty"`
	// The number of web transactions per minute.
	WebThroughput float64 `json:"webThroughput,omitempty"`
}

// ApmBrowserApplicationEntity - The `ApmBrowserApplicationEntity` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntity struct {
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary,omitempty"`
}

func (x *ApmBrowserApplicationEntity) ImplementsApmBrowserApplicationEntity() {}

// ApmBrowserApplicationEntityOutline - The `ApmBrowserApplicationEntityOutline` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntityOutline struct {
	ApmBrowserSummary ApmBrowserApplicationSummaryData `json:"apmBrowserSummary,omitempty"`
}

func (x *ApmBrowserApplicationEntityOutline) ImplementsApmBrowserApplicationEntityOutline() {}

// ApmBrowserApplicationSummaryData - Summary statistics about the Browser App injected by the APM Application.
type ApmBrowserApplicationSummaryData struct {
	// The number of AJAX requests per minute
	AjaxRequestThroughput float64 `json:"ajaxRequestThroughput,omitempty"`
	// The average AJAX response time in seconds.
	AjaxResponseTimeAverage nrtime.Seconds `json:"ajaxResponseTimeAverage,omitempty"`
	// The percentage of page views with a JS error.
	JsErrorRate float64 `json:"jsErrorRate,omitempty"`
	// The number of page loads per minute
	PageLoadThroughput float64 `json:"pageLoadThroughput,omitempty"`
	// The average page view time in seconds.
	PageLoadTimeAverage float64 `json:"pageLoadTimeAverage,omitempty"`
}

// ApmDatabaseInstanceEntity - A database instance seen by an APM Application
type ApmDatabaseInstanceEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The host the database instance is running on.
	Host string `json:"host,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`
	PortOrPath string `json:"portOrPath,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The type of database. ex: `Postgres` | `Redis`
	Vendor string `json:"vendor,omitempty"`
}

func (x *ApmDatabaseInstanceEntity) ImplementsAlertableEntity() {}

func (x *ApmDatabaseInstanceEntity) ImplementsEntity() {}

// ApmDatabaseInstanceEntityOutline - A database instance seen by an APM Application
type ApmDatabaseInstanceEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The host the database instance is running on.
	Host string `json:"host,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The port or path the database instance is running on. ex: `3306` | `/tmp/mysql.sock`
	PortOrPath string `json:"portOrPath,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The type of database. ex: `Postgres` | `Redis`
	Vendor string `json:"vendor,omitempty"`
}

func (x *ApmDatabaseInstanceEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *ApmDatabaseInstanceEntityOutline) ImplementsEntityOutline() {}

// ApmExternalServiceEntity - An external service seen by an APM Application.
type ApmExternalServiceEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType      EntityType                    `json:"entityType,omitempty"`
	ExternalSummary ApmExternalServiceSummaryData `json:"externalSummary,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The host of the external service.
	Host string `json:"host,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *ApmExternalServiceEntity) ImplementsAlertableEntity() {}

func (x *ApmExternalServiceEntity) ImplementsEntity() {}

// ApmExternalServiceEntityOutline - An external service seen by an APM Application.
type ApmExternalServiceEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType      EntityType                    `json:"entityType,omitempty"`
	ExternalSummary ApmExternalServiceSummaryData `json:"externalSummary,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The host of the external service.
	Host string `json:"host,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *ApmExternalServiceEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *ApmExternalServiceEntityOutline) ImplementsEntityOutline() {}

// ApmExternalServiceSummaryData - Summary statistics about an External Service called by an APM App.
type ApmExternalServiceSummaryData struct {
	// The average response time for external service calls in seconds.
	ResponseTimeAverage nrtime.Seconds `json:"responseTimeAverage,omitempty"`
	// The number of external service calls per minute.
	Throughput float64 `json:"throughput,omitempty"`
}

// BrowserApplicationEntity - A Browser Application entity.
type BrowserApplicationEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The type of Browser agent installed for this application.
	AgentInstallType BrowserAgentInstallType `json:"agentInstallType,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The ID of the Browser App.
	ApplicationID int `json:"applicationId,omitempty"`
	// Access general properties for the application.
	BrowserProperties AgentApplicationSettingsBrowserProperties `json:"browserProperties,omitempty"`
	// Settings that are common across browser applications.
	BrowserSettings AgentApplicationSettingsBrowserBase `json:"browserSettings,omitempty"`
	// Summary statistics about the Browser App.
	BrowserSummary BrowserApplicationSummaryData `json:"browserSummary,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// An Exception that occurred in your Browser Application.
	Exception StackTraceBrowserException `json:"exception,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Retrieves the entity metric grouping issues.
	MetricGroupingIssues []MetricNormalizationRuleMetricGroupingIssue `json:"metricGroupingIssues"`
	// Retrieves a rule
	MetricNormalizationRule MetricNormalizationRule `json:"metricNormalizationRule,omitempty"`
	// Retrieves the rules for the application.
	MetricNormalizationRules []MetricNormalizationRule `json:"metricNormalizationRules"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The running versions of the agent in the Browser App.
	RunningAgentVersions BrowserApplicationRunningAgentVersions `json:"runningAgentVersions,omitempty"`
	// The allow list for browser applications that contains a set of allowed url segments that will appear in groupings on the Page views and AJAX pages.
	SegmentAllowListAggregate AgentApplicationSegmentsBrowserSegmentAllowList `json:"segmentAllowListAggregate,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The ID of the APM Application that serves this Browser App.
	ServingApmApplicationID int `json:"servingApmApplicationId,omitempty"`
	// Configuration settings for the Browser App
	Settings BrowserApplicationSettings `json:"settings,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *BrowserApplicationEntity) ImplementsAlertableEntity() {}

func (x *BrowserApplicationEntity) ImplementsEntity() {}

// BrowserApplicationEntityOutline - A Browser Application entity outline.
type BrowserApplicationEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The type of Browser agent installed for this application.
	AgentInstallType BrowserAgentInstallType `json:"agentInstallType,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The ID of the Browser App.
	ApplicationID int `json:"applicationId,omitempty"`
	// Summary statistics about the Browser App.
	BrowserSummary BrowserApplicationSummaryData `json:"browserSummary,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The running versions of the agent in the Browser App.
	RunningAgentVersions BrowserApplicationRunningAgentVersions `json:"runningAgentVersions,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The ID of the APM Application that serves this Browser App.
	ServingApmApplicationID int `json:"servingApmApplicationId,omitempty"`
	// Configuration settings for the Browser App
	Settings BrowserApplicationSettings `json:"settings,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *BrowserApplicationEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *BrowserApplicationEntityOutline) ImplementsEntityOutline() {}

// BrowserApplicationRunningAgentVersions - Represents the currently running agent versions in a Browser App.
// An app could be running multiple versions of an agent (across different browsers, for example).
type BrowserApplicationRunningAgentVersions struct {
	// The maximum (newest) agent version running in the Browser App, represented as a semantic version string.
	MaxSemanticVersion SemVer `json:"maxSemanticVersion,omitempty"`
	// The maximum (newest) agent version running in the Browser App.
	MaxVersion int `json:"maxVersion,omitempty"`
	// The minimum (oldest) agent version running in the Browser App, represented as a semantic version string.
	MinSemanticVersion SemVer `json:"minSemanticVersion,omitempty"`
	// The minimum (oldest) agent version running in the Browser App.
	MinVersion int `json:"minVersion,omitempty"`
}

// BrowserApplicationSettings - Configuration settings for the Browser App
type BrowserApplicationSettings struct {
	// The current Apdex target setting
	ApdexTarget float64 `json:"apdexTarget,omitempty"`
}

// BrowserApplicationSummaryData - Summary statistics about the Browser App.
type BrowserApplicationSummaryData struct {
	// The number of AJAX requests per minute
	AjaxRequestThroughput float64 `json:"ajaxRequestThroughput,omitempty"`
	// The average AJAX response time in seconds.
	AjaxResponseTimeAverage nrtime.Seconds `json:"ajaxResponseTimeAverage,omitempty"`
	// The percentage of page views with a JS error.
	JsErrorRate float64 `json:"jsErrorRate,omitempty"`
	// The number of page loads per minute
	PageLoadThroughput float64 `json:"pageLoadThroughput,omitempty"`
	// The average page view time in seconds.
	PageLoadTimeAverage float64 `json:"pageLoadTimeAverage,omitempty"`
	// The median page view time in seconds.
	PageLoadTimeMedian float64 `json:"pageLoadTimeMedian,omitempty"`
	// The average SPA response time in seconds.
	SpaResponseTimeAverage nrtime.Seconds `json:"spaResponseTimeAverage,omitempty"`
	// The median SPA response time in seconds.
	SpaResponseTimeMedian nrtime.Seconds `json:"spaResponseTimeMedian,omitempty"`
}

// ChangeTrackingDeployment - A deployment.
type ChangeTrackingDeployment struct {
	// A URL to the changelog or, if not linkable, a list of changes.
	Changelog string `json:"changelog,omitempty"`
	// The commit identifier, for example, a Git commit SHA.
	Commit string `json:"commit,omitempty"`
	// A link to the system that generated the deployment.
	DeepLink string `json:"deepLink,omitempty"`
	// A unique deployment identifier.
	DeploymentId string `json:"deploymentId,omitempty"`
	// The type of deployment, for example, ‘Blue green’ or ‘Rolling’.
	DeploymentType ChangeTrackingDeploymentType `json:"deploymentType,omitempty"`
	// A description of the deployment.
	Description string `json:"description,omitempty"`
	// The NR entity that was deployed.
	EntityGUID EntityGUID `json:"entityGuid"`
	// An identifier used to correlate account-wide changes across entities. These changes are shown together in the `Changes in group` section of the change event details UI.
	GroupId string `json:"groupId,omitempty"`
	// The start time of the deployment as the number of milliseconds since the Unix epoch.
	Timestamp *nrtime.EpochMilliseconds `json:"timestamp"`
	// The username of the deployer or bot.
	User string `json:"user,omitempty"`
	// The version of the deployed software, for example, something like v1.1.
	Version string `json:"version"`
}

// ChangeTrackingDeploymentSearchResult - The result of the deployment search query.
type ChangeTrackingDeploymentSearchResult struct {
	// The list of deployment events in the given time window.
	Results []ChangeTrackingDeployment `json:"results,omitempty"`
}

// ChangeTrackingSearchFilter - The object contains the filters to be applied to the search.
type ChangeTrackingSearchFilter struct {
	// Maximum number of deployments to be returned. Default value is 100 deployments.
	// There is a maximum limit value of 2,000. If you set the limit greater than 2,000, the service will only return the latest 2,000 deployments."
	Limit int `json:"limit,omitempty"`
	// Deployment search query string. The query string can search for a match on users and deployment IDs, and any other deployment event attributes.
	//
	// Operators available: Any valid NRQL operators, other than subqueries. For example, =, OR, AND, IN, LIKE, RLIKE, NOT.
	//
	// For the full list of operators, see the where clause documentation [here](https://docs.newrelic.com/docs/query-your-data/nrql-new-relic-query-language/get-started/nrql-syntax-clauses-functions/#sel-where)
	//
	// Note: Do not include keywords like SELECT, WHERE, SINCE, FACET, and TIMESERIES.
	//
	// Examples:
	//
	//     • "user = 'Test User'"
	//     • "user LIKE '%Test User%' AND deploymentType IN ('BLUE_GREEN', 'CANARY')"
	//     • "user RLIKE r'Test.*|test.*'"
	//     • "version = '1.0' OR deploymentType IN ('BASIC')"
	//     • "deploymentId IN ('1234', '4567')"
	//     • "((user = 'Test User' AND version = '1.0') OR deploymentType in ('BLUE_GREEN', 'CANARY'))"
	Query string `json:"query,omitempty"`
	// Search time window. If not specified, defaults to the past hour.
	TimeWindow ChangeTrackingTimeWindowInputWithDefaults `json:"timeWindow,omitempty"`
}

// ChangeTrackingTimeWindowInputWithDefaults - A time window input with default values.
type ChangeTrackingTimeWindowInputWithDefaults struct {
	// The end time of the time window. If not specified, it defaults to the current time.
	EndTime *nrtime.EpochMilliseconds `json:"endTime,omitempty"`
	// The start time of the time window. If not specified, it defaults to 60 minutes before the endTime.
	StartTime *nrtime.EpochMilliseconds `json:"startTime,omitempty"`
}

// CollectionEntity - A group of entities defined by entity search queries and specific GUIDs
type CollectionEntity struct {
	Collection EntityCollection `json:"collection,omitempty"`
	GUID       EntityGUID       `json:"guid,omitempty"`
}

func (x *CollectionEntity) ImplementsCollectionEntity() {}

// DashboardAreaWidgetConfiguration - Configuration for visualization type 'viz.area'
type DashboardAreaWidgetConfiguration struct {
	// NRQL queries.
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
}

// DashboardBarWidgetConfiguration - Configuration for visualization type 'viz.bar'
type DashboardBarWidgetConfiguration struct {
	// NRQL queries.
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
}

// DashboardBillboardWidgetConfiguration - Configuration for visualization type 'viz.billboard'
type DashboardBillboardWidgetConfiguration struct {
	// NRQL queries.
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
	// Array of thresholds to categorize the results of the query in different groups.
	Thresholds []DashboardBillboardWidgetThreshold `json:"thresholds,omitempty"`
}

// DashboardBillboardWidgetThreshold - Billboard widget threshold.
type DashboardBillboardWidgetThreshold struct {
	// Alert severity.
	AlertSeverity DashboardAlertSeverity `json:"alertSeverity,omitempty"`
	// Alert value.
	Value float64 `json:"value,omitempty"`
}

// DashboardEntity - A Dashboard entity.
type DashboardEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The date and time the dashboard was created
	CreatedAt nrtime.DateTime `json:"createdAt,omitempty"`
	// The parent entity `guid` of the dashboard.
	DashboardParentGUID EntityGUID `json:"dashboardParentGuid,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// Dashboard description.
	Description string `json:"description,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The owner information of the dashboard.
	Owner DashboardEntityOwnerInfo `json:"owner,omitempty"`
	// A nested block of all pages belonging to the dashboard.
	Pages []DashboardPage `json:"pages,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The permissions of the dashboard.
	Permissions DashboardEntityPermissions `json:"permissions,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The date and time the dashboard was updated
	UpdatedAt nrtime.DateTime `json:"updatedAt,omitempty"`
	// Dashboard-local variable definitions.
	Variables []DashboardVariable `json:"variables,omitempty"`
}

func (x *DashboardEntity) ImplementsAlertableEntity() {}

func (x *DashboardEntity) ImplementsEntity() {}

// DashboardEntityOutline - A Dashboard entity outline.
type DashboardEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The date and time the dashboard was created
	CreatedAt nrtime.DateTime `json:"createdAt,omitempty"`
	// The parent entity `guid` of the dashboard.
	DashboardParentGUID EntityGUID `json:"dashboardParentGuid,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The owner information of the dashboard.
	Owner DashboardEntityOwnerInfo `json:"owner,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The permissions of the dashboard.
	Permissions DashboardEntityPermissions `json:"permissions,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The date and time the dashboard was updated
	UpdatedAt nrtime.DateTime `json:"updatedAt,omitempty"`
}

func (x *DashboardEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *DashboardEntityOutline) ImplementsEntityOutline() {}

// DashboardEntityOwnerInfo - Dashboard owner
type DashboardEntityOwnerInfo struct {
	// The email of the dashboard owner
	Email string `json:"email,omitempty"`
	// The user ID of the dashboard owner
	UserID int `json:"userId,omitempty"`
}

// DashboardLineWidgetConfiguration - Configuration for visualization type 'viz.line'
type DashboardLineWidgetConfiguration struct {
	// NRQL queries.
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
}

// DashboardMarkdownWidgetConfiguration - Configuration for visualization type 'viz.markdown'
type DashboardMarkdownWidgetConfiguration struct {
	// Markdown content of the widget.
	Text string `json:"text"`
}

// DashboardOwnerInfo - Information on the owner of a dashboard or page.
type DashboardOwnerInfo struct {
	// New Relic user email.
	Email string `json:"email,omitempty"`
	// New Relic user ID.
	UserID int `json:"userId,omitempty"`
}

// DashboardPage - Page in a dashboard entity.
type DashboardPage struct {
	// Page creation timestamp.
	CreatedAt nrtime.DateTime `json:"createdAt,omitempty"`
	// Brief text describing the page.
	Description string `json:"description,omitempty"`
	// Unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The name of the page.
	Name string `json:"name,omitempty"`
	// Information of the user that owns the page.
	Owner DashboardOwnerInfo `json:"owner,omitempty"`
	// Page update timestamp.
	UpdatedAt nrtime.DateTime `json:"updatedAt,omitempty"`
	// A nested block of all widgets belonging to the page.
	Widgets []DashboardWidget `json:"widgets,omitempty"`
}

// DashboardPieWidgetConfiguration - Configuration for visualization type 'viz.pie'
type DashboardPieWidgetConfiguration struct {
	// NRQL queries.
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
}

// DashboardTableWidgetConfiguration - Configuration for visualization type 'viz.table'
type DashboardTableWidgetConfiguration struct {
	// NRQL queries.
	NRQLQueries []DashboardWidgetNRQLQuery `json:"nrqlQueries,omitempty"`
}

// DashboardVariable - Definition of a variable that is local to this dashboard. Variables are placeholders for dynamic values in widget NRQLs.
type DashboardVariable struct {
	// [DEPRECATED] Default value for this variable. The actual value to be used will depend on the type.
	DefaultValue DashboardVariableDefaultValue `json:"defaultValue,omitempty"`
	// Default values for this variable. The actual value to be used will depend on the type.
	DefaultValues []DashboardVariableDefaultItem `json:"defaultValues,omitempty"`
	// Indicates whether this variable supports multiple selection or not. Only applies to variables of type NRQL or ENUM.
	IsMultiSelection bool `json:"isMultiSelection,omitempty"`
	// List of possible values for variables of type ENUM.
	Items []DashboardVariableEnumItem `json:"items,omitempty"`
	// Configuration for variables of type NRQL.
	NRQLQuery DashboardVariableNRQLQuery `json:"nrqlQuery,omitempty"`
	// Variable identifier.
	Name string `json:"name,omitempty"`
	// Options applied to the variable.
	Options DashboardVariableOptions `json:"options,omitempty"`
	// Indicates the strategy to apply when replacing a variable in a NRQL query.
	ReplacementStrategy DashboardVariableReplacementStrategy `json:"replacementStrategy,omitempty"`
	// Human-friendly display string for this variable.
	Title string `json:"title,omitempty"`
	// Specifies the data type of the variable and where its possible values may come from.
	Type DashboardVariableType `json:"type,omitempty"`
}

// DashboardVariableDefaultItem - Represents a possible default value item.
type DashboardVariableDefaultItem struct {
	// The value of this default item.
	Value DashboardVariableDefaultValue `json:"value,omitempty"`
}

// DashboardVariableDefaultValue - Specifies a default value for variables.
type DashboardVariableDefaultValue struct {
	// Default string value.
	String string `json:"string,omitempty"`
}

// DashboardVariableEnumItem - Represents a possible value for a variable of type ENUM.
type DashboardVariableEnumItem struct {
	// A human-friendly display string for this value.
	Title string `json:"title,omitempty"`
	// A possible variable value.
	Value string `json:"value,omitempty"`
}

// DashboardVariableNRQLQuery - Configuration for variables of type NRQL.
type DashboardVariableNRQLQuery struct {
	// New Relic account ID(s) to issue the query against.
	AccountIDs []int `json:"accountIds,omitempty"`
	// NRQL formatted query.
	Query nrdb.NRQL `json:"query"`
}

// DashboardVariableOptions - Options applied to the variable.
type DashboardVariableOptions struct {
	// With this turned on, query condition defined with the variable will not be included in the query.
	Excluded bool `json:"excluded,omitempty"`
	// Only applies to variables of type NRQL. With this turned on, the time range for the NRQL query will override the time picker on dashboards and other pages. Turn this off to use the time picker as normal.
	IgnoreTimeRange bool `json:"ignoreTimeRange,omitempty"`
	// Determines whether or not an Apply action will be shown when selecting multiple values in ENUM and NRQL variables.
	ShowApplyAction bool `json:"showApplyAction,omitempty"`
}

// DashboardWidget - Widgets in a Dashboard Page.
type DashboardWidget struct {
	// Typed widgets are area, bar, billboard, line, markdown, pie, and table.
	Configuration DashboardWidgetConfiguration `json:"configuration,omitempty"`
	// ID of the widget.
	ID string `json:"id"`
	// The widget's position and size in the dashboard.
	Layout DashboardWidgetLayout `json:"layout,omitempty"`
	// Entities related to the widget. Currently only supports one Dashboard entity guid, but may allow other cases in the future.
	LinkedEntities []EntityOutlineInterface `json:"linkedEntities,omitempty"`
	// Untyped widgets are all other widgets, such as bullet, histogram, inventory, etc.
	RawConfiguration DashboardWidgetRawConfiguration `json:"rawConfiguration"`
	// A title for the widget.
	Title string `json:"title,omitempty"`
	// Specifies how this widget will be visualized.
	Visualization DashboardWidgetVisualization `json:"visualization"`
}

// special
func (x *DashboardWidget) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "configuration":
			err = json.Unmarshal(*v, &x.Configuration)
			if err != nil {
				return err
			}
		case "id":
			err = json.Unmarshal(*v, &x.ID)
			if err != nil {
				return err
			}
		case "layout":
			err = json.Unmarshal(*v, &x.Layout)
			if err != nil {
				return err
			}
		case "linkedEntities":
			if v == nil {
				continue
			}
			var rawMessageLinkedEntities []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageLinkedEntities)
			if err != nil {
				return err
			}

			for _, m := range rawMessageLinkedEntities {
				xxx, err := UnmarshalEntityOutlineInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.LinkedEntities = append(x.LinkedEntities, *xxx)
				}
			}
		case "rawConfiguration":
			err = json.Unmarshal(*v, &x.RawConfiguration)
			if err != nil {
				return err
			}
		case "title":
			err = json.Unmarshal(*v, &x.Title)
			if err != nil {
				return err
			}
		case "visualization":
			err = json.Unmarshal(*v, &x.Visualization)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// DashboardWidgetConfiguration - Typed configuration for known visualizations. Only one (at most) will be populated for a given widget.
type DashboardWidgetConfiguration struct {
	// Configuration for visualization type 'viz.area'
	Area DashboardAreaWidgetConfiguration `json:"area,omitempty"`
	// Configuration for visualization type 'viz.bar'
	Bar DashboardBarWidgetConfiguration `json:"bar,omitempty"`
	// Configuration for visualization type 'viz.billboard'
	Billboard DashboardBillboardWidgetConfiguration `json:"billboard,omitempty"`
	// Configuration for visualization type 'viz.line'
	Line DashboardLineWidgetConfiguration `json:"line,omitempty"`
	// Configuration for visualization type 'viz.markdown'
	Markdown DashboardMarkdownWidgetConfiguration `json:"markdown,omitempty"`
	// Configuration for visualization type 'viz.pie'
	Pie DashboardPieWidgetConfiguration `json:"pie,omitempty"`
	// Configuration for visualization type 'viz.table'
	Table DashboardTableWidgetConfiguration `json:"table,omitempty"`
}

// DashboardWidgetLayout - Widget layout.
type DashboardWidgetLayout struct {
	// Column position of widget from top left, starting at 1.
	Column int `json:"column,omitempty"`
	// Height of the widget. Valid values are 1 to 12 inclusive. Defaults to 3.
	Height int `json:"height,omitempty"`
	// Row position of widget from top left, starting at 1.
	Row int `json:"row,omitempty"`
	// Width of the widget. Valid values are 1 to 12 inclusive. Defaults to 4.
	Width int `json:"width,omitempty"`
}

// DashboardWidgetNRQLQuery - Single NRQL query for a widget.
type DashboardWidgetNRQLQuery struct {
	// New Relic account ID to issue the query against.
	AccountID int `json:"accountId"`
	// NRQL formatted query.
	Query nrdb.NRQL `json:"query"`
}

// DashboardWidgetVisualization - Visualization configuration.
type DashboardWidgetVisualization struct {
	// This field can either have a known type like `viz.area` or `<nerdpack-id>.<visualization-id>` in the case of custom visualizations.
	ID string `json:"id,omitempty"`
}

// DistributedTracingEntityTracingSummary - Details tracing summary data for the provided `EntityGuid` that occurred during the provided `startTime` and `endTime`
type DistributedTracingEntityTracingSummary struct {
	// The number of traces where this entity produced an error
	ErrorTraceCount int `json:"errorTraceCount,omitempty"`
	// The percentage of error traces produced by this entity compared to all error traces in the system
	PercentOfAllErrorTraces float64 `json:"percentOfAllErrorTraces,omitempty"`
}

// DomainTypeInput - Input for getting details about an entity type
type DomainTypeInput struct {
	// The domain of the entity.
	//
	// The domain must be a value matching /[A-Z][A-Z0-9_]{2,14}/.
	Domain string `json:"domain"`
	// The type of the entity.
	//
	// The type must be a value matching /[A-Z][A-Z0-9_]{2,49}/.
	//
	// Some examples are APPLICATION, HOST or CONTAINER.
	Type string `json:"type"`
}

// Entity - The `Entity` interface allows fetching detailed entity information for a single entity.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type Entity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *Entity) ImplementsAlertableEntity() {}

func (x *Entity) ImplementsEntity() {}

// EntityAlertViolation - The alert violation for an entity
type EntityAlertViolation struct {
	// A link to the agent in the time window in which the violation occurred.
	AgentURL string `json:"agentUrl,omitempty"`
	// The severity of the violation.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Timestamp of when the violation was closed.
	ClosedAt *nrtime.EpochMilliseconds `json:"closedAt,omitempty"`
	// The description of the violation.
	Label string `json:"label,omitempty"`
	// The priority of the violation.
	Level string `json:"level,omitempty"`
	// Timestamp of when the violation was opened.
	OpenedAt *nrtime.EpochMilliseconds `json:"openedAt,omitempty"`
	// The id of the violation.
	ViolationId EntityAlertViolationInt `json:"violationId,omitempty"`
	// A link to the violation if it is connected to an incident.
	ViolationURL string `json:"violationUrl,omitempty"`
}

// EntityCollection - A collection of user defined Entities and Entity Search queries.
type EntityCollection struct {
	// The account the collection is part of
	Account AccountReference `json:"account,omitempty"`
	// The user who created the collection
	CreatedBy UserReference `json:"createdBy,omitempty"`
	// The definition of the collection.
	Definition EntityCollectionDefinition `json:"definition,omitempty"`
	// The GUID of the Entity
	GUID EntityGUID `json:"guid,omitempty"`
	// The result of searching for the members of the collection.
	Members EntitySearch `json:"members,omitempty"`
	// The name of the collection.
	Name string `json:"name,omitempty"`
	// The type of Collection
	Type EntityCollectionType `json:"type,omitempty"`
}

// EntityCollectionDefinition - The definition of a collection.
type EntityCollectionDefinition struct {
	// A list of entity GUIDs. These entities will belong to the collection as long as their accounts are included in the scope accounts of the collection.
	EntityGUIDs []EntityGUID `json:"entityGuids,omitempty"`
	// The Entity Search query that returns the full collection of entities.
	EntitySearchQuery string `json:"entitySearchQuery,omitempty"`
	// The Accounts that will be used to scope the collection.
	ScopeAccounts EntityCollectionScopeAccounts `json:"scopeAccounts,omitempty"`
	// A list of entity search queries. The resulting entities will be limited to the scope accounts of the collection.
	SearchQueries []string `json:"searchQueries,omitempty"`
}

// EntityCollectionScopeAccounts - The Accounts used to scope a collection.
type EntityCollectionScopeAccounts struct {
	// The Account IDs that make up the account scoping.
	AccountIDs []int `json:"accountIds,omitempty"`
}

// EntityGoldenContext - An object that represent the context.
type EntityGoldenContext struct {
	// Account context.
	Account int `json:"account,omitempty"`
	// Collection guid context.
	GUID EntityGUID `json:"guid,omitempty"`
}

// EntityGoldenContextInput - Input type used to define the context for the golden metrics.
type EntityGoldenContextInput struct {
	// Account context.
	Account int `json:"account,omitempty"`
	// Collection guid context.
	GUID EntityGUID `json:"guid,omitempty"`
}

// EntityGoldenContextScopedGoldenMetrics - An object that represents the golden metrics scoped by context
type EntityGoldenContextScopedGoldenMetrics struct {
	// Context for the golden metric
	Context EntityGoldenContext `json:"context"`
	// Metrics for the domain and type
	Metrics []EntityGoldenMetric `json:"metrics"`
}

// EntityGoldenContextScopedGoldenTags - An object that represents the golden tags scoped by context
type EntityGoldenContextScopedGoldenTags struct {
	// Context for the golden tags
	Context EntityGoldenContext `json:"context"`
	// Tags for the domain and type
	Tags []EntityGoldenTag `json:"tags"`
}

// EntityGoldenMetric - An object that represents a golden metric.
type EntityGoldenMetric struct {
	// The definition of the golden metric.
	Definition EntityGoldenMetricDefinition `json:"definition"`
	// The synthesised metric name. i.e: newrelic.goldenmetrics.apm.application.throughput
	MetricName string `json:"metricName"`
	// The name of the golden metric.
	Name string `json:"name"`
	// The definitions of the golden metric as they are defined in the public repo https://github.com/newrelic/entity-definitions.
	OriginalDefinitions []EntityGoldenOriginalDefinitionWithSelector `json:"originalDefinitions"`
	// Original queries as they are defined in the public repo https://github.com/newrelic/entity-definitions.
	OriginalQueries []EntityGoldenOriginalQueryWithSelector `json:"originalQueries"`
	// The golden metric NRQL query.
	Query string `json:"query"`
	// The title of the golden metric.
	Title string `json:"title"`
	// The unit used to represent the golden metric.
	Unit EntityGoldenMetricUnit `json:"unit"`
}

// EntityGoldenMetricDefinition - The definition of the metric.
type EntityGoldenMetricDefinition struct {
	// The field used to filter the entity in the metric. This will be added to the WHERE by default.
	EventId string `json:"eventId"`
	// Indicates if the eventId field references a GUID, a domainId or an entity name.
	EventObjectId EntityGoldenEventObjectId `json:"eventObjectId"`
	// The field to FACET by.
	Facet string `json:"facet"`
	// The FROM clause of the query.
	From string `json:"from"`
	// The SELECT clause of the query.
	Select string `json:"select"`
	// If a complementary WHERE clause is required to identify the entity type this field will contain it.
	Where string `json:"where,omitempty"`
}

// EntityGoldenNRQLTimeWindowInput - Time range to apply to the golden metric NRQL query
type EntityGoldenNRQLTimeWindowInput struct {
	// Start time.
	Since nrdb.NRQL `json:"since,omitempty"`
	// End time.
	Until nrdb.NRQL `json:"until,omitempty"`
}

// EntityGoldenOriginalDefinitionWithSelector - Represents a metric definition for a give metric selector value.
type EntityGoldenOriginalDefinitionWithSelector struct {
	// The definition of the golden metric.
	Definition EntityGoldenMetricDefinition `json:"definition"`
	// The value of the selector. Currently, this is the value of the instrumentation provider.
	SelectorValue string `json:"selectorValue"`
}

// EntityGoldenOriginalQueryWithSelector - Object that represents a nrql metric with its metric selector
type EntityGoldenOriginalQueryWithSelector struct {
	// The golden metric NRQL query.
	Query string `json:"query"`
	// The value of the selector. Currently, this is the value of the instrumentation provider.
	SelectorValue string `json:"selectorValue"`
}

// EntityGoldenTag - An object that represents a golden tag.
type EntityGoldenTag struct {
	// The golden tag key.
	Key string `json:"key"`
}

// EntityManagementActor - Represents an actor.
type EntityManagementActor struct {
	// Id of the actor.
	ID string `json:"id"`
}

func (x *EntityManagementActor) ImplementsEntityManagementActor() {}

type EntityManagementActorStitchedFields struct {
	// Retrieves an entity.
	Entity EntityManagementEntityInterface `json:"entity,omitempty"`
	// Retrieves a set of entities that match the given query predicate.
	EntitySearch EntityManagementEntitySearchResult `json:"entitySearch,omitempty"`
}

// EntityManagementAgentConfigurationEntity - A configuration that can contain multiple immutable versions and can be deployed to a fleet
type EntityManagementAgentConfigurationEntity struct {
	// The agentType
	AgentType string `json:"agentType"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// The managedEntityType this configuration is intended to be deployed to
	ManagedEntityType EntityManagementManagedEntityType `json:"managedEntityType,omitempty"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// A unique user provided name for the configuration
	Name string `json:"name"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
	// The total number of versions that have been created for this configuration
	VersionCount int `json:"versionCount,omitempty"`
}

func (x *EntityManagementAgentConfigurationEntity) ImplementsEntityManagementEntity() {}

// EntityManagementAiAgentEntity - Agent config for agentic-platform
type EntityManagementAiAgentEntity struct {
	// list of worker agents available to the planner agent
	Agents []EntityManagementEntityInterface `json:"agents"`
	// agent category
	Category string `json:"category"`
	// short description of the agent
	Description string `json:"description"`
	// entity's global identifier
	ID string `json:"id"`
	// llm config for the agent
	LlmConfig EntityManagementLlmConfig `json:"llmConfig,omitempty"`
	// agent metadata
	Metadata EntityManagementMetadata `json:"metadata"`
	// unique name of the agent entity
	Name string `json:"name"`
	// system instructions for the agent
	Prompt []string `json:"prompt"`
	// entity scope
	Scope EntityManagementScopedReference `json:"scope"`
	// collection of tags
	Tags []EntityManagementTag `json:"tags"`
	// list of tools available for the agent with filtering configuration
	Tools []EntityManagementAiAgentToolConfig `json:"tools"`
	// entity type
	Type string `json:"type"`
}

func (x *EntityManagementAiAgentEntity) ImplementsEntityManagementEntity() {}

// special
func (x *EntityManagementAiAgentEntity) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "agents":
			if v == nil {
				continue
			}
			var rawMessageAgents []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageAgents)
			if err != nil {
				return err
			}

			for _, m := range rawMessageAgents {
				xxx, err := UnmarshalEntityManagementEntityInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.Agents = append(x.Agents, *xxx)
				}
			}
		case "category":
			err = json.Unmarshal(*v, &x.Category)
			if err != nil {
				return err
			}
		case "description":
			err = json.Unmarshal(*v, &x.Description)
			if err != nil {
				return err
			}
		case "id":
			err = json.Unmarshal(*v, &x.ID)
			if err != nil {
				return err
			}
		case "llmConfig":
			err = json.Unmarshal(*v, &x.LlmConfig)
			if err != nil {
				return err
			}
		case "metadata":
			err = json.Unmarshal(*v, &x.Metadata)
			if err != nil {
				return err
			}
		case "name":
			err = json.Unmarshal(*v, &x.Name)
			if err != nil {
				return err
			}
		case "prompt":
			err = json.Unmarshal(*v, &x.Prompt)
			if err != nil {
				return err
			}
		case "scope":
			err = json.Unmarshal(*v, &x.Scope)
			if err != nil {
				return err
			}
		case "tags":
			err = json.Unmarshal(*v, &x.Tags)
			if err != nil {
				return err
			}
		case "tools":
			err = json.Unmarshal(*v, &x.Tools)
			if err != nil {
				return err
			}
		case "type":
			err = json.Unmarshal(*v, &x.Type)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// EntityManagementAiAgentToolConfig - Configuration for an agent's use of a specific MCP server/tool
type EntityManagementAiAgentToolConfig struct {
	// list of specific tools to exclude from this MCP server
	ExcludeTools []string `json:"excludeTools"`
	// list of specific tools to include from this MCP server
	IncludeTools []string `json:"includeTools"`
	// reference to the MCP server/tool entity
	Tool EntityManagementAiToolEntity `json:"tool"`
}

// EntityManagementAiToolEntity - Tool config for agentic-platform
type EntityManagementAiToolEntity struct {
	// short description of the tool
	Description string `json:"description"`
	// entity's unique global indentifier
	ID string `json:"id"`
	// tool metadata
	Metadata EntityManagementMetadata `json:"metadata"`
	// unique name of the tool
	Name string `json:"name"`
	// tool parameters to be passed for the nerdgraph type tool
	Parameters []EntityManagementAiToolParameter `json:"parameters"`
	// entity scope
	Scope EntityManagementScopedReference `json:"scope"`
	// collection of tags
	Tags []EntityManagementTag `json:"tags"`
	// entity type
	Type string `json:"type"`
	// path/url for the tool
	URL string `json:"url"`
}

func (x *EntityManagementAiToolEntity) ImplementsEntityManagementEntity() {}

// EntityManagementAiToolParameter - Tool parameters to be passed to ToolEntity
type EntityManagementAiToolParameter struct {
	// description of the parameter
	Description string `json:"description"`
	// name of the tool parameter
	Name string `json:"name"`
	// type of the parameter
	Type EntityManagementAiToolParameterType `json:"type"`
}

// EntityManagementAttribute - Attributes to represent thresholds
type EntityManagementAttribute struct {
	// Key for the attribute, e.g., 'queryCountThreshold', 'queryDurationThresholdMs'
	Key string `json:"key"`
	// Value for the attribute, e.g., '1000', '5000'. The value can be a string representation of a number or any other type as needed.
	Value string `json:"value"`
}

// EntityManagementBlob - Metadata about a blob stored in the Blob Datastore.
type EntityManagementBlob struct {
	// Object that holds the details of the blob signature
	BlobSignature EntityManagementBlobSignature `json:"blobSignature,omitempty"`
	// The checksum of the blob content
	Checksum string `json:"checksum,omitempty"`
	// The checksum algorithm used to calculate the checksum of the blob content
	ChecksumAlgorithm string `json:"checksumAlgorithm,omitempty"`
	// The content type of the blob
	ContentType string `json:"contentType"`
	// The blob identifier. Can be used to download the blob data from the Blob API
	ID string `json:"id"`
}

// EntityManagementBlobSignature - A set of configurations for blob signature
type EntityManagementBlobSignature struct {
	// Boolean flag to show if a blob has security findings
	SecurityFindings bool `json:"securityFindings,omitempty"`
	// Error encountered during signature creation
	SignatureError []string `json:"signatureError"`
	// Signature of the blob
	Signatures []EntityManagementSignatureDetails `json:"signatures"`
	// Error encountered during validation
	ValidationError []string `json:"validationError"`
}

// EntityManagementCategoryScope - Scope for category subtype
type EntityManagementCategoryScope struct {
	// id based on scope
	ID string `json:"id"`
	// type of scope
	Type EntityManagementCategoryScopeType `json:"type"`
}

// EntityManagementCharacterTextSplitterOptions - The CharacterTextSplitter options
type EntityManagementCharacterTextSplitterOptions struct {
	// Is the separator a regex
	IsSeparatorRegex bool `json:"isSeparatorRegex"`
	// Character to split text on
	Separator string `json:"separator"`
}

// EntityManagementCollectionEntity - An entity type to represent collections of entities
type EntityManagementCollectionEntity struct {
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of this entity.
	Name string `json:"name"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementCollectionEntity) ImplementsEntityManagementEntity() {}

// EntityManagementConfig - Collection of attributes to represent thresholds of a type
type EntityManagementConfig struct {
	// The list of attributes that define the thresholds for this config.
	Attributes []EntityManagementAttribute `json:"attributes"`
	// The name of the analyzer for which this config is applicable.
	Name string `json:"name"`
}

// EntityManagementConfiguration - Metadata about the configuration and the configuration blob itself
type EntityManagementConfiguration struct {
	// The raw configuration blob supplied by the system
	Blob EntityManagementBlob `json:"blob"`
	// The ID of the source system entity for the configuration
	Source string `json:"source,omitempty"`
	// The last time the configuration was updated
	UpdatedAt *nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
	// Who or what last updated the configuration
	UpdatedBy string `json:"updatedBy,omitempty"`
}

// EntityManagementConfluenceIntegration - Bare essentials for any integration with confluence
type EntityManagementConfluenceIntegration struct {
	// The confluence user ID associated with this integration.
	ConfluenceUserId string `json:"confluenceUserId"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of the Confluence Rag Settings.
	Name string `json:"name"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// The secret key referencing confluence credentials in secret store.
	SecretKey string `json:"secretKey"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
	// The confluence domain.
	URL string `json:"url"`
}

func (x *EntityManagementConfluenceIntegration) ImplementsEntityManagementEntity() {}

// EntityManagementConfluenceRagSettingsEntity - Confluence Rag Settings
type EntityManagementConfluenceRagSettingsEntity struct {
	// The options for character text splitter
	CharacterTextSplitterOptions EntityManagementCharacterTextSplitterOptions `json:"characterTextSplitterOptions,omitempty"`
	// The chunk overlap for chunking documents
	ChunkOverlap int `json:"chunkOverlap,omitempty"`
	// The chunk size for chunking documents
	ChunkSize int `json:"chunkSize,omitempty"`
	// The ID of the confluence integration entity
	ConfluenceIntegrationId string `json:"confluenceIntegrationId"`
	// The CQL query for selecting documents to index.
	ConfluenceQuery string `json:"confluenceQuery"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// The interval, in seconds, for how often documents are synced.
	IntervalSeconds int `json:"intervalSeconds"`
	// The timestamp when the connector was last run.
	LastPullTime *nrtime.EpochMilliseconds `json:"lastPullTime,omitempty"`
	// The options when using the markdown text splitter
	MarkdownTextSplitterOptions EntityManagementMarkdownTextSplitterOptions `json:"markdownTextSplitterOptions,omitempty"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of the Confluence Rag Settings.
	Name string `json:"name"`
	// The timestamp for the connector's next scheduled run.
	NextPullTime *nrtime.EpochMilliseconds `json:"nextPullTime,omitempty"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The text splitter to be used
	TextSplitterType EntityManagementTextSplitterType `json:"textSplitterType,omitempty"`
	// The options when using a token text splitter
	TokenTextSplitterOptions EntityManagementTokenTextSplitterOptions `json:"tokenTextSplitterOptions,omitempty"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementConfluenceRagSettingsEntity) ImplementsEntityManagementEntity() {}

// EntityManagementDeploymentAgentConfigurationVersion - Properties of a deployed configuration version
type EntityManagementDeploymentAgentConfigurationVersion struct {
	// Configuration version ID
	ID string `json:"id"`
}

// EntityManagementDiscoverySettings - Discovery related settings.
type EntityManagementDiscoverySettings struct {
	// If discovery is enabled for that organization or not.
	Enabled bool `json:"enabled"`
	// Tag keys used for discovery for the organization.
	TagKeys []string `json:"tagKeys"`
}

// EntityManagementEntity - The Entity interface.
type EntityManagementEntity struct {
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of this entity.
	Name string `json:"name"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementEntity) ImplementsEntityManagementEntity() {}

// EntityManagementEntityDeleteResult - The result of deleting an entity.
type EntityManagementEntityDeleteResult struct {
	// The id of the entity effectively deleted.
	ID string `json:"id"`
}

// EntityManagementEntitySearchResult - The result of an entities query.
type EntityManagementEntitySearchResult struct {
	// The current page of results.
	Entities []EntityManagementEntityInterface `json:"entities"`
	// Cursor pointing to the next page of results.
	NextCursor string `json:"nextCursor,omitempty"`
}

// special
func (x *EntityManagementEntitySearchResult) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "entities":
			if v == nil {
				continue
			}
			var rawMessageEntities []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageEntities)
			if err != nil {
				return err
			}

			for _, m := range rawMessageEntities {
				xxx, err := UnmarshalEntityManagementEntityInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.Entities = append(x.Entities, *xxx)
				}
			}
		case "nextCursor":
			err = json.Unmarshal(*v, &x.NextCursor)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// EntityManagementExecutionIssue - Rule execution issues
type EntityManagementExecutionIssue struct {
	// Machine-readable code specifying the type of error or status.
	StatusCode EntityManagementStatusCode `json:"statusCode"`
	// Human-readable message providing details about the error or status.
	StatusMessage string `json:"statusMessage,omitempty"`
}

// EntityManagementExternalOwner - Owner of the repository
type EntityManagementExternalOwner struct {
	// External Owner ID of the repository.
	ID string `json:"id"`
	// Type of owner of the repository eg:- user,organisation etc.
	Type EntityManagementExternalOwnerType `json:"type"`
}

// EntityManagementFleetDeployment - Deprecated: A set of configurations that are currently deployed
type EntityManagementFleetDeployment struct {
	// A list of EntityGuid of Managed Entities selected for Canary deploy
	CanaryManagedEntities []string `json:"canaryManagedEntities"`
	// The number of configurations changed during this deployment
	ConfigsChanged int `json:"configsChanged"`
	// A list of configurations included in this deployment
	ConfigurationVersions []string `json:"configurationVersions"`
	// Deployment started
	DeployedAt *nrtime.EpochMilliseconds `json:"deployedAt"`
	// Deployment description
	Description string `json:"description,omitempty"`
	// The number of entities changed during this deployment
	EntitiesChanged int `json:"entitiesChanged"`
	// The number of managed entities changed during this deployment
	ManagedEntitiesChanged int `json:"managedEntitiesChanged,omitempty"`
	// The number of managed entities required to change during this deployment
	ManagedEntitiesRequiredToChange int `json:"managedEntitiesRequiredToChange,omitempty"`
	// Metadata containing identification of the user who created this deployment
	Metadata EntityManagementUserMetadata `json:"metadata,omitempty"`
	// Deployment name
	Name string `json:"name"`
	// Deployment status
	Status string `json:"status,omitempty"`
	// The number of supervised agent entities changed during this deployment
	SupervisedAgentEntitiesChanged int `json:"supervisedAgentEntitiesChanged,omitempty"`
	// The number of supervised agent entities required to change during this deployment
	SupervisedAgentEntitiesRequiredToChange int `json:"supervisedAgentEntitiesRequiredToChange,omitempty"`
}

// EntityManagementFleetDeploymentEntity - A set of configurations that can be deployed to a fleet
type EntityManagementFleetDeploymentEntity struct {
	// A list of configurations included in this deployment
	ConfigurationVersionList []EntityManagementDeploymentAgentConfigurationVersion `json:"configurationVersionList,omitempty"`
	// Deprecated - Replaced by configurationVersionList
	ConfigurationVersions []string `json:"configurationVersions"`
	// Deployment description
	Description string `json:"description,omitempty"`
	// Deployment's Fleet ID
	FleetId string `json:"fleetId"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// Deployment name
	Name string `json:"name"`
	// Deployment phase
	Phase EntityManagementFleetDeploymentPhase `json:"phase,omitempty"`
	// Ring wise deployment status
	RingsDeploymentTracker []EntityManagementRingDeploymentTracker `json:"ringsDeploymentTracker,omitempty"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementFleetDeploymentEntity) ImplementsEntityManagementEntity() {}

// EntityManagementFleetEntity - A fleet of entities that are managed by NRAgentControl
type EntityManagementFleetEntity struct {
	// Object holds state of current deployment
	CurrentDeployment EntityManagementFleetDeployment `json:"currentDeployment,omitempty"`
	// User provided description for the fleet
	Description string `json:"description,omitempty"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// CollectionEntity that associates rings of managed entities for Fleet
	ManagedEntityRings EntityManagementCollectionEntity `json:"managedEntityRings,omitempty"`
	// The type of entity the fleet will manage. e.g. HOST
	ManagedEntityType EntityManagementManagedEntityType `json:"managedEntityType"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// A unique user provided name for the fleet
	Name string `json:"name"`
	// Indicates this fleet has a specific product type
	Product []string `json:"product"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementFleetEntity) ImplementsEntityManagementEntity() {}

// EntityManagementFleetRingEntity - A group of Managed Entities in a fleet to which a fleet deployment is applied
type EntityManagementFleetRingEntity struct {
	// Ring's Fleet ID
	FleetId string `json:"fleetId"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// CollectionEntity associated with the ring
	ManagedEntities EntityManagementCollectionEntity `json:"managedEntities,omitempty"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of this entity.
	Name string `json:"name"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementFleetRingEntity) ImplementsEntityManagementEntity() {}

// EntityManagementGitRepositoryEntity - An entity representing a Repository of a organization
type EntityManagementGitRepositoryEntity struct {
	// Count of closed pull requests(PR) in the repository.
	ClosedPullRequestCount int `json:"closedPullRequestCount"`
	// The latest Configuration Item associated to the repository.  Contains a JSON representation of the repository configuration.
	Configuration EntityManagementConfiguration `json:"configuration,omitempty"`
	// The description of the repository.
	Description string `json:"description,omitempty"`
	// Repository Creation date at code hosting tool like github, gitlab etc
	ExternalCreatedAt *nrtime.EpochMilliseconds `json:"externalCreatedAt"`
	// External Unique Identifier in Code hosting systems like github,gitlab etc.
	ExternalId string `json:"externalId"`
	// Last time the repository was deployed.
	ExternalLastDeployedAt *nrtime.EpochMilliseconds `json:"externalLastDeployedAt,omitempty"`
	// External owner of the repository.
	ExternalOwner EntityManagementExternalOwner `json:"externalOwner,omitempty"`
	// Repository Updation date at code hosting tool like github, gitlab etc
	ExternalUpdatedAt *nrtime.EpochMilliseconds `json:"externalUpdatedAt"`
	// Number of times Repository has been forked.
	ForkCount int `json:"forkCount"`
	// Source of the repository.
	HostingPlatform EntityManagementHostingPlatform `json:"hostingPlatform"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Last release version of the repository.
	LatestReleaseVersion string `json:"latestReleaseVersion,omitempty"`
	// License associated with the repository
	License EntityManagementRepositoryLicense `json:"license,omitempty"`
	// Count of locked pull requests(PR) in the repository.
	LockedPullRequestCount int `json:"lockedPullRequestCount"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of this entity.
	Name string `json:"name"`
	// Count of open pull requests(PR) in the repository.
	OpenPullRequestCount int `json:"openPullRequestCount"`
	// Most used language of the repository.
	PrimaryLanguage string `json:"primaryLanguage,omitempty"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
	// Source Url of the repository eg:- gitUrl.
	URL string `json:"url"`
}

func (x *EntityManagementGitRepositoryEntity) ImplementsEntityManagementEntity() {}

// EntityManagementInboxIssueCategoryEntity - Entity to represent category type configuration
type EntityManagementInboxIssueCategoryEntity struct {
	// Scope for this configuration
	CategoryScope EntityManagementCategoryScope `json:"categoryScope"`
	// New category Type. Start with capital letter.
	CategoryType string `json:"categoryType"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// issue Type for category type. Should be pre-existed. New issue type have to be added manually in the code.
	IssueType EntityManagementIssueType `json:"issueType"`
	// Message attributes provided in order. Application will fall back to second then third and so on if previous attribute not found or null or empty.
	MessageAttributes []string `json:"messageAttributes,omitempty"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of this entity.
	Name string `json:"name"`
	// Name attributes in order. Application will fall back to second then third and so on if previous attribute not found or null or empty.
	NameAttributes []string `json:"nameAttributes"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementInboxIssueCategoryEntity) ImplementsEntityManagementEntity() {}

// EntityManagementLlmConfig - configurable details for the LLM
type EntityManagementLlmConfig struct {
	// Seed for reproducible output from LLM
	CacheSeed string `json:"cacheSeed,omitempty"`
	// LLM parameter for creative control
	Temperature float64 `json:"temperature,omitempty"`
}

// EntityManagementMarkdownTextSplitterOptions - The MarkdownTextSplitter options
type EntityManagementMarkdownTextSplitterOptions struct {
	// Headers to split text on
	HeadersToSplitOn []string `json:"headersToSplitOn"`
	// Wether splitter should return each line
	ReturnEachLine bool `json:"returnEachLine"`
}

// EntityManagementMetadata - Metadata about an entity.
type EntityManagementMetadata struct {
	// The entity's creation time.
	CreatedAt *nrtime.EpochMilliseconds `json:"createdAt,omitempty"`
	// Actor that created this entity.
	CreatedBy EntityManagementActorInterface `json:"createdBy,omitempty"`
	// The entity's last update time.
	UpdatedAt *nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
	// Actor that updated this entity.
	UpdatedBy EntityManagementActorInterface `json:"updatedBy,omitempty"`
	// The entity current version. Use this value for concurrency control.
	Version int `json:"version"`
}

// special
func (x *EntityManagementMetadata) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "createdAt":
			err = json.Unmarshal(*v, &x.CreatedAt)
			if err != nil {
				return err
			}
		case "createdBy":
			if v == nil {
				continue
			}
			xxx, err := UnmarshalEntityManagementActorInterface(*v)
			if err != nil {
				return err
			}

			if xxx != nil {
				x.CreatedBy = *xxx
			}
		case "updatedAt":
			err = json.Unmarshal(*v, &x.UpdatedAt)
			if err != nil {
				return err
			}
		case "updatedBy":
			if v == nil {
				continue
			}
			xxx, err := UnmarshalEntityManagementActorInterface(*v)
			if err != nil {
				return err
			}

			if xxx != nil {
				x.UpdatedBy = *xxx
			}
		case "version":
			err = json.Unmarshal(*v, &x.Version)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// EntityManagementNRQLRuleEngine - NRQL engine configuration.
type EntityManagementNRQLRuleEngine struct {
	// The accounts to be queried.
	Accounts []int `json:"accounts"`
	// An optional list of accounts that are joined with 'accounts' when running the query.
	JoinAccounts []int `json:"joinAccounts"`
	// The query to be executed.
	Query string `json:"query"`
}

// EntityManagementPerformanceInboxSettingEntity - Performance inbox setting entity. This entity encompasses all the performance inbox settings.
type EntityManagementPerformanceInboxSettingEntity struct {
	// Collection of configs for performance inbox settings.
	Config []EntityManagementConfig `json:"config"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of this entity.
	Name string `json:"name"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementPerformanceInboxSettingEntity) ImplementsEntityManagementEntity() {}

// EntityManagementPipelineCloudRuleEntity - A rule applied to telemetry data to modify how it's processed in some way
type EntityManagementPipelineCloudRuleEntity struct {
	// Description of this pipeline cloud rule.
	Description string `json:"description,omitempty"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The NRQL string used to specify the action you want to take and data you want to take the specified action on.
	NRQL nrdb.NRQL `json:"nrql"`
	// The name of this entity.
	Name string `json:"name"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementPipelineCloudRuleEntity) ImplementsEntityManagementEntity() {}

// EntityManagementPipelineCloudRuleEntityCreateInput - Create input for PipelineCloudRuleEntity entity type.
type EntityManagementPipelineCloudRuleEntityCreateInput struct {
	// See description in PipelineCloudRuleEntity.
	Description string `json:"description,omitempty"`
	// See nrql in PipelineCloudRuleEntity.
	NRQL nrdb.NRQL `json:"nrql"`
	// See name in PipelineCloudRuleEntity.
	Name string `json:"name"`
	// See scope in PipelineCloudRuleEntity.
	Scope EntityManagementScopedReferenceInput `json:"scope,omitempty"`
	// See tags in PipelineCloudRuleEntity.
	Tags []EntityManagementTagInput `json:"tags,omitempty"`
}

// EntityManagementPipelineCloudRuleEntityCreateResult - The result of creating an entity.
type EntityManagementPipelineCloudRuleEntityCreateResult struct {
	// The created entity.
	Entity EntityManagementPipelineCloudRuleEntity `json:"entity"`
}

// EntityManagementPipelineCloudRuleEntityUpdateInput - Update input for PipelineCloudRuleEntity entity type.
type EntityManagementPipelineCloudRuleEntityUpdateInput struct {
	// See description in PipelineCloudRuleEntity.
	Description string `json:"description,omitempty"`
	// See nrql in PipelineCloudRuleEntity.
	NRQL nrdb.NRQL `json:"nrql,omitempty"`
	// See name in PipelineCloudRuleEntity.
	Name string `json:"name,omitempty"`
	// See tags in PipelineCloudRuleEntity.
	Tags []EntityManagementTagInput `json:"tags,omitempty"`
}

// EntityManagementPipelineCloudRuleEntityUpdateResult - The result of updating an entity.
type EntityManagementPipelineCloudRuleEntityUpdateResult struct {
	// The updated entity.
	Entity EntityManagementPipelineCloudRuleEntity `json:"entity"`
}

// EntityManagementRagToolEntity - A tool for use with NRAI
type EntityManagementRagToolEntity struct {
	// The description of the tool.
	Description string `json:"description"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of the tool
	Name string `json:"name"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementRagToolEntity) ImplementsEntityManagementEntity() {}

// EntityManagementRelationshipDeleteResult - The result of deleting an entity relationship.
type EntityManagementRelationshipDeleteResult struct {
	// The source id of the relationship effectively deleted.
	SourceId string `json:"sourceId"`
	// The target id of the relationship effectively deleted.
	TargetId string `json:"targetId"`
	// The relationship type effectively deleted.
	Type string `json:"type"`
}

// EntityManagementRepositoryLicense - License associated with the repository
type EntityManagementRepositoryLicense struct {
	// License Name associated with the repository e.g:- MIT, GPL, apache2.0..
	Name EntityManagementLicenseName `json:"name"`
	// License Url associated with the repository
	URL string `json:"url,omitempty"`
}

// EntityManagementRingDeploymentTracker - A type for holding deployment status for a Ring
type EntityManagementRingDeploymentTracker struct {
	// Rollout end time
	CompletedAt *nrtime.EpochMilliseconds `json:"completedAt,omitempty"`
	// Ring name
	Name string `json:"name"`
	// Rollout start time
	StartedAt *nrtime.EpochMilliseconds `json:"startedAt,omitempty"`
	// Ring deployment status
	Status string `json:"status"`
}

// EntityManagementRuleExecutionStatus - Rule execution status
type EntityManagementRuleExecutionStatus struct {
	// Checked entities count
	CheckedEntities int `json:"checkedEntities,omitempty"`
	// The timestamp of rule execution
	ExecutedAt *nrtime.EpochMilliseconds `json:"executedAt,omitempty"`
	// List detailing issues encountered during the rule execution
	ExecutionIssues []EntityManagementExecutionIssue `json:"executionIssues,omitempty"`
	// The status of the execution of the rule
	ExecutionStatus EntityManagementExecutionStatus `json:"executionStatus"`
}

// EntityManagementSchedule - An attribute, that contains information about scheduler configuration
type EntityManagementSchedule struct {
	// An optional attribute is limited to a cron expression, which should be convertible to a minute period
	CronExpression string `json:"cronExpression,omitempty"`
	// An optional field stating the status of the schedule
	Enabled bool `json:"enabled,omitempty"`
	// An optional attribute unit is in minutes, with a minimum of 1 minute and a maximum of 1 year expressed in minutes
	Period int `json:"period,omitempty"`
	// An optional attribute executes at once, with the date-time value in ISO 8601 format
	ScheduleAt string `json:"scheduleAt,omitempty"`
}

// EntityManagementScopedReference - An entity with scope.
type EntityManagementScopedReference struct {
	// The unique reference identifier of the an object within the given scope
	ID string `json:"id"`
	// The scope of the entity
	Type EntityManagementEntityScope `json:"type"`
}

// EntityManagementScopedReferenceInput - Input for ScopedReference.
type EntityManagementScopedReferenceInput struct {
	// See id in ScopedReference.
	ID string `json:"id"`
	// See type in ScopedReference.
	Type EntityManagementEntityScope `json:"type"`
}

// EntityManagementScorecardEntity - An entity with collection of scorecard rules.
type EntityManagementScorecardEntity struct {
	// The scorecard description.
	Description string `json:"description,omitempty"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// A unique user provided name for the scorecard.
	Name string `json:"name"`
	// List of rules in the scorecard.
	Rules EntityManagementCollectionEntity `json:"rules,omitempty"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementScorecardEntity) ImplementsEntityManagementEntity() {}

// EntityManagementScorecardRuleEntity - An entity representing rule in scorecards.
type EntityManagementScorecardRuleEntity struct {
	// The rule description.
	Description string `json:"description,omitempty"`
	// Is rule enabled.
	Enabled bool `json:"enabled"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Last execution status of the rule
	LastExecutionStatus EntityManagementRuleExecutionStatus `json:"lastExecutionStatus,omitempty"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The NRQL rule engine.
	NRQLEngine EntityManagementNRQLRuleEngine `json:"nrqlEngine"`
	// A unique user provided name for the rule
	Name string `json:"name"`
	// Schedule configuration of the rule: only period configuration is currently supported.
	Schedule EntityManagementSchedule `json:"schedule,omitempty"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementScorecardRuleEntity) ImplementsEntityManagementEntity() {}

// EntityManagementSignatureDetails - A set of signature details for a blob signature
type EntityManagementSignatureDetails struct {
	// The checksum of the blob
	Checksum string `json:"checksum,omitempty"`
	// The checksum algorithm used to calculate the checksum of the blob content
	ChecksumAlgorithm string `json:"checksumAlgorithm,omitempty"`
	// Id for the key used for signing
	KeyID string `json:"keyId,omitempty"`
	// Signature of the blob
	Signature string `json:"signature,omitempty"`
	// Signature algorithm specification
	SignatureSpecification string `json:"signatureSpecification,omitempty"`
	// Algorithm used for signing
	SigningAlgorithm string `json:"signingAlgorithm,omitempty"`
	// Domain associated to the private key used for signing
	SigningDomain string `json:"signingDomain,omitempty"`
}

// EntityManagementSyncGroupRule - Rule to create teams from groups.
type EntityManagementSyncGroupRule struct {
	// The conditions of the rule.
	Conditions []EntityManagementSyncGroupRuleCondition `json:"conditions"`
}

// EntityManagementSyncGroupRuleCondition - Sync group rule condition.
type EntityManagementSyncGroupRuleCondition struct {
	// The condition type.
	Type EntityManagementSyncGroupRuleConditionType `json:"type"`
	// The value to match.
	Value string `json:"value"`
}

// EntityManagementSyncGroupsSettings - Groups sync related settings.
type EntityManagementSyncGroupsSettings struct {
	// If sync groups is enabled for that organization or not.
	Enabled bool `json:"enabled"`
	// The rules to create teams from groups.
	Rules []EntityManagementSyncGroupRule `json:"rules"`
}

// EntityManagementSystemActor - A system actor.
type EntityManagementSystemActor struct {
	// Id of the actor.
	ID string `json:"id"`
}

func (x *EntityManagementSystemActor) ImplementsEntityManagementActor() {}

// EntityManagementTag - An entity tag.
type EntityManagementTag struct {
	// The key or name of the tag.
	Key string `json:"key"`
	// The list of values of the tag.
	Values []string `json:"values"`
}

// EntityManagementTagInput - Input for tags.
type EntityManagementTagInput struct {
	// The key or name of the tag.
	Key string `json:"key"`
	// The list of values of the tag.
	Values []string `json:"values"`
}

// EntityManagementTeamEntity - An entity representing a New Relic Team.
type EntityManagementTeamEntity struct {
	// List of aliases associated to the team.
	Aliases []string `json:"aliases"`
	// Further information about team.
	Description string `json:"description,omitempty"`
	// External Integration with another system.
	ExternalIntegration EntityManagementTeamExternalIntegration `json:"externalIntegration,omitempty"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Collection that contains the list of members belonging to the team.
	Membership EntityManagementCollectionEntity `json:"membership,omitempty"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of this entity.
	Name string `json:"name"`
	// Collection that contains the list of entities owned by the team.
	Ownership EntityManagementCollectionEntity `json:"ownership,omitempty"`
	// List of resources attached to the team.
	Resources []EntityManagementTeamResource `json:"resources"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementTeamEntity) ImplementsEntityManagementEntity() {}

// EntityManagementTeamExternalIntegration - Integration with an external system.
type EntityManagementTeamExternalIntegration struct {
	// The id in the external system.
	ExternalId string `json:"externalId"`
	// The type of the Integration.
	Type EntityManagementTeamExternalIntegrationType `json:"type,omitempty"`
}

// EntityManagementTeamResource - Any extra information attached to a Team.
type EntityManagementTeamResource struct {
	// Holds the content of the resource.
	Content string `json:"content"`
	// Main text for the resource, use the content if null.
	Title string `json:"title,omitempty"`
	// Type of resource, the UI might be enriched based on the value.
	Type string `json:"type"`
}

// EntityManagementTeamsOrganizationSettingsEntity - Teams global settings per organization.
type EntityManagementTeamsOrganizationSettingsEntity struct {
	// Discovery settings.
	Discovery EntityManagementDiscoverySettings `json:"discovery,omitempty"`
	// The entity's global unique identifier.
	ID string `json:"id"`
	// Metadata about the entity.
	Metadata EntityManagementMetadata `json:"metadata"`
	// The name of this entity.
	Name string `json:"name"`
	// The entity's scope.
	Scope EntityManagementScopedReference `json:"scope"`
	// Sync groups settings.
	SyncGroups EntityManagementSyncGroupsSettings `json:"syncGroups,omitempty"`
	// Collection of tags.
	Tags []EntityManagementTag `json:"tags"`
	// The entity type.
	Type string `json:"type"`
}

func (x *EntityManagementTeamsOrganizationSettingsEntity) ImplementsEntityManagementEntity() {}

// EntityManagementTokenTextSplitterOptions - The TokenTextSplitter options
type EntityManagementTokenTextSplitterOptions struct {
	// Encoding to token splitter
	EncodingName EntityManagementEncodingName `json:"encodingName"`
}

// EntityManagementUserActor - A user actor.
type EntityManagementUserActor struct {
	// Id of the actor.
	ID string `json:"id"`
}

func (x *EntityManagementUserActor) ImplementsEntityManagementActor() {}

// EntityManagementUserMetadata - Deprecated: User Metadata
type EntityManagementUserMetadata struct {
	// The object creation time.
	CreatedAt *nrtime.EpochMilliseconds `json:"createdAt,omitempty"`
	// The object last update time.
	UpdatedAt *nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
	// User ID that created this object.
	UserID string `json:"userId,omitempty"`
}

// EntityOutline - The `EntityOutline` interface object allows fetching basic entity data for many entities at a time.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type EntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *EntityOutline) ImplementsAlertableEntityOutline() {}

func (x *EntityOutline) ImplementsEntityOutline() {}

// EntityRelationship - An entity relationship
type EntityRelationship struct {
	// The source entity of the relationship.
	Source EntityRelationshipNode `json:"source,omitempty"`
	// The target entity of the relationship.
	Target EntityRelationshipNode `json:"target,omitempty"`
	// The type of the relationship. For details, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Type EntityRelationshipType `json:"type,omitempty"`
}

// EntityRelationshipDetectedEdge - An entity relationship automatically detected by NewRelic.
type EntityRelationshipDetectedEdge struct {
	// The time the relationship was created.
	CreatedAt *nrtime.EpochMilliseconds `json:"createdAt"`
	// The source entity of the relationship.
	Source EntityRelationshipVertex `json:"source"`
	// The target entity of the relationship.
	Target EntityRelationshipVertex `json:"target"`
	// The type of the relationship.
	Type EntityRelationshipEdgeType `json:"type"`
}

func (x *EntityRelationshipDetectedEdge) ImplementsEntityRelationshipEdge() {}

// EntityRelationshipEdge - An entity relationship.
type EntityRelationshipEdge struct {
	// The time the relationship was created.
	CreatedAt *nrtime.EpochMilliseconds `json:"createdAt"`
	// The source entity of the relationship.
	Source EntityRelationshipVertex `json:"source"`
	// The target entity of the relationship.
	Target EntityRelationshipVertex `json:"target"`
	// The type of the relationship.
	Type EntityRelationshipEdgeType `json:"type"`
}

func (x *EntityRelationshipEdge) ImplementsEntityRelationshipEdge() {}

// EntityRelationshipEdgeFilter - EntityRelationship edge filter.
type EntityRelationshipEdgeFilter struct {
	// Filter by direction of relationship.
	Direction EntityRelationshipEdgeDirection `json:"direction,omitempty"`
	// Filter on entity domain-types.
	EntityDomainTypes EntityRelationshipEntityDomainTypeFilter `json:"entityDomainTypes,omitempty"`
	// Filter on relationship types.
	RelationshipTypes EntityRelationshipEdgeTypeFilter `json:"relationshipTypes,omitempty"`
}

// EntityRelationshipEdgeTypeFilter - Filter on relationship types.
type EntityRelationshipEdgeTypeFilter struct {
	// Filter the relationships to those that are not of specific relationship types.
	Exclude []EntityRelationshipEdgeType `json:"exclude"`
	// Filter the relationships to those of specific relationship types.
	Include []EntityRelationshipEdgeType `json:"include"`
}

// EntityRelationshipEntityDomainTypeFilter - Filter on entity domain-types.
type EntityRelationshipEntityDomainTypeFilter struct {
	// Filter the relationships to those between entities that are not of specific domain-types.
	Exclude []DomainTypeInput `json:"exclude,omitempty"`
	// Filter the relationships to those between entities of specific domain-types.
	Include []DomainTypeInput `json:"include,omitempty"`
}

// EntityRelationshipFilter - Relationship filter
type EntityRelationshipFilter struct {
	// Filter the relationships to those that contain a specific entity type.
	EntityType []EntityType `json:"entityType,omitempty"`
	// Filter the relationships to those that contain a specific Infrastructure integration entity type
	InfrastructureIntegrationType []EntityInfrastructureIntegrationType `json:"infrastructureIntegrationType,omitempty"`
}

// EntityRelationshipNode - A node in an Entity relationship.
type EntityRelationshipNode struct {
	// The Account ID for the relationship node.
	AccountID int                    `json:"accountId,omitempty"`
	Entity    EntityOutlineInterface `json:"entity,omitempty"`
	// The `EntityType` of the relationship node.
	EntityType EntityType `json:"entityType,omitempty"`
	// The Entity `guid` for the relationship node.
	GUID EntityGUID `json:"guid,omitempty"`
}

// special
func (x *EntityRelationshipNode) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "accountId":
			err = json.Unmarshal(*v, &x.AccountID)
			if err != nil {
				return err
			}
		case "entity":
			if v == nil {
				continue
			}
			xxx, err := UnmarshalEntityOutlineInterface(*v)
			if err != nil {
				return err
			}

			if xxx != nil {
				x.Entity = *xxx
			}
		case "entityType":
			err = json.Unmarshal(*v, &x.EntityType)
			if err != nil {
				return err
			}
		case "guid":
			err = json.Unmarshal(*v, &x.GUID)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// EntityRelationshipRelatedEntitiesResult - Response containing entity relationships.
type EntityRelationshipRelatedEntitiesResult struct {
	// The next cursor for fetching additional paginated results.
	NextCursor string `json:"nextCursor,omitempty"`
	// The list of  entity relationships.
	Results []EntityRelationshipEdgeInterface `json:"results"`
}

// special
func (x *EntityRelationshipRelatedEntitiesResult) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "nextCursor":
			err = json.Unmarshal(*v, &x.NextCursor)
			if err != nil {
				return err
			}
		case "results":
			if v == nil {
				continue
			}
			var rawMessageResults []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageResults)
			if err != nil {
				return err
			}

			for _, m := range rawMessageResults {
				xxx, err := UnmarshalEntityRelationshipEdgeInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.Results = append(x.Results, *xxx)
				}
			}
		}
	}

	return nil
}

// EntityRelationshipUserDefinedEdge - An entity user-defined relationship.
type EntityRelationshipUserDefinedEdge struct {
	// The time the relationship was created.
	CreatedAt *nrtime.EpochMilliseconds `json:"createdAt"`
	// The user that created the relationship.
	CreatedByUser UserReference `json:"createdByUser,omitempty"`
	// The source entity of the relationship.
	Source EntityRelationshipVertex `json:"source"`
	// The target entity of the relationship.
	Target EntityRelationshipVertex `json:"target"`
	// The type of the relationship.
	Type EntityRelationshipEdgeType `json:"type"`
}

func (x *EntityRelationshipUserDefinedEdge) ImplementsEntityRelationshipEdge() {}

// EntityRelationshipVertex - A vertex in an entity relationship edge.
type EntityRelationshipVertex struct {
	// The account ID of the relationship node.
	AccountID int `json:"accountId"`
	// The entity of the relationship node.
	Entity EntityOutlineInterface `json:"entity,omitempty"`
	// The entity guid of the relationship node.
	GUID EntityGUID `json:"guid"`
}

// special
func (x *EntityRelationshipVertex) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "accountId":
			err = json.Unmarshal(*v, &x.AccountID)
			if err != nil {
				return err
			}
		case "entity":
			if v == nil {
				continue
			}
			xxx, err := UnmarshalEntityOutlineInterface(*v)
			if err != nil {
				return err
			}

			if xxx != nil {
				x.Entity = *xxx
			}
		case "guid":
			err = json.Unmarshal(*v, &x.GUID)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// EntitySearch - A data structure that contains the detailed response of an entity search.
//
// The direct search result is available through `results`. Information about the
// query itself is available through `query`, `types`, and `count`.
type EntitySearch struct {
	// The number of entities returned by the entity search.
	Count int `json:"count,omitempty"`
	// A count of the Entity Search results faceted by a chosen set of criteria.
	//
	// Note: Unlike a NRQL facet, the facet results do not include entities where the facet value does not exist. Additionally, entities can be tagged with multiple tag values for one tag key. For these reasons, depending on the facet values chosen, the `counts` field will not always equal the `entitySearch.count` field.
	Counts []EntitySearchCounts `json:"counts,omitempty"`
	// The entity search query string that was generated by the `query` argument or the `queryBuilder` argument.
	Query string `json:"query,omitempty"`
	// The paginated results of the entity search.
	Results EntitySearchResult `json:"results,omitempty"`
	// The entity types returned by the entity search.
	Types []EntitySearchTypes `json:"types,omitempty"`
}

// EntitySearchCounts - The groupings and counts of entities returned for the specified criteria.
type EntitySearchCounts struct {
	// The number of entities that match the specified criteria.
	Count int `json:"count,omitempty"`
	// The group of entities returned for the specified criteria.
	Facet AttributeMap `json:"facet,omitempty"`
}

// EntitySearchResult - A section of the entity search results. If there is a `nextCursor` present, there are more results available.
type EntitySearchResult struct {
	// The entities contained in this section of the entity search results.
	//
	// For information on New Relic entities, visit [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
	//
	// To see some query examples of entity information,
	// visit [our entity GraphQL API docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/use-new-relic-graphql-api-query-entities).
	Entities []EntityOutlineInterface `json:"entities,omitempty"`
	// The next cursor for fetching additional paginated entity search results.
	NextCursor string `json:"nextCursor,omitempty"`
}

// special
func (x *EntitySearchResult) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "entities":
			if v == nil {
				continue
			}
			var rawMessageEntities []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageEntities)
			if err != nil {
				return err
			}

			for _, m := range rawMessageEntities {
				xxx, err := UnmarshalEntityOutlineInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.Entities = append(x.Entities, *xxx)
				}
			}
		case "nextCursor":
			err = json.Unmarshal(*v, &x.NextCursor)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// EntitySearchTypes - A detailed entity search response object type.
type EntitySearchTypes struct {
	// The number of results with this type.
	Count int `json:"count,omitempty"`
	// The domain of the search result group.
	Domain string `json:"domain,omitempty"`
	// The combined domain & type of the search result group.
	EntityType EntityType `json:"entityType,omitempty"`
	// The type of the search result group.
	Type string `json:"type,omitempty"`
}

// EntityTag - A tag that has been applied to an entity.
type EntityTag struct {
	// The tag's key
	Key string `json:"key,omitempty"`
	// A list of the tag values
	Values []string `json:"values,omitempty"`
}

// EntityTagValueWithMetadata - The value and metadata of a single entity tag.
type EntityTagValueWithMetadata struct {
	// Whether or not the tag can be mutated by the user.
	Mutable bool `json:"mutable,omitempty"`
	// The tag value.
	Value string `json:"value,omitempty"`
}

// EntityTagWithMetadata - The tags with metadata of the entity.
type EntityTagWithMetadata struct {
	// The tag's key.
	Key string `json:"key,omitempty"`
	// A list of tag values with metadata information.
	Values []EntityTagValueWithMetadata `json:"values,omitempty"`
}

// EventAttributeDefinition - A human-readable definition of an NRDB Event Type Attribute
type EventAttributeDefinition struct {
	// This attribute's category
	Category string `json:"category,omitempty"`
	// A short description of this attribute
	Definition string `json:"definition,omitempty"`
	// The New Relic docs page for this attribute
	DocumentationURL string `json:"documentationUrl,omitempty"`
	// The human-friendly formatted name of the attribute
	Label string `json:"label,omitempty"`
	// The name of the attribute
	Name string `json:"name,omitempty"`
}

// EventDefinition - A human-readable definition of an NRDB Event Type
type EventDefinition struct {
	// A list of attribute definitions for this event type
	Attributes []EventAttributeDefinition `json:"attributes,omitempty"`
	// A short description of this event
	Definition string `json:"definition,omitempty"`
	// The human-friendly formatted name of the event
	Label string `json:"label,omitempty"`
	// The name of the event
	Name string `json:"name,omitempty"`
}

// ExternalEntity - An External entity.
type ExternalEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *ExternalEntity) ImplementsAlertableEntity() {}

func (x *ExternalEntity) ImplementsEntity() {}

// ExternalEntityOutline - An External entity outline.
type ExternalEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *ExternalEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *ExternalEntityOutline) ImplementsEntityOutline() {}

// GenericEntity - A generic entity.
type GenericEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *GenericEntity) ImplementsAlertableEntity() {}

func (x *GenericEntity) ImplementsEntity() {}

// GenericEntityOutline - A generic entity outline.
type GenericEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *GenericEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *GenericEntityOutline) ImplementsEntityOutline() {}

// GenericInfrastructureEntity - An Infrastructure entity.
type GenericInfrastructureEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt           *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	IntegrationTypeCode string                    `json:"integrationTypeCode,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *GenericInfrastructureEntity) ImplementsAlertableEntity() {}

func (x *GenericInfrastructureEntity) ImplementsEntity() {}

func (x *GenericInfrastructureEntity) ImplementsInfrastructureIntegrationEntity() {}

// GenericInfrastructureEntityOutline - An Infrastructure entity outline.
type GenericInfrastructureEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt           *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	IntegrationTypeCode string                    `json:"integrationTypeCode,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *GenericInfrastructureEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *GenericInfrastructureEntityOutline) ImplementsEntityOutline() {}

func (x *GenericInfrastructureEntityOutline) ImplementsInfrastructureIntegrationEntityOutline() {}

// InfrastructureAwsLambdaFunctionEntity - An AWS Lambda Function entity.
type InfrastructureAwsLambdaFunctionEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt           *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	IntegrationTypeCode string                    `json:"integrationTypeCode,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool   `json:"reporting,omitempty"`
	Runtime   string `json:"runtime,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *InfrastructureAwsLambdaFunctionEntity) ImplementsAlertableEntity() {}

func (x *InfrastructureAwsLambdaFunctionEntity) ImplementsEntity() {}

func (x *InfrastructureAwsLambdaFunctionEntity) ImplementsInfrastructureIntegrationEntity() {}

// InfrastructureAwsLambdaFunctionEntityOutline - An AWS Lambda Function entity outline.
type InfrastructureAwsLambdaFunctionEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt           *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	IntegrationTypeCode string                    `json:"integrationTypeCode,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool   `json:"reporting,omitempty"`
	Runtime   string `json:"runtime,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *InfrastructureAwsLambdaFunctionEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *InfrastructureAwsLambdaFunctionEntityOutline) ImplementsEntityOutline() {}

func (x *InfrastructureAwsLambdaFunctionEntityOutline) ImplementsInfrastructureIntegrationEntityOutline() {
}

// InfrastructureHostEntity - An Infrastructure Host entity.
type InfrastructureHostEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags  EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	HostSummary InfrastructureHostSummaryData       `json:"hostSummary,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *InfrastructureHostEntity) ImplementsAlertableEntity() {}

func (x *InfrastructureHostEntity) ImplementsEntity() {}

// InfrastructureHostEntityOutline - An Infrastructure Host entity outline.
type InfrastructureHostEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags  EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	HostSummary InfrastructureHostSummaryData       `json:"hostSummary,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *InfrastructureHostEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *InfrastructureHostEntityOutline) ImplementsEntityOutline() {}

// InfrastructureHostSummaryData - Summary statistics about the Infra Host.
type InfrastructureHostSummaryData struct {
	// Total CPU utilization as a percentage.
	CpuUtilizationPercent float64 `json:"cpuUtilizationPercent,omitempty"`
	// The cumulative disk fullness percentage.
	DiskUsedPercent float64 `json:"diskUsedPercent,omitempty"`
	// Total memory utilization as a percentage.
	MemoryUsedPercent float64 `json:"memoryUsedPercent,omitempty"`
	// The number of bytes per second received during the sampling period.
	NetworkReceiveRate float64 `json:"networkReceiveRate,omitempty"`
	// The number of bytes sent per second during the sampling period.
	NetworkTransmitRate float64 `json:"networkTransmitRate,omitempty"`
	// Number of services running on the host.
	ServicesCount int `json:"servicesCount,omitempty"`
}

type InfrastructureIntegrationEntity struct {
	IntegrationTypeCode string `json:"integrationTypeCode,omitempty"`
}

func (x *InfrastructureIntegrationEntity) ImplementsInfrastructureIntegrationEntity() {}

type InfrastructureIntegrationEntityOutline struct {
	IntegrationTypeCode string `json:"integrationTypeCode,omitempty"`
}

func (x *InfrastructureIntegrationEntityOutline) ImplementsInfrastructureIntegrationEntityOutline() {}

// JavaFlightRecorderFlamegraph - The flamegraph built from the strack trace samples
type JavaFlightRecorderFlamegraph struct {
	// List of stack frames for the flamegraph
	AllFrames []JavaFlightRecorderStackFrame `json:"allFrames"`
}

// JavaFlightRecorderStackFrame - A method within the flamegraph
type JavaFlightRecorderStackFrame struct {
	// The number of stack traces that this frame is in
	Count int `json:"count"`
	// This stackframe's id
	ID string `json:"id"`
	// The stackframe's class and method name
	Name string `json:"name"`
	// This stackframe's parent id
	ParentId string `json:"parentId,omitempty"`
}

// KeyTransactionApplication - The application wrapper.
type KeyTransactionApplication struct {
	// The application outline.
	Entity EntityOutlineInterface `json:"entity,omitempty"`
	// The guid of the application.
	GUID EntityGUID `json:"guid"`
}

// special
func (x *KeyTransactionApplication) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "entity":
			if v == nil {
				continue
			}
			xxx, err := UnmarshalEntityOutlineInterface(*v)
			if err != nil {
				return err
			}

			if xxx != nil {
				x.Entity = *xxx
			}
		case "guid":
			err = json.Unmarshal(*v, &x.GUID)
			if err != nil {
				return err
			}
		}
	}

	return nil
}

// KeyTransactionEntity - A Key Transaction entity.
type KeyTransactionEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The acceptable amount of time spent in the backend before customers get frustrated (Apdex target).
	ApdexTarget float64 `json:"apdexTarget"`
	// The application associated with this key transaction
	Application KeyTransactionApplication `json:"application"`
	// The acceptable amount of time for rendering a page in a browser before customers get frustrated (browser Apdex target).
	BrowserApdexTarget float64 `json:"browserApdexTarget,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of the metric underlying this key transaction.
	MetricName string `json:"metricName"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *KeyTransactionEntity) ImplementsAlertableEntity() {}

func (x *KeyTransactionEntity) ImplementsEntity() {}

// KeyTransactionEntityOutline - A Key Transaction entity outline.
type KeyTransactionEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *KeyTransactionEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *KeyTransactionEntityOutline) ImplementsEntityOutline() {}

// MetricNormalizationRule - An object that represents a metric rename rule.
type MetricNormalizationRule struct {
	// Rule action.
	Action MetricNormalizationRuleAction `json:"action,omitempty"`
	// Application GUID
	ApplicationGUID EntityGUID `json:"applicationGuid,omitempty"`
	// Application Name
	ApplicationName string `json:"applicationName,omitempty"`
	// Date of rule creation.
	CreatedAt *nrtime.EpochMilliseconds `json:"createdAt,omitempty"`
	// Is rule enabled?
	Enabled bool `json:"enabled"`
	// Rule evaluation order
	EvalOrder int `json:"evalOrder,omitempty"`
	// Rule Id
	ID int `json:"id"`
	// Metric Match Expression.
	MatchExpression string `json:"matchExpression"`
	// Notes.
	Notes string `json:"notes,omitempty"`
	// Metric Replacement Expression.
	Replacement string `json:"replacement,omitempty"`
	// Whether it terminates the evaluation chain or not
	TerminateChain bool `json:"terminateChain,omitempty"`
}

// MetricNormalizationRuleMetricGroupingIssue - An object that represents a metric grouping issue.
type MetricNormalizationRuleMetricGroupingIssue struct {
	// Total number of received and denied new metrics.
	DeniedMetricsCount int `json:"deniedMetricsCount,omitempty"`
	// Rate of received and denied new metrics per minute.
	DeniedMetricsRatePerMinute float64 `json:"deniedMetricsRatePerMinute,omitempty"`
	// Metric normalization rule id
	MetricNormalizationRuleId int `json:"metricNormalizationRuleId"`
	// Whether the issue is mitigated or still active
	Mitigated bool `json:"mitigated,omitempty"`
	// The new metrics rate threshold to consider the issue mitigated.
	MitigationRateThreshold float64 `json:"mitigationRateThreshold,omitempty"`
	// The minute time window to calculate if the issue was mitigated.
	MitigationRateWindowSize int `json:"mitigationRateWindowSize,omitempty"`
}

// MobileAppSummaryData - Mobile application summary data
type MobileAppSummaryData struct {
	// The number of times the app has been launched.
	AppLaunchCount int `json:"appLaunchCount,omitempty"`
	// The number of crashes.
	CrashCount int `json:"crashCount,omitempty"`
	// Crash rate is percentage of crashes per sessions.
	CrashRate float64 `json:"crashRate,omitempty"`
	// Error rate is the percentage of http errors per successful requests.
	HttpErrorRate float64 `json:"httpErrorRate,omitempty"`
	// The number of http requests.
	HttpRequestCount int `json:"httpRequestCount,omitempty"`
	// The rate of http requests per minute.
	HttpRequestRate float64 `json:"httpRequestRate,omitempty"`
	// The average response time for all http calls.
	HttpResponseTimeAverage nrtime.Seconds `json:"httpResponseTimeAverage,omitempty"`
	// The number of mobile sessions.
	MobileSessionCount int `json:"mobileSessionCount,omitempty"`
	// Network failure rate is the percentage of network failures per successful requests.
	NetworkFailureRate float64 `json:"networkFailureRate,omitempty"`
	// The number of users affected by crashes.
	UsersAffectedCount int `json:"usersAffectedCount,omitempty"`
}

// MobileApplicationEntity - A Mobile Application entity.
type MobileApplicationEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// The ID of the Mobile App.
	ApplicationID int `json:"applicationId,omitempty"`
	// A Crash that occurred in your Mobile Application.
	Crash StackTraceMobileCrash `json:"crash,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// A Handled Exception that occurred in your Mobile Application.
	Exception StackTraceMobileException `json:"exception,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Retrieves the entity metric grouping issues.
	MetricGroupingIssues []MetricNormalizationRuleMetricGroupingIssue `json:"metricGroupingIssues"`
	// Retrieves a rule.
	MetricNormalizationRule MetricNormalizationRule `json:"metricNormalizationRule,omitempty"`
	// Retrieves the rules for the application.
	MetricNormalizationRules []MetricNormalizationRule `json:"metricNormalizationRules"`
	// Access general properties for the application.
	MobileProperties AgentApplicationSettingsMobileProperties `json:"mobileProperties,omitempty"`
	// Settings that are common across mobile applications.
	MobileSettings AgentApplicationSettingsMobileBase `json:"mobileSettings,omitempty"`
	// Summary statistics about the Mobile App.
	MobileSummary MobileAppSummaryData `json:"mobileSummary,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *MobileApplicationEntity) ImplementsAlertableEntity() {}

func (x *MobileApplicationEntity) ImplementsEntity() {}

// MobileApplicationEntityOutline - A Mobile Application entity outline.
type MobileApplicationEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The ID of the Mobile App.
	ApplicationID int `json:"applicationId,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Summary statistics about the Mobile App.
	MobileSummary MobileAppSummaryData `json:"mobileSummary,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *MobileApplicationEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *MobileApplicationEntityOutline) ImplementsEntityOutline() {}

// NRDBMetadata - An object containing metadata about the query and result.
type NRDBMetadata struct {
	// A list of the event types that were queried.
	EventTypes []string `json:"eventTypes,omitempty"`
	// A list of facets that were queried.
	Facets []string `json:"facets,omitempty"`
	// Messages from NRDB included with the result.
	Messages []string `json:"messages,omitempty"`
	// Details about the query time window.
	TimeWindow NRDBMetadataTimeWindow `json:"timeWindow,omitempty"`
}

// NRDBMetadataTimeWindow - An object representing details about a query's time window.
type NRDBMetadataTimeWindow struct {
	// Timestamp marking the query begin time.
	Begin *nrtime.EpochMilliseconds `json:"begin,omitempty"`
	// A clause representing the comparison time window.
	CompareWith string `json:"compareWith,omitempty"`
	// Timestamp marking the query end time.
	End *nrtime.EpochMilliseconds `json:"end,omitempty"`
	// SINCE clause resulting from the query
	Since string `json:"since,omitempty"`
	// UNTIL clause resulting from the query
	Until string `json:"until,omitempty"`
}

// NRDBQueryProgress - An object containing metadata about the execution of an asynchronous NRQL query.
type NRDBQueryProgress struct {
	// Whether the query has finished executing.
	Completed bool `json:"completed,omitempty"`
	// A token for retrieving the results of a previously executed asynchronous query.
	QueryId string `json:"queryId,omitempty"`
	// Results of the completed query will expire permanently after this long.
	ResultExpiration nrtime.Seconds `json:"resultExpiration,omitempty"`
	// Wait at least this long before querying for completed results with the `queryId`.
	RetryAfter nrtime.Seconds `json:"retryAfter,omitempty"`
	// The server may cancel the NRDB query after this long if no GraphQL queries have been made to check the `queryId`'s status.
	RetryDeadline nrtime.Seconds `json:"retryDeadline,omitempty"`
}

// NRDBResultContainer - A data structure that contains the results of the NRDB query along
// with other capabilities that enhance those results.
//
// Direct query results are available through `results`, `totalResult` and
// `otherResult`. The query you made is accessible through `nrql`, along with
// `metadata` about the query itself. Enhanced capabilities include
// `eventDefinitions`, `suggestedFacets` and more.
type NRDBResultContainer struct {
	// In a `COMPARE WITH` query, the `currentResults` contain the results for the current comparison time window.
	CurrentResults []NRDBResult `json:"currentResults,omitempty"`
	// Generate a publicly sharable Embedded Chart URL for the NRQL query.
	//
	// For more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/query-nrql-through-new-relic-graphql-api#embeddable-charts).
	EmbeddedChartURL string `json:"embeddedChartUrl,omitempty"`
	// Retrieve a list of event type definitions, providing descriptions
	// of the event types returned by this query, as well as details
	// of their attributes.
	EventDefinitions []EventDefinition `json:"eventDefinitions,omitempty"`
	// Metadata about the query and result.
	Metadata NRDBMetadata `json:"metadata,omitempty"`
	// The [NRQL](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) query that was executed to yield these results.
	NRQL nrdb.NRQL `json:"nrql,omitempty"`
	// In a `FACET` query, the `otherResult` contains the aggregates representing the events _not_
	// contained in an individual `results` facet.
	OtherResult NRDBResult `json:"otherResult,omitempty"`
	// In a `COMPARE WITH` query, the `previousResults` contain the results for the previous comparison time window.
	PreviousResults []NRDBResult `json:"previousResults,omitempty"`
	// Metadata about the execution of an asynchronous NRQL query.
	QueryProgress NRDBQueryProgress `json:"queryProgress,omitempty"`
	// The raw query results exactly as they are returned from NRDB. NerdGraph provides no additional transformation.
	RawResponse NRDBRawResults `json:"rawResponse,omitempty"`
	// The query results. This is a flat list of objects who's structure matches the query submitted.
	Results []NRDBResult `json:"results,omitempty"`
	// Generate a publicly sharable static chart URL for the NRQL query.
	StaticChartURL string `json:"staticChartUrl,omitempty"`
	// Retrieve a list of suggested NRQL facets for this NRDB query, to be used with
	// the `FACET` keyword in NRQL.
	//
	// Results are based on historical query behaviors.
	//
	// If the query already has a `FACET` clause, it will be ignored for the purposes
	// of suggesting facets.
	//
	// For more details, see [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/nerdgraph-graphiql-nrql-tutorial#suggest-facets).
	SuggestedFacets []NRQLFacetSuggestion `json:"suggestedFacets,omitempty"`
	// Suggested queries that could help explain an anomaly in your timeseries based on either statistical differences in the data or historical usage.
	//
	// If no `anomalyTimeWindow` is supplied, we will attempt to detect a spike in the NRQL results. If no spike is found, the suggested query results will be empty.
	//
	// Input NRQL must be a TIMESERIES query and must have exactly one result.
	SuggestedQueries SuggestedNRQLQueryResponse `json:"suggestedQueries,omitempty"`
	// In a `FACET` query, the `totalResult` contains the aggregates representing _all_ the events,
	// whether or not they are contained in an individual `results` facet.
	TotalResult NRDBResult `json:"totalResult,omitempty"`
}

// NRQLFacetSuggestion - A suggested NRQL facet. Facet suggestions may be either a single attribute, or
// a list of attributes in the case of multi-attribute facet suggestions.
type NRQLFacetSuggestion struct {
	// A list of attribute names comprising the suggested facet.
	//
	// Raw attribute names will be returned here. Attribute names may need to be
	// backtick-quoted before inclusion in a NRQL query.
	Attributes []string `json:"attributes,omitempty"`
	// A modified version of the input NRQL, with a `FACET ...` clause appended.
	// If the original NRQL had a `FACET` clause already, it will be replaced.
	NRQL nrdb.NRQL `json:"nrql,omitempty"`
}

// NRQLQueryOptions - Additional options for NRQL queries.
type NRQLQueryOptions struct {
	// Limit the NRQL query to return results from the chosen Event Namespaces.
	//
	// You must supply at least 1 valid event namespace when using this option.
	// Invalid event namespaces will be filtered out.
	//
	// If omitted, the default list will be `["Default"]`
	//
	// For more details about Event Namespaces, visit our [docs](https://docs.newrelic.com/docs/accounts/original-accounts-billing/original-product-based-pricing/introduction-new-relic-subscription-usage-data/#namespace).
	EventNamespaces []string `json:"eventNamespaces"`
}

type NerdStorageCollectionMember struct {
	// The NerdStorage document.
	Document NerdStorageDocument `json:"document,omitempty"`
	// The documentId.
	ID string `json:"id,omitempty"`
}

type NerdStorageEntityScope struct {
	Collection []NerdStorageCollectionMember `json:"collection,omitempty"`
	Document   NerdStorageDocument           `json:"document,omitempty"`
}

// SecureCredentialEntity - A secure credential entity.
type SecureCredentialEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The description of the entity.
	Description string `json:"description,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The domain-specific identifier for the entity.
	SecureCredentialId string `json:"secureCredentialId,omitempty"`
	// Summary statistics for the Synthetic Monitor Secure Credential.
	SecureCredentialSummary SecureCredentialSummaryData `json:"secureCredentialSummary,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt *nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
}

func (x *SecureCredentialEntity) ImplementsAlertableEntity() {}

func (x *SecureCredentialEntity) ImplementsEntity() {}

// SecureCredentialEntityOutline - A secure credential entity outline.
type SecureCredentialEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The description of the entity.
	Description string `json:"description,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The domain-specific identifier for the entity.
	SecureCredentialId string `json:"secureCredentialId,omitempty"`
	// Summary statistics for the Synthetic Monitor Secure Credential.
	SecureCredentialSummary SecureCredentialSummaryData `json:"secureCredentialSummary,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// The time at which the entity was last updated.
	UpdatedAt *nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
}

func (x *SecureCredentialEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *SecureCredentialEntityOutline) ImplementsEntityOutline() {}

// SecureCredentialSummaryData - Summary statistics for the Synthetic Monitor Secure Credential.
type SecureCredentialSummaryData struct {
	// The number of monitors that contain this secure credential and failed their last check.
	FailingMonitorCount int `json:"failingMonitorCount,omitempty"`
	// The number of monitors that contain this secure credential.
	MonitorCount int `json:"monitorCount,omitempty"`
}

// ServiceLevelDefinition - The service level defined for a specific entity.
type ServiceLevelDefinition struct {
	// The SLIs attached to the entity.
	Indicators []ServiceLevelIndicator `json:"indicators"`
}

// ServiceLevelEvents - The events that define the SLI.
type ServiceLevelEvents struct {
	// The New Relic account to fetch the events from.
	Account AccountReference `json:"account,omitempty"`
	// The definition of bad events.
	BadEvents ServiceLevelEventsQuery `json:"badEvents,omitempty"`
	// The definition of good events.
	GoodEvents ServiceLevelEventsQuery `json:"goodEvents,omitempty"`
	// The definition of valid events.
	ValidEvents ServiceLevelEventsQuery `json:"validEvents"`
}

// ServiceLevelEventsQuery - The query that represents the events to fetch.
type ServiceLevelEventsQuery struct {
	// The NRDB event to fetch the data from.
	From nrdb.NRQL `json:"from"`
	// The NRQL SELECT clause to aggregate events.
	Select ServiceLevelEventsQuerySelect `json:"select,omitempty"`
	// The NRQL condition to filter the events.
	Where nrdb.NRQL `json:"where,omitempty"`
}

// ServiceLevelEventsQuerySelect - The resulting NRQL SELECT clause to aggregate events.
type ServiceLevelEventsQuerySelect struct {
	// The attribute used in the selected function.
	Attribute string `json:"attribute,omitempty"`
	// The function to use in the SELECT clause.
	Function ServiceLevelEventsQuerySelectFunction `json:"function"`
	// The threshold used in the selected function.
	Threshold float64 `json:"threshold,omitempty"`
}

// ServiceLevelIndicator - The definition of the SLI.
type ServiceLevelIndicator struct {
	// The date when the SLI was created represented in the number of milliseconds since the Unix epoch.
	CreatedAt *nrtime.EpochMilliseconds `json:"createdAt"`
	// The user who created the SLI.
	CreatedBy UserReference `json:"createdBy,omitempty"`
	// The description of the SLI.
	Description string `json:"description,omitempty"`
	// The entity which the SLI is attached to.
	EntityGUID EntityGUID `json:"entityGuid"`
	// The events that define the SLI.
	Events ServiceLevelEvents `json:"events"`
	// The unique entity identifier of the SLI.
	GUID EntityGUID `json:"guid"`
	// The unique identifier of the SLI.
	ID string `json:"id"`
	// The name of the SLI.
	Name string `json:"name"`
	// A list of objective definitions.
	Objectives []ServiceLevelObjective `json:"objectives"`
	// The resulting NRQL queries that help consume the metrics of the SLI.
	ResultQueries ServiceLevelIndicatorResultQueries `json:"resultQueries,omitempty"`
	// [DEPRECATED] The slug is deprecated and it will be removed from the schema as soon as possible.
	Slug string `json:"slug"`
	// The date when the SLI was last updated represented in the number of milliseconds since the Unix epoch.
	UpdatedAt *nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
	// The user who last update the SLI.
	UpdatedBy UserReference `json:"updatedBy,omitempty"`
}

// ServiceLevelIndicatorResultQueries - The resulting NRQL queries that help consume the metrics of the SLI.
type ServiceLevelIndicatorResultQueries struct {
	// The NRQL query that measures the good events.
	GoodEvents ServiceLevelResultQuery `json:"goodEvents"`
	// The NRQL query that measures the value of the SLI.
	Indicator ServiceLevelResultQuery `json:"indicator"`
	// The NRQL query that measures the valid events.
	ValidEvents ServiceLevelResultQuery `json:"validEvents"`
}

// ServiceLevelObjective - An objective definition.
type ServiceLevelObjective struct {
	// The description of the SLO.
	Description string `json:"description,omitempty"`
	// The name of the SLO.
	Name string `json:"name,omitempty"`
	// The resulting NRQL queries that help consume the metrics of the SLO.
	ResultQueries ServiceLevelObjectiveResultQueries `json:"resultQueries,omitempty"`
	// The target percentage of the SLO.
	Target float64 `json:"target"`
	// The time window configuration of the SLO.
	TimeWindow ServiceLevelObjectiveTimeWindow `json:"timeWindow"`
}

// ServiceLevelObjectiveResultQueries - The resulting NRQL queries that help consume the metrics of the SLO.
type ServiceLevelObjectiveResultQueries struct {
	// The NRQL query that measures the attainment of the SLO target.
	Attainment ServiceLevelResultQuery `json:"attainment"`
}

// ServiceLevelObjectiveRollingTimeWindow - The rolling time window configuration of the SLO.
type ServiceLevelObjectiveRollingTimeWindow struct {
	// The count of time units.
	Count int `json:"count"`
	// The time unit.
	Unit ServiceLevelObjectiveRollingTimeWindowUnit `json:"unit"`
}

// ServiceLevelObjectiveTimeWindow - The time window configuration of the SLO.
type ServiceLevelObjectiveTimeWindow struct {
	// The rolling time window configuration of the SLO.
	Rolling ServiceLevelObjectiveRollingTimeWindow `json:"rolling,omitempty"`
}

// ServiceLevelResultQuery - A resulting query.
type ServiceLevelResultQuery struct {
	// A NRQL query.
	NRQL nrdb.NRQL `json:"nrql"`
}

// StackTraceApmException - A structured representation of an exception for an APM application.
type StackTraceApmException struct {
	// The top level message associated with the exception.
	Message string `json:"message,omitempty"`
	// The stack trace associated with the exception.
	StackTrace StackTraceApmStackTrace `json:"stackTrace,omitempty"`
}

// StackTraceApmStackTrace - A structured representation of a stack trace for an APM application.
type StackTraceApmStackTrace struct {
	// Stack trace frames.
	Frames []StackTraceApmStackTraceFrame `json:"frames,omitempty"`
}

// StackTraceApmStackTraceFrame - An object representing a stack trace segment
type StackTraceApmStackTraceFrame struct {
	// Frame filepath
	Filepath string `json:"filepath,omitempty"`
	// Formatted frame
	Formatted string `json:"formatted"`
	// Frame line number
	Line int `json:"line,omitempty"`
	// Frame name
	Name string `json:"name,omitempty"`
}

// StackTraceBrowserException - A structured representation of an exception for a Browser application.
type StackTraceBrowserException struct {
	// The top level message associated to the stack trace.
	Message string `json:"message,omitempty"`
	// The stack trace associated with the exception.
	StackTrace StackTraceBrowserStackTrace `json:"stackTrace,omitempty"`
}

// StackTraceBrowserStackTrace - A structured representation of a stack trace for a Browser application.
type StackTraceBrowserStackTrace struct {
	// Stack trace frames.
	Frames []StackTraceBrowserStackTraceFrame `json:"frames,omitempty"`
}

// StackTraceBrowserStackTraceFrame - An object representing a stack trace segment
type StackTraceBrowserStackTraceFrame struct {
	// Frame column number
	Column int `json:"column,omitempty"`
	// Formatted frame
	Formatted string `json:"formatted"`
	// Frame line number
	Line int `json:"line,omitempty"`
	// Frame name
	Name string `json:"name,omitempty"`
}

// StackTraceMobileCrash - A structured representation of a crash occurring in a mobile application.
type StackTraceMobileCrash struct {
	// A structured representation of a stack trace for a crash that occurs on a mobile application.
	StackTrace StackTraceMobileCrashStackTrace `json:"stackTrace,omitempty"`
}

// StackTraceMobileCrashStackTrace - A structured representation of a stack trace of a crash in a mobile application.
type StackTraceMobileCrashStackTrace struct {
	// Stack trace frames.
	Frames []StackTraceMobileCrashStackTraceFrame `json:"frames,omitempty"`
}

// StackTraceMobileCrashStackTraceFrame - An object representing a stack trace segment
type StackTraceMobileCrashStackTraceFrame struct {
	// Frame filepath
	Filepath string `json:"filepath,omitempty"`
	// Formatted frame
	Formatted string `json:"formatted"`
	// Frame line number
	Line int `json:"line,omitempty"`
	// Frame name
	Name string `json:"name,omitempty"`
}

// StackTraceMobileException - A structured representation of a handled exception occurring in a mobile application.
type StackTraceMobileException struct {
	// A structured representation of a handled exception in a mobile application.
	StackTrace StackTraceMobileExceptionStackTrace `json:"stackTrace,omitempty"`
}

// StackTraceMobileExceptionStackTrace - A structured representation of a handled exception in a mobile application.
type StackTraceMobileExceptionStackTrace struct {
	// Stack trace frames.
	Frames []StackTraceMobileExceptionStackTraceFrame `json:"frames,omitempty"`
}

// StackTraceMobileExceptionStackTraceFrame - An object representing a stack trace segment
type StackTraceMobileExceptionStackTraceFrame struct {
	// Frame filepath
	Filepath string `json:"filepath,omitempty"`
	// Formatted frame
	Formatted string `json:"formatted"`
	// Frame line number
	Line int `json:"line,omitempty"`
	// Frame name
	Name string `json:"name,omitempty"`
}

// SuggestedAnomalyBasedNRQLQuery - A query suggestion based on analysis of events within a specific anomalous time
// range vs. nearby events outside of that time range.
type SuggestedAnomalyBasedNRQLQuery struct {
	// Information about the anomaly upon which this suggestion is based
	Anomaly SuggestedNRQLQueryAnomaly `json:"anomaly"`
	// The NRQL string to run for the suggested query
	NRQL string `json:"nrql"`
	// A human-readable title describing what the query shows
	Title string `json:"title"`
}

func (x *SuggestedAnomalyBasedNRQLQuery) ImplementsSuggestedNRQLQuery() {}

// SuggestedHistoryBasedNRQLQuery - A query suggestion based on historical query patterns.
type SuggestedHistoryBasedNRQLQuery struct {
	// The NRQL string to run for the suggested query
	NRQL string `json:"nrql"`
	// A human-readable title describing what the query shows
	Title string `json:"title"`
}

func (x *SuggestedHistoryBasedNRQLQuery) ImplementsSuggestedNRQLQuery() {}

// SuggestedNRQLQuery - Interface type representing a query suggestion.
type SuggestedNRQLQuery struct {
	// The NRQL string to run for the suggested query
	NRQL string `json:"nrql"`
	// A human-readable title describing what the query shows
	Title string `json:"title"`
}

func (x *SuggestedNRQLQuery) ImplementsSuggestedNRQLQuery() {}

// SuggestedNRQLQueryAnomaly - Information about the anomaly upon which this analysis was based.
type SuggestedNRQLQueryAnomaly struct {
	// The approximate time window of the anomalous region
	TimeWindow TimeWindow `json:"timeWindow"`
}

// SuggestedNRQLQueryResponse - A result type encapsulating suggested queries
type SuggestedNRQLQueryResponse struct {
	// List of suggested queries.
	Suggestions []SuggestedNRQLQueryInterface `json:"suggestions"`
}

// special
func (x *SuggestedNRQLQueryResponse) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "suggestions":
			if v == nil {
				continue
			}
			var rawMessageSuggestions []*json.RawMessage
			err = json.Unmarshal(*v, &rawMessageSuggestions)
			if err != nil {
				return err
			}

			for _, m := range rawMessageSuggestions {
				xxx, err := UnmarshalSuggestedNRQLQueryInterface(*m)
				if err != nil {
					return err
				}

				if xxx != nil {
					x.Suggestions = append(x.Suggestions, *xxx)
				}
			}
		}
	}

	return nil
}

// SyntheticMonitorEntity - A Synthetic Monitor entity.
type SyntheticMonitorEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Assets produced during the execution of the check, such as screenshots
	Assets []SyntheticsSyntheticMonitorAsset `json:"assets,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The Synthetic Monitor ID
	MonitorId string `json:"monitorId,omitempty"`
	// Summary statistics for the Synthetic Monitor.
	MonitorSummary SyntheticMonitorSummaryData `json:"monitorSummary,omitempty"`
	// The Synthetic Monitor type
	MonitorType SyntheticMonitorType `json:"monitorType,omitempty"`
	// The URL being monitored by a `SIMPLE` or `BROWSER` monitor type.
	MonitoredURL string `json:"monitoredUrl,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The duration in minutes between Synthetic Monitor runs.
	Period nrtime.Minutes `json:"period,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *SyntheticMonitorEntity) ImplementsAlertableEntity() {}

func (x *SyntheticMonitorEntity) ImplementsEntity() {}

// SyntheticMonitorEntityOutline - A Synthetic Monitor entity outline.
type SyntheticMonitorEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The Synthetic Monitor ID
	MonitorId string `json:"monitorId,omitempty"`
	// Summary statistics for the Synthetic Monitor.
	MonitorSummary SyntheticMonitorSummaryData `json:"monitorSummary,omitempty"`
	// The Synthetic Monitor type
	MonitorType SyntheticMonitorType `json:"monitorType,omitempty"`
	// The URL being monitored by a `SIMPLE` or `BROWSER` monitor type.
	MonitoredURL string `json:"monitoredUrl,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The duration in minutes between Synthetic Monitor runs.
	Period nrtime.Minutes `json:"period,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *SyntheticMonitorEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *SyntheticMonitorEntityOutline) ImplementsEntityOutline() {}

// SyntheticMonitorSummaryData - Summary statistics for the Synthetic Monitor.
type SyntheticMonitorSummaryData struct {
	// The number of locations that are currently failing.
	LocationsFailing int `json:"locationsFailing,omitempty"`
	// The number of locations that are currently running.
	LocationsRunning int                    `json:"locationsRunning,omitempty"`
	Status           SyntheticMonitorStatus `json:"status,omitempty"`
	// The percentage of successful synthetic monitor checks in the last 24 hours.
	SuccessRate float64 `json:"successRate,omitempty"`
}

// SyntheticsSyntheticMonitorAsset - Asset produced during the execution of the check
type SyntheticsSyntheticMonitorAsset struct {
	// MIME type of asset
	Type string `json:"type,omitempty"`
	// Temporary url at which the asset is available for download
	URL string `json:"url,omitempty"`
}

// TeamEntity - A Team entity.
type TeamEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	Collection      EntityCollection       `json:"collection,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *TeamEntity) ImplementsAlertableEntity() {}

func (x *TeamEntity) ImplementsCollectionEntity() {}

func (x *TeamEntity) ImplementsEntity() {}

// TeamEntityOutline - A Team entity outline.
type TeamEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *TeamEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *TeamEntityOutline) ImplementsEntityOutline() {}

// ThirdPartyServiceEntity - A third party service entity.
type ThirdPartyServiceEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *ThirdPartyServiceEntity) ImplementsAlertableEntity() {}

func (x *ThirdPartyServiceEntity) ImplementsEntity() {}

// ThirdPartyServiceEntityOutline - A third party service entity outline.
type ThirdPartyServiceEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *ThirdPartyServiceEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *ThirdPartyServiceEntityOutline) ImplementsEntityOutline() {}

// TimeWindow - Represents a time window.
type TimeWindow struct {
	// The end time of the time window the number of milliseconds since the Unix epoch.
	EndTime *nrtime.EpochMilliseconds `json:"endTime,omitempty"`
	// The start time of the time window the number of milliseconds since the Unix epoch.
	StartTime *nrtime.EpochMilliseconds `json:"startTime,omitempty"`
}

// TimeWindowInput - Represents a time window input.
type TimeWindowInput struct {
	// The end time of the time window the number of milliseconds since the Unix epoch.
	EndTime *nrtime.EpochMilliseconds `json:"endTime"`
	// The start time of the time window the number of milliseconds since the Unix epoch.
	StartTime *nrtime.EpochMilliseconds `json:"startTime"`
}

// UnavailableEntity - An entity that is unavailable.
type UnavailableEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *UnavailableEntity) ImplementsAlertableEntity() {}

func (x *UnavailableEntity) ImplementsEntity() {}

// UnavailableEntityOutline - An entity outline that is unavailable.
type UnavailableEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
}

func (x *UnavailableEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *UnavailableEntityOutline) ImplementsEntityOutline() {}

// UserReference - The `UserReference` object provides basic identifying information about the user.
type UserReference struct {
	Email    string `json:"email,omitempty"`
	Gravatar string `json:"gravatar,omitempty"`
	ID       int    `json:"id,omitempty"`
	Name     string `json:"name,omitempty"`
}

// WorkloadEntity - A workload entity.
type WorkloadEntity struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// Violations on the entity that were open during the specified time window. This will return up to 500 violations - if there are more in the time window selected, you must narrow the time window or look at fewer entities.
	AlertViolations []EntityAlertViolation `json:"alertViolations,omitempty"`
	Collection      EntityCollection       `json:"collection,omitempty"`
	// When the workload was created.
	CreatedAt *nrtime.EpochMilliseconds `json:"createdAt,omitempty"`
	// The user that created the workload.
	CreatedByUser UserReference `json:"createdByUser,omitempty"`
	// Retrieve the deployment event(s). Ordered by timestamp DESC.
	DeploymentSearch ChangeTrackingDeploymentSearchResult `json:"deploymentSearch,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// Make an `Entity` scoped query to NRDB with a NRQL string.
	//
	// A relevant `WHERE` clause will be added to your query to scope data to the entity in question.
	//
	// See the [NRQL Docs](https://docs.newrelic.com/docs/insights/nrql-new-relic-query-language/nrql-resources/nrql-syntax-components-functions) for more information about generating a query string.
	NRDBQuery NRDBResultContainer `json:"nrdbQuery,omitempty"`
	// Poll for the results of a previously-executed asychronous NRDB query.
	//
	// The `queryId` is available in the `queryProgress` data returned by the original asynchronous query.
	//
	// See [this page](https://docs.newrelic.com/docs/apis/nerdgraph/examples/async-queries-nrql-tutorial) for additional asynchronous query documentation.
	NRDBQueryProgress NRDBResultContainer `json:"nrdbQueryProgress,omitempty"`
	// The name of this entity.
	Name        string                 `json:"name,omitempty"`
	NerdStorage NerdStorageEntityScope `json:"nerdStorage,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// Recent violations on the entity.
	RecentAlertViolations []EntityAlertViolation `json:"recentAlertViolations,omitempty"`
	// Related entities result with optional filtering.
	RelatedEntities EntityRelationshipRelatedEntitiesResult `json:"relatedEntities,omitempty"`
	// A list of the entities' relationships.
	//
	// For more information, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-relationships-api-tutorial).
	Relationships []EntityRelationship `json:"relationships,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The tags applied to the entity with their metadata.
	TagsWithMetadata []EntityTagWithMetadata `json:"tagsWithMetadata,omitempty"`
	// Look up Distributed Tracing summary data for the selected `EntityGuid`
	TracingSummary DistributedTracingEntityTracingSummary `json:"tracingSummary,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// When the workload was last updated.
	UpdatedAt *nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
	// Status of the workload.
	WorkloadStatus WorkloadStatus `json:"workloadStatus,omitempty"`
}

func (x *WorkloadEntity) ImplementsAlertableEntity() {}

func (x *WorkloadEntity) ImplementsCollectionEntity() {}

func (x *WorkloadEntity) ImplementsEntity() {}

// WorkloadEntityOutline - A workload entity outline.
type WorkloadEntityOutline struct {
	Account AccountOutline `json:"account,omitempty"`
	// The New Relic account ID associated with this entity.
	AccountID int `json:"accountId,omitempty"`
	// The current alerting severity of the entity.
	AlertSeverity EntityAlertSeverity `json:"alertSeverity,omitempty"`
	// When the workload was created.
	CreatedAt *nrtime.EpochMilliseconds `json:"createdAt,omitempty"`
	// The user that created the workload.
	CreatedByUser UserReference `json:"createdByUser,omitempty"`
	// The entity's domain
	Domain string `json:"domain,omitempty"`
	// A value representing the combination of the entity's domain and type.
	EntityType EntityType `json:"entityType,omitempty"`
	// The date of last time the entity has updated any of its fields.
	FirstIndexedAt *nrtime.EpochMilliseconds `json:"firstIndexedAt,omitempty"`
	// A unique entity identifier.
	GUID EntityGUID `json:"guid,omitempty"`
	// The list of golden metrics for a specific entity
	GoldenMetrics EntityGoldenContextScopedGoldenMetrics `json:"goldenMetrics,omitempty"`
	// The list of golden tags for a specific entityType.
	GoldenTags EntityGoldenContextScopedGoldenTags `json:"goldenTags,omitempty"`
	// The time the entity was indexed.
	IndexedAt *nrtime.EpochMilliseconds `json:"indexedAt,omitempty"`
	// The last time the entity's reporting status changed.
	LastReportingChangeAt *nrtime.EpochMilliseconds `json:"lastReportingChangeAt,omitempty"`
	// The name of this entity.
	Name string `json:"name,omitempty"`
	// The url to the entity.
	Permalink string `json:"permalink,omitempty"`
	// The reporting status of the entity. If New Relic is successfully collecting data from your application, this will be true.
	Reporting bool `json:"reporting,omitempty"`
	// The service level defined for the entity.
	ServiceLevel ServiceLevelDefinition `json:"serviceLevel,omitempty"`
	// The tags applied to the entity.
	//
	// For details on tags, as well as query and mutation examples, visit [our docs](https://docs.newrelic.com/docs/apis/graphql-api/tutorials/graphql-tagging-api-tutorial).
	Tags []EntityTag `json:"tags,omitempty"`
	// The entity's type
	Type string `json:"type,omitempty"`
	// When the workload was last updated.
	UpdatedAt *nrtime.EpochMilliseconds `json:"updatedAt,omitempty"`
	// Status of the workload.
	WorkloadStatus WorkloadStatus `json:"workloadStatus,omitempty"`
}

func (x *WorkloadEntityOutline) ImplementsAlertableEntityOutline() {}

func (x *WorkloadEntityOutline) ImplementsEntityOutline() {}

// WorkloadStatus - Detailed information about the status of a workload.
type WorkloadStatus struct {
	// A description that provides additional details about the status of the workload.
	Description string `json:"description,omitempty"`
	// Indicates where the status value derives from.
	StatusSource WorkloadStatusSource `json:"statusSource,omitempty"`
	// The status of the workload.
	StatusValue WorkloadStatusValue `json:"statusValue,omitempty"`
	// A short description of the status of the workload.
	Summary string `json:"summary,omitempty"`
}

type entityResponse struct {
	Actor Actor `json:"actor"`
}

type entitySearchResponse struct {
	Actor Actor `json:"actor"`
}

// AgentApplicationSettingsCustomJsConfiguration - A stringified JSON list of rules to mask or unmask specific components or views. These rules override other masking settings and requires values in stringified JSON format, such as: ```[{\"type\":\"mask\",\"operator\":\"equals\",\"name\":\"PrivateContent\",\"identifier\":\"PrivateContent709\"}]```. Each rule object must include the following attributes:
//
// | Attribute  | Type            | Required | Values                  | Description                           |
// |------------|-----------------|----------|-------------------------|---------------------------------------|
// | type       | String          | Yes      | "mask" or "unmask"      | Defines the masking operation type    |
// | operator   | String          | Yes      | "equals" or "contains"  | Defines the matching operation        |
// | name       | Array<String>   | Yes      | Array of strings        | List of element names to target       |
// | identifier | String          | Yes      | Any string              | Unique identifier for the rule        |
//
// These components define how custom masking rules should be structured for effective configuration.
type AgentApplicationSettingsCustomJsConfiguration string

// AgentApplicationSettingsErrorCollectorHttpStatus - A list of HTTP status codes, such as "404" or "500."
type AgentApplicationSettingsErrorCollectorHttpStatus string

// AgentApplicationSettingsRawJsConfiguration - The "raw" configuration values for configuring the javascript client.
type AgentApplicationSettingsRawJsConfiguration string

// AttributeMap - This scalar represents a map of attributes in the form of key-value pairs.
type AttributeMap string

// DashboardWidgetRawConfiguration - Raw JSON payload with full configuration of a widget.
type DashboardWidgetRawConfiguration string

// EntityAlertViolationInt - The `ViolationInt` scalar type represents 52-bit signed integers
type EntityAlertViolationInt string

// EntityGUID - An encoded Entity GUID
type EntityGUID string

// Float - The `Float` scalar type represents signed double-precision fractional
// values as specified by
// [IEEE 754](https://en.wikipedia.org/wiki/IEEE_754).
type Float string

// NRDBRawResults - This scalar represents the raw nrql query results as returned from NRDB. It is a `Map` of `String` keys to values.
//
// The shape of these objects reflect the query used to generate them, the contents
// of the objects is not part of the GraphQL schema.
type NRDBRawResults string

// NRDBResult - This scalar represents a NRDB Result. It is a `Map` of `String` keys to values.
//
// The shape of these objects reflect the query used to generate them, the contents
// of the objects is not part of the GraphQL schema.
type NRDBResult string

// NerdStorageDocument - This scalar represents a NerdStorage document.
type NerdStorageDocument string

// SecureValue - The `SecureValue` scalar represents a secure value, ie a password, an API key, etc.
type SecureValue string

// SemVer - The `SemVer` scalar represents a version designation conforming to the SemVer specification.
type SemVer string
type AlertableEntityInterface interface {
	ImplementsAlertableEntity()
}

// UnmarshalAlertableEntityInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalAlertableEntityInterface(b []byte) (*AlertableEntityInterface, error) {
	var err error

	var rawMessageAlertableEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageAlertableEntity)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageAlertableEntity) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageAlertableEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntity":
			var interfaceType ApmApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "ApmDatabaseInstanceEntity":
			var interfaceType ApmDatabaseInstanceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "ApmExternalServiceEntity":
			var interfaceType ApmExternalServiceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "BrowserApplicationEntity":
			var interfaceType BrowserApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "DashboardEntity":
			var interfaceType DashboardEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "ExternalEntity":
			var interfaceType ExternalEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "GenericEntity":
			var interfaceType GenericEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "GenericInfrastructureEntity":
			var interfaceType GenericInfrastructureEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntity":
			var interfaceType InfrastructureAwsLambdaFunctionEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureHostEntity":
			var interfaceType InfrastructureHostEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "KeyTransactionEntity":
			var interfaceType KeyTransactionEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "MobileApplicationEntity":
			var interfaceType MobileApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "SecureCredentialEntity":
			var interfaceType SecureCredentialEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "SyntheticMonitorEntity":
			var interfaceType SyntheticMonitorEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "TeamEntity":
			var interfaceType TeamEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "ThirdPartyServiceEntity":
			var interfaceType ThirdPartyServiceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "UnavailableEntity":
			var interfaceType UnavailableEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		case "WorkloadEntity":
			var interfaceType WorkloadEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageAlertableEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface AlertableEntity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface AlertableEntity was not matched against all PossibleTypes: %s", typeName)
}

type AlertableEntityOutlineInterface interface {
	ImplementsAlertableEntityOutline()
}

// UnmarshalAlertableEntityOutlineInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalAlertableEntityOutlineInterface(b []byte) (*AlertableEntityOutlineInterface, error) {
	var err error

	var rawMessageAlertableEntityOutline map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageAlertableEntityOutline)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageAlertableEntityOutline) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageAlertableEntityOutline["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntityOutline":
			var interfaceType ApmApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ApmDatabaseInstanceEntityOutline":
			var interfaceType ApmDatabaseInstanceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ApmExternalServiceEntityOutline":
			var interfaceType ApmExternalServiceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "BrowserApplicationEntityOutline":
			var interfaceType BrowserApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "DashboardEntityOutline":
			var interfaceType DashboardEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ExternalEntityOutline":
			var interfaceType ExternalEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "GenericEntityOutline":
			var interfaceType GenericEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "GenericInfrastructureEntityOutline":
			var interfaceType GenericInfrastructureEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntityOutline":
			var interfaceType InfrastructureAwsLambdaFunctionEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureHostEntityOutline":
			var interfaceType InfrastructureHostEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "KeyTransactionEntityOutline":
			var interfaceType KeyTransactionEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "MobileApplicationEntityOutline":
			var interfaceType MobileApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "SecureCredentialEntityOutline":
			var interfaceType SecureCredentialEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "SyntheticMonitorEntityOutline":
			var interfaceType SyntheticMonitorEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "TeamEntityOutline":
			var interfaceType TeamEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ThirdPartyServiceEntityOutline":
			var interfaceType ThirdPartyServiceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "UnavailableEntityOutline":
			var interfaceType UnavailableEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "WorkloadEntityOutline":
			var interfaceType WorkloadEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx AlertableEntityOutlineInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageAlertableEntityOutline {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface AlertableEntityOutline did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface AlertableEntityOutline was not matched against all PossibleTypes: %s", typeName)
}

// ApmBrowserApplicationEntity - The `ApmBrowserApplicationEntity` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntityInterface interface {
	ImplementsApmBrowserApplicationEntity()
}

// UnmarshalApmBrowserApplicationEntityInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalApmBrowserApplicationEntityInterface(b []byte) (*ApmBrowserApplicationEntityInterface, error) {
	var err error

	var rawMessageApmBrowserApplicationEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageApmBrowserApplicationEntity)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageApmBrowserApplicationEntity) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageApmBrowserApplicationEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntity":
			var interfaceType ApmApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx ApmBrowserApplicationEntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageApmBrowserApplicationEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface ApmBrowserApplicationEntity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface ApmBrowserApplicationEntity was not matched against all PossibleTypes: %s", typeName)
}

// ApmBrowserApplicationEntityOutline - The `ApmBrowserApplicationEntityOutline` interface provides detailed information for the Browser App injected by an APM Application.
type ApmBrowserApplicationEntityOutlineInterface interface {
	ImplementsApmBrowserApplicationEntityOutline()
}

// UnmarshalApmBrowserApplicationEntityOutlineInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalApmBrowserApplicationEntityOutlineInterface(b []byte) (*ApmBrowserApplicationEntityOutlineInterface, error) {
	var err error

	var rawMessageApmBrowserApplicationEntityOutline map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageApmBrowserApplicationEntityOutline)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageApmBrowserApplicationEntityOutline) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageApmBrowserApplicationEntityOutline["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntityOutline":
			var interfaceType ApmApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx ApmBrowserApplicationEntityOutlineInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageApmBrowserApplicationEntityOutline {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface ApmBrowserApplicationEntityOutline did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface ApmBrowserApplicationEntityOutline was not matched against all PossibleTypes: %s", typeName)
}

// CollectionEntity - A group of entities defined by entity search queries and specific GUIDs
type CollectionEntityInterface interface {
	ImplementsCollectionEntity()
}

// UnmarshalCollectionEntityInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalCollectionEntityInterface(b []byte) (*CollectionEntityInterface, error) {
	var err error

	var rawMessageCollectionEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageCollectionEntity)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageCollectionEntity) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageCollectionEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "TeamEntity":
			var interfaceType TeamEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CollectionEntityInterface = &interfaceType

			return &xxx, nil
		case "WorkloadEntity":
			var interfaceType WorkloadEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx CollectionEntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageCollectionEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface CollectionEntity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface CollectionEntity was not matched against all PossibleTypes: %s", typeName)
}

// Entity - The `Entity` interface allows fetching detailed entity information for a single entity.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type EntityInterface interface {
	ImplementsEntity()
}

// UnmarshalEntityInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalEntityInterface(b []byte) (*EntityInterface, error) {
	var err error

	var rawMessageEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageEntity)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageEntity) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntity":
			var interfaceType ApmApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "ApmDatabaseInstanceEntity":
			var interfaceType ApmDatabaseInstanceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "ApmExternalServiceEntity":
			var interfaceType ApmExternalServiceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "BrowserApplicationEntity":
			var interfaceType BrowserApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "DashboardEntity":
			var interfaceType DashboardEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "ExternalEntity":
			var interfaceType ExternalEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "GenericEntity":
			var interfaceType GenericEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "GenericInfrastructureEntity":
			var interfaceType GenericInfrastructureEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntity":
			var interfaceType InfrastructureAwsLambdaFunctionEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureHostEntity":
			var interfaceType InfrastructureHostEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "KeyTransactionEntity":
			var interfaceType KeyTransactionEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "MobileApplicationEntity":
			var interfaceType MobileApplicationEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "SecureCredentialEntity":
			var interfaceType SecureCredentialEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "SyntheticMonitorEntity":
			var interfaceType SyntheticMonitorEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "TeamEntity":
			var interfaceType TeamEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "ThirdPartyServiceEntity":
			var interfaceType ThirdPartyServiceEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "UnavailableEntity":
			var interfaceType UnavailableEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		case "WorkloadEntity":
			var interfaceType WorkloadEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface Entity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface Entity was not matched against all PossibleTypes: %s", typeName)
}

// EntityManagementActor - Represents an actor.
type EntityManagementActorInterface interface {
	ImplementsEntityManagementActor()
}

// UnmarshalEntityManagementActorInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalEntityManagementActorInterface(b []byte) (*EntityManagementActorInterface, error) {
	var err error

	var rawMessageEntityManagementActor map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageEntityManagementActor)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageEntityManagementActor) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageEntityManagementActor["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "EntityManagementSystemActor":
			var interfaceType EntityManagementSystemActor
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityManagementActorInterface = &interfaceType

			return &xxx, nil
		case "EntityManagementUserActor":
			var interfaceType EntityManagementUserActor
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityManagementActorInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageEntityManagementActor {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface EntityManagementActor did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface EntityManagementActor was not matched against all PossibleTypes: %s", typeName)
}

// EntityManagementEntity - The Entity interface.
type EntityManagementEntityInterface interface {
	ImplementsEntityManagementEntity()
}

// UnmarshalEntityManagementEntityInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalEntityManagementEntityInterface(b []byte) (*EntityManagementEntityInterface, error) {
	var err error

	var rawMessageEntityManagementEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageEntityManagementEntity)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageEntityManagementEntity) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageEntityManagementEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "EntityManagementPipelineCloudRuleEntity":
			var interfaceType EntityManagementPipelineCloudRuleEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityManagementEntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageEntityManagementEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface EntityManagementEntity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface EntityManagementEntity was not matched against all PossibleTypes: %s", typeName)
}

// EntityOutline - The `EntityOutline` interface object allows fetching basic entity data for many entities at a time.
//
// To understand more about entities and entity types, look at [our docs](https://docs.newrelic.com/docs/what-are-new-relic-entities).
type EntityOutlineInterface interface {
	ImplementsEntityOutline()
}

// UnmarshalEntityOutlineInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalEntityOutlineInterface(b []byte) (*EntityOutlineInterface, error) {
	var err error

	var rawMessageEntityOutline map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageEntityOutline)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageEntityOutline) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageEntityOutline["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "ApmApplicationEntityOutline":
			var interfaceType ApmApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ApmDatabaseInstanceEntityOutline":
			var interfaceType ApmDatabaseInstanceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ApmExternalServiceEntityOutline":
			var interfaceType ApmExternalServiceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "BrowserApplicationEntityOutline":
			var interfaceType BrowserApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "DashboardEntityOutline":
			var interfaceType DashboardEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ExternalEntityOutline":
			var interfaceType ExternalEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "GenericEntityOutline":
			var interfaceType GenericEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "GenericInfrastructureEntityOutline":
			var interfaceType GenericInfrastructureEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntityOutline":
			var interfaceType InfrastructureAwsLambdaFunctionEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureHostEntityOutline":
			var interfaceType InfrastructureHostEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "KeyTransactionEntityOutline":
			var interfaceType KeyTransactionEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "MobileApplicationEntityOutline":
			var interfaceType MobileApplicationEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "SecureCredentialEntityOutline":
			var interfaceType SecureCredentialEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "SyntheticMonitorEntityOutline":
			var interfaceType SyntheticMonitorEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "TeamEntityOutline":
			var interfaceType TeamEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "ThirdPartyServiceEntityOutline":
			var interfaceType ThirdPartyServiceEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "UnavailableEntityOutline":
			var interfaceType UnavailableEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "WorkloadEntityOutline":
			var interfaceType WorkloadEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityOutlineInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageEntityOutline {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface EntityOutline did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface EntityOutline was not matched against all PossibleTypes: %s", typeName)
}

// EntityRelationshipEdge - An entity relationship.
type EntityRelationshipEdgeInterface interface {
	ImplementsEntityRelationshipEdge()
}

// UnmarshalEntityRelationshipEdgeInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalEntityRelationshipEdgeInterface(b []byte) (*EntityRelationshipEdgeInterface, error) {
	var err error

	var rawMessageEntityRelationshipEdge map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageEntityRelationshipEdge)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageEntityRelationshipEdge) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageEntityRelationshipEdge["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "EntityRelationshipDetectedEdge":
			var interfaceType EntityRelationshipDetectedEdge
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityRelationshipEdgeInterface = &interfaceType

			return &xxx, nil
		case "EntityRelationshipUserDefinedEdge":
			var interfaceType EntityRelationshipUserDefinedEdge
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx EntityRelationshipEdgeInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageEntityRelationshipEdge {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface EntityRelationshipEdge did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface EntityRelationshipEdge was not matched against all PossibleTypes: %s", typeName)
}

type InfrastructureIntegrationEntityInterface interface {
	ImplementsInfrastructureIntegrationEntity()
}

// UnmarshalInfrastructureIntegrationEntityInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalInfrastructureIntegrationEntityInterface(b []byte) (*InfrastructureIntegrationEntityInterface, error) {
	var err error

	var rawMessageInfrastructureIntegrationEntity map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageInfrastructureIntegrationEntity)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageInfrastructureIntegrationEntity) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageInfrastructureIntegrationEntity["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "GenericInfrastructureEntity":
			var interfaceType GenericInfrastructureEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx InfrastructureIntegrationEntityInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntity":
			var interfaceType InfrastructureAwsLambdaFunctionEntity
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx InfrastructureIntegrationEntityInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageInfrastructureIntegrationEntity {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface InfrastructureIntegrationEntity did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface InfrastructureIntegrationEntity was not matched against all PossibleTypes: %s", typeName)
}

type InfrastructureIntegrationEntityOutlineInterface interface {
	ImplementsInfrastructureIntegrationEntityOutline()
}

// UnmarshalInfrastructureIntegrationEntityOutlineInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalInfrastructureIntegrationEntityOutlineInterface(b []byte) (*InfrastructureIntegrationEntityOutlineInterface, error) {
	var err error

	var rawMessageInfrastructureIntegrationEntityOutline map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageInfrastructureIntegrationEntityOutline)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageInfrastructureIntegrationEntityOutline) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageInfrastructureIntegrationEntityOutline["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "GenericInfrastructureEntityOutline":
			var interfaceType GenericInfrastructureEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx InfrastructureIntegrationEntityOutlineInterface = &interfaceType

			return &xxx, nil
		case "InfrastructureAwsLambdaFunctionEntityOutline":
			var interfaceType InfrastructureAwsLambdaFunctionEntityOutline
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx InfrastructureIntegrationEntityOutlineInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageInfrastructureIntegrationEntityOutline {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface InfrastructureIntegrationEntityOutline did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface InfrastructureIntegrationEntityOutline was not matched against all PossibleTypes: %s", typeName)
}

// SuggestedNRQLQuery - Interface type representing a query suggestion.
type SuggestedNRQLQueryInterface interface {
	ImplementsSuggestedNRQLQuery()
}

// UnmarshalSuggestedNRQLQueryInterface unmarshals the interface into the correct type
// based on __typename provided by GraphQL
func UnmarshalSuggestedNRQLQueryInterface(b []byte) (*SuggestedNRQLQueryInterface, error) {
	var err error

	var rawMessageSuggestedNRQLQuery map[string]*json.RawMessage
	err = json.Unmarshal(b, &rawMessageSuggestedNRQLQuery)
	if err != nil {
		return nil, err
	}

	// Nothing to unmarshal
	if len(rawMessageSuggestedNRQLQuery) < 1 {
		return nil, nil
	}

	var typeName string

	if rawTypeName, ok := rawMessageSuggestedNRQLQuery["__typename"]; ok {
		err = json.Unmarshal(*rawTypeName, &typeName)
		if err != nil {
			return nil, err
		}

		switch typeName {
		case "SuggestedAnomalyBasedNrqlQuery":
			var interfaceType SuggestedAnomalyBasedNRQLQuery
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx SuggestedNRQLQueryInterface = &interfaceType

			return &xxx, nil
		case "SuggestedHistoryBasedNrqlQuery":
			var interfaceType SuggestedHistoryBasedNRQLQuery
			err = json.Unmarshal(b, &interfaceType)
			if err != nil {
				return nil, err
			}

			var xxx SuggestedNRQLQueryInterface = &interfaceType

			return &xxx, nil
		}
	} else {
		keys := []string{}
		for k := range rawMessageSuggestedNRQLQuery {
			keys = append(keys, k)
		}
		return nil, fmt.Errorf("interface SuggestedNRQLQuery did not include a __typename field for inspection: %s", keys)
	}

	return nil, fmt.Errorf("interface SuggestedNRQLQuery was not matched against all PossibleTypes: %s", typeName)
}

// DO NOT DELETE
func (x *EntityManagementActorStitchedFields) UnmarshalJSON(b []byte) error {
	var objMap map[string]*json.RawMessage
	err := json.Unmarshal(b, &objMap)
	if err != nil {
		return err
	}

	for k, v := range objMap {
		if v == nil {
			continue
		}

		switch k {
		case "entity":
			if v == nil {
				continue
			}
			xxx, err := UnmarshalEntityManagementEntityInterface(*v)
			if err != nil {
				return err
			}
			if xxx != nil {
				x.Entity = *xxx
			}
		case "entitySearch":
			err = json.Unmarshal(*v, &x.EntitySearch)
			if err != nil {
				return err
			}
		}
	}

	return nil
}
