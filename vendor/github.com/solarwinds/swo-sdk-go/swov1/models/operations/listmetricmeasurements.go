// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"time"
)

type ListMetricMeasurementsRequest struct {
	// Metric name.
	Name string `pathParam:"style=simple,explode=false,name=name"`
	// Query to filter the measurement values. e.g id: [id1,id2] category: moderate
	Filter *string `queryParam:"style=form,explode=false,name=filter"`
	// Comma-delimited list of attribute names to group measurements by. e.g id, category
	GroupBy *string `queryParam:"style=form,explode=false,name=groupBy"`
	// Aggregation method used to group measurements. Defaults to AVG.
	AggregateBy *components.MetricsAggregationMethods `queryParam:"style=form,explode=false,name=aggregateBy"`
	// This parameter is deprecated. Bucket size is determined by the API layer.
	//
	// Deprecated: This will be removed in a future release, please migrate away from it as soon as possible.
	BucketSizeInSeconds *int `queryParam:"style=form,explode=false,name=bucketSizeInSeconds"`
	// Secondary grouping to allow aggregating data points inside individual buckets. Has to be set together with `preGroupByMethod`.
	PreGroupBy *string `queryParam:"style=form,explode=false,name=preGroupBy"`
	// Secondary aggregation to allow aggregating data points inside individual buckets. Has to be set together with `preGroupBy`.
	PreGroupByMethod *string `queryParam:"style=form,explode=false,name=preGroupByMethod"`
	// Indicates what type of data to return. Defaults to TIMESERIES.
	SeriesType components.MetricsMetricSeriesType `queryParam:"style=form,explode=false,name=seriesType"`
	// Timestamp in ISO 8601 format in UTC timezone: yyyy-MM-ddTHH:mm:ssZ
	StartTime *time.Time `queryParam:"style=form,explode=false,name=startTime"`
	// Timestamp in ISO 8601 format in UTC timezone: yyyy-MM-ddTHH:mm:ssZ
	EndTime *time.Time `queryParam:"style=form,explode=false,name=endTime"`
	// Number of items in a response page. Default varies by API.
	PageSize *int `queryParam:"style=form,explode=false,name=pageSize"`
	// Token for the requested page.
	SkipToken *string `queryParam:"style=form,explode=false,name=skipToken"`
}

func (l ListMetricMeasurementsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListMetricMeasurementsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"name", "seriesType"}); err != nil {
		return err
	}
	return nil
}

func (l *ListMetricMeasurementsRequest) GetName() string {
	if l == nil {
		return ""
	}
	return l.Name
}

func (l *ListMetricMeasurementsRequest) GetFilter() *string {
	if l == nil {
		return nil
	}
	return l.Filter
}

func (l *ListMetricMeasurementsRequest) GetGroupBy() *string {
	if l == nil {
		return nil
	}
	return l.GroupBy
}

func (l *ListMetricMeasurementsRequest) GetAggregateBy() *components.MetricsAggregationMethods {
	if l == nil {
		return nil
	}
	return l.AggregateBy
}

func (l *ListMetricMeasurementsRequest) GetBucketSizeInSeconds() *int {
	if l == nil {
		return nil
	}
	return l.BucketSizeInSeconds
}

func (l *ListMetricMeasurementsRequest) GetPreGroupBy() *string {
	if l == nil {
		return nil
	}
	return l.PreGroupBy
}

func (l *ListMetricMeasurementsRequest) GetPreGroupByMethod() *string {
	if l == nil {
		return nil
	}
	return l.PreGroupByMethod
}

func (l *ListMetricMeasurementsRequest) GetSeriesType() components.MetricsMetricSeriesType {
	if l == nil {
		return components.MetricsMetricSeriesType("")
	}
	return l.SeriesType
}

func (l *ListMetricMeasurementsRequest) GetStartTime() *time.Time {
	if l == nil {
		return nil
	}
	return l.StartTime
}

func (l *ListMetricMeasurementsRequest) GetEndTime() *time.Time {
	if l == nil {
		return nil
	}
	return l.EndTime
}

func (l *ListMetricMeasurementsRequest) GetPageSize() *int {
	if l == nil {
		return nil
	}
	return l.PageSize
}

func (l *ListMetricMeasurementsRequest) GetSkipToken() *string {
	if l == nil {
		return nil
	}
	return l.SkipToken
}

// ListMetricMeasurementsResponseBody - The request has succeeded.
type ListMetricMeasurementsResponseBody struct {
	Groupings           []components.MetricsGrouping `json:"groupings"`
	BucketSizeInSeconds int                          `json:"bucketSizeInSeconds"`
	PageInfo            components.CommonPageInfo    `json:"pageInfo"`
}

func (l *ListMetricMeasurementsResponseBody) GetGroupings() []components.MetricsGrouping {
	if l == nil {
		return []components.MetricsGrouping{}
	}
	return l.Groupings
}

func (l *ListMetricMeasurementsResponseBody) GetBucketSizeInSeconds() int {
	if l == nil {
		return 0
	}
	return l.BucketSizeInSeconds
}

func (l *ListMetricMeasurementsResponseBody) GetPageInfo() components.CommonPageInfo {
	if l == nil {
		return components.CommonPageInfo{}
	}
	return l.PageInfo
}

type ListMetricMeasurementsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request has succeeded.
	Object *ListMetricMeasurementsResponseBody

	Next func() (*ListMetricMeasurementsResponse, error)
}

func (l *ListMetricMeasurementsResponse) GetHTTPMeta() components.HTTPMetadata {
	if l == nil {
		return components.HTTPMetadata{}
	}
	return l.HTTPMeta
}

func (l *ListMetricMeasurementsResponse) GetObject() *ListMetricMeasurementsResponseBody {
	if l == nil {
		return nil
	}
	return l.Object
}
