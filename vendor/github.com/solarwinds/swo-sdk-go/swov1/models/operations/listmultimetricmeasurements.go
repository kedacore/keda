// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"time"
)

type ListMultiMetricMeasurementsRequestBody struct {
	Metrics []components.MetricsMeasurementsRequest `json:"metrics"`
	// Timestamp in ISO 8601 format in UTC timezone: yyyy-MM-ddTHH:mm:ssZ
	StartTime *time.Time `json:"startTime,omitempty"`
	// Timestamp in ISO 8601 format in UTC timezone: yyyy-MM-ddTHH:mm:ssZ
	EndTime *time.Time `json:"endTime,omitempty"`
}

func (l ListMultiMetricMeasurementsRequestBody) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListMultiMetricMeasurementsRequestBody) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"metrics"}); err != nil {
		return err
	}
	return nil
}

func (l *ListMultiMetricMeasurementsRequestBody) GetMetrics() []components.MetricsMeasurementsRequest {
	if l == nil {
		return []components.MetricsMeasurementsRequest{}
	}
	return l.Metrics
}

func (l *ListMultiMetricMeasurementsRequestBody) GetStartTime() *time.Time {
	if l == nil {
		return nil
	}
	return l.StartTime
}

func (l *ListMultiMetricMeasurementsRequestBody) GetEndTime() *time.Time {
	if l == nil {
		return nil
	}
	return l.EndTime
}

type ListMultiMetricMeasurementsRequest struct {
	// Forces a positional response; see the operation description.
	ForcePositional *bool `default:"false" queryParam:"style=form,explode=false,name=forcePositional"`
	// Number of items in a response page. Default varies by API.
	PageSize *int `queryParam:"style=form,explode=false,name=pageSize"`
	// Token for the requested page.
	SkipToken   *string                                `queryParam:"style=form,explode=false,name=skipToken"`
	RequestBody ListMultiMetricMeasurementsRequestBody `request:"mediaType=application/json"`
}

func (l ListMultiMetricMeasurementsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListMultiMetricMeasurementsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, []string{"RequestBody"}); err != nil {
		return err
	}
	return nil
}

func (l *ListMultiMetricMeasurementsRequest) GetForcePositional() *bool {
	if l == nil {
		return nil
	}
	return l.ForcePositional
}

func (l *ListMultiMetricMeasurementsRequest) GetPageSize() *int {
	if l == nil {
		return nil
	}
	return l.PageSize
}

func (l *ListMultiMetricMeasurementsRequest) GetSkipToken() *string {
	if l == nil {
		return nil
	}
	return l.SkipToken
}

func (l *ListMultiMetricMeasurementsRequest) GetRequestBody() ListMultiMetricMeasurementsRequestBody {
	if l == nil {
		return ListMultiMetricMeasurementsRequestBody{}
	}
	return l.RequestBody
}

type Metrics struct {
	// Entry identification, as (if) provided in the corresponding request entry.
	ID *string `json:"id,omitempty"`
	// Metric name.
	Name string `json:"name"`
	// Collection of attributes and measurements.
	Groupings []components.MetricsGrouping `json:"groupings"`
	// Bucket size used for computing points in this entry.
	BucketSizeInSeconds int `json:"bucketSizeInSeconds"`
}

func (m *Metrics) GetID() *string {
	if m == nil {
		return nil
	}
	return m.ID
}

func (m *Metrics) GetName() string {
	if m == nil {
		return ""
	}
	return m.Name
}

func (m *Metrics) GetGroupings() []components.MetricsGrouping {
	if m == nil {
		return []components.MetricsGrouping{}
	}
	return m.Groupings
}

func (m *Metrics) GetBucketSizeInSeconds() int {
	if m == nil {
		return 0
	}
	return m.BucketSizeInSeconds
}

// ListMultiMetricMeasurementsResponseBody - The request has succeeded.
type ListMultiMetricMeasurementsResponseBody struct {
	Metrics  []Metrics                 `json:"metrics"`
	PageInfo components.CommonPageInfo `json:"pageInfo"`
}

func (l *ListMultiMetricMeasurementsResponseBody) GetMetrics() []Metrics {
	if l == nil {
		return []Metrics{}
	}
	return l.Metrics
}

func (l *ListMultiMetricMeasurementsResponseBody) GetPageInfo() components.CommonPageInfo {
	if l == nil {
		return components.CommonPageInfo{}
	}
	return l.PageInfo
}

type ListMultiMetricMeasurementsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request has succeeded.
	Object *ListMultiMetricMeasurementsResponseBody

	Next func() (*ListMultiMetricMeasurementsResponse, error)
}

func (l *ListMultiMetricMeasurementsResponse) GetHTTPMeta() components.HTTPMetadata {
	if l == nil {
		return components.HTTPMetadata{}
	}
	return l.HTTPMeta
}

func (l *ListMultiMetricMeasurementsResponse) GetObject() *ListMultiMetricMeasurementsResponseBody {
	if l == nil {
		return nil
	}
	return l.Object
}
