// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package operations

import (
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"time"
)

type SearchLogsRequest struct {
	// A search query string
	Filter *string `queryParam:"style=form,explode=false,name=filter"`
	// Filter logs by a specific group name
	Group *string `queryParam:"style=form,explode=false,name=group"`
	// Filter logs by a specific entity id
	EntityID *string `queryParam:"style=form,explode=false,name=entityId"`
	// Timestamp in ISO 8601 format in UTC timezone: yyyy-MM-ddTHH:mm:ssZ
	StartTime *time.Time `queryParam:"style=form,explode=false,name=startTime"`
	// Timestamp in ISO 8601 format in UTC timezone: yyyy-MM-ddTHH:mm:ssZ
	EndTime *time.Time `queryParam:"style=form,explode=false,name=endTime"`
	// Search direction: backward, forward, or tail. Backward sorts logs from oldest to newest, forward sorts logs from newest to oldest, and tail sorts from oldest to newest.
	Direction *string `default:"backward" queryParam:"style=form,explode=false,name=direction"`
	// Number of items in a response page. Default varies by API.
	PageSize *int `queryParam:"style=form,explode=false,name=pageSize"`
	// Token for the requested page.
	SkipToken *string `queryParam:"style=form,explode=false,name=skipToken"`
}

func (s SearchLogsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SearchLogsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, nil); err != nil {
		return err
	}
	return nil
}

func (s *SearchLogsRequest) GetFilter() *string {
	if s == nil {
		return nil
	}
	return s.Filter
}

func (s *SearchLogsRequest) GetGroup() *string {
	if s == nil {
		return nil
	}
	return s.Group
}

func (s *SearchLogsRequest) GetEntityID() *string {
	if s == nil {
		return nil
	}
	return s.EntityID
}

func (s *SearchLogsRequest) GetStartTime() *time.Time {
	if s == nil {
		return nil
	}
	return s.StartTime
}

func (s *SearchLogsRequest) GetEndTime() *time.Time {
	if s == nil {
		return nil
	}
	return s.EndTime
}

func (s *SearchLogsRequest) GetDirection() *string {
	if s == nil {
		return nil
	}
	return s.Direction
}

func (s *SearchLogsRequest) GetPageSize() *int {
	if s == nil {
		return nil
	}
	return s.PageSize
}

func (s *SearchLogsRequest) GetSkipToken() *string {
	if s == nil {
		return nil
	}
	return s.SkipToken
}

// SearchLogsResponseBody - The request has succeeded.
type SearchLogsResponseBody struct {
	Logs     []components.LogsEvent    `json:"logs"`
	PageInfo components.CommonPageInfo `json:"pageInfo"`
}

func (s *SearchLogsResponseBody) GetLogs() []components.LogsEvent {
	if s == nil {
		return []components.LogsEvent{}
	}
	return s.Logs
}

func (s *SearchLogsResponseBody) GetPageInfo() components.CommonPageInfo {
	if s == nil {
		return components.CommonPageInfo{}
	}
	return s.PageInfo
}

type SearchLogsResponse struct {
	HTTPMeta components.HTTPMetadata `json:"-"`
	// The request has succeeded.
	Object *SearchLogsResponseBody

	Next func() (*SearchLogsResponse, error)
}

func (s *SearchLogsResponse) GetHTTPMeta() components.HTTPMetadata {
	if s == nil {
		return components.HTTPMetadata{}
	}
	return s.HTTPMeta
}

func (s *SearchLogsResponse) GetObject() *SearchLogsResponseBody {
	if s == nil {
		return nil
	}
	return s.Object
}
