// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Platform - Cloud platform hosting the probe.
type Platform string

const (
	PlatformAws         Platform = "AWS"
	PlatformAzure       Platform = "AZURE"
	PlatformGoogleCloud Platform = "GOOGLE_CLOUD"
)

func (e Platform) ToPointer() *Platform {
	return &e
}
func (e *Platform) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AWS":
		fallthrough
	case "AZURE":
		fallthrough
	case "GOOGLE_CLOUD":
		*e = Platform(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Platform: %v", v)
	}
}

// Coordinates of the probe.
type Coordinates struct {
	// Latitude of the location.
	Latitude float32 `json:"latitude"`
	// Longitude of the location.
	Longitude float32 `json:"longitude"`
}

func (o *Coordinates) GetLatitude() float32 {
	if o == nil {
		return 0.0
	}
	return o.Latitude
}

func (o *Coordinates) GetLongitude() float32 {
	if o == nil {
		return 0.0
	}
	return o.Longitude
}

type Probe struct {
	// Unique identifier of the probe.
	ID string `json:"id"`
	// Name of the probe.
	Name string `json:"name"`
	// True if the probe is active.
	Active bool `json:"active"`
	// Cloud platform hosting the probe.
	Platform Platform `json:"platform"`
	// Region where the probe is located.
	Region string `json:"region"`
	// ISO 3166-1 alpha-2 code of the country where the probe is located.
	Country string `json:"country"`
	// City where the probe is located.
	City string `json:"city"`
	// Coordinates of the probe.
	Coordinates Coordinates `json:"coordinates"`
	// IPv4 addresses of the probe.
	Ipv4Addresses []string `json:"ipv4Addresses"`
	// IPv6 addresses of the probe. Not all probes support IPv6.
	Ipv6Addresses []string `json:"ipv6Addresses,omitempty"`
}

func (o *Probe) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Probe) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *Probe) GetActive() bool {
	if o == nil {
		return false
	}
	return o.Active
}

func (o *Probe) GetPlatform() Platform {
	if o == nil {
		return Platform("")
	}
	return o.Platform
}

func (o *Probe) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *Probe) GetCountry() string {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *Probe) GetCity() string {
	if o == nil {
		return ""
	}
	return o.City
}

func (o *Probe) GetCoordinates() Coordinates {
	if o == nil {
		return Coordinates{}
	}
	return o.Coordinates
}

func (o *Probe) GetIpv4Addresses() []string {
	if o == nil {
		return []string{}
	}
	return o.Ipv4Addresses
}

func (o *Probe) GetIpv6Addresses() []string {
	if o == nil {
		return nil
	}
	return o.Ipv6Addresses
}
