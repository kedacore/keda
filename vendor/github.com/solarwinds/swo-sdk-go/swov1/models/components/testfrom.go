// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// Type - Specificity for location of synthetic probes to be used for availability tests.
type Type string

const (
	TypeRegion  Type = "REGION"
	TypeCountry Type = "COUNTRY"
	TypeCity    Type = "CITY"
)

func (e Type) ToPointer() *Type {
	return &e
}
func (e *Type) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "REGION":
		fallthrough
	case "COUNTRY":
		fallthrough
	case "CITY":
		*e = Type(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Type: %v", v)
	}
}

type TestFrom struct {
	// Specificity for location of synthetic probes to be used for availability tests.
	Type Type `json:"type"`
	// A list of probe location values of the selected type. At least one value matching an existing probe must be provided.
	Values []string `json:"values"`
}

func (o *TestFrom) GetType() Type {
	if o == nil {
		return Type("")
	}
	return o.Type
}

func (o *TestFrom) GetValues() []string {
	if o == nil {
		return []string{}
	}
	return o.Values
}
