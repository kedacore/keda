// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"time"
)

type DemGetURIResponseStatus string

const (
	DemGetURIResponseStatusUp          DemGetURIResponseStatus = "up"
	DemGetURIResponseStatusDown        DemGetURIResponseStatus = "down"
	DemGetURIResponseStatusPaused      DemGetURIResponseStatus = "paused"
	DemGetURIResponseStatusMaintenance DemGetURIResponseStatus = "maintenance"
	DemGetURIResponseStatusUnknown     DemGetURIResponseStatus = "unknown"
)

func (e DemGetURIResponseStatus) ToPointer() *DemGetURIResponseStatus {
	return &e
}
func (e *DemGetURIResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "up":
		fallthrough
	case "down":
		fallthrough
	case "paused":
		fallthrough
	case "maintenance":
		fallthrough
	case "unknown":
		*e = DemGetURIResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DemGetURIResponseStatus: %v", v)
	}
}

type DemGetURIResponse struct {
	ID     string                  `json:"id"`
	Type   string                  `json:"type"`
	Status DemGetURIResponseStatus `json:"status"`
	//   Name of the URI, which must be unique within the organization.
	//   The name must also not contain any control characters, any white space other than space (U+0020), or any consecutive, leading or trailing spaces.
	Name string `json:"name"`
	// IP/domain address of the URI.
	IPOrDomain string `json:"ipOrDomain"`
	// Availability check tests configuration for the URI.
	AvailabilityCheckSettings DemURIAvailabilityCheckSettings `json:"availabilityCheckSettings"`
	// Entity tags. Tag is a key-value pair, where there may be only single tag value for the same key.
	Tags []CommonTag `json:"tags,omitempty"`
	// Time when the last outage started.
	LastOutageStartTime *time.Time `json:"lastOutageStartTime,omitempty"`
	// Time when the last outage ended.
	LastOutageEndTime *time.Time `json:"lastOutageEndTime,omitempty"`
	// Time when the last test was performed.
	LastTestTime *time.Time `json:"lastTestTime,omitempty"`
	// Last time when a synthetic test failed.
	LastErrorTime *time.Time `json:"lastErrorTime,omitempty"`
	// Response time from the last synthetic check in milliseconds.
	LastResponseTime *int `json:"lastResponseTime,omitempty"`
}

func (d DemGetURIResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(d, "", false)
}

func (d *DemGetURIResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &d, "", false, []string{"id", "type", "status", "name", "ipOrDomain", "availabilityCheckSettings"}); err != nil {
		return err
	}
	return nil
}

func (d *DemGetURIResponse) GetID() string {
	if d == nil {
		return ""
	}
	return d.ID
}

func (d *DemGetURIResponse) GetType() string {
	if d == nil {
		return ""
	}
	return d.Type
}

func (d *DemGetURIResponse) GetStatus() DemGetURIResponseStatus {
	if d == nil {
		return DemGetURIResponseStatus("")
	}
	return d.Status
}

func (d *DemGetURIResponse) GetName() string {
	if d == nil {
		return ""
	}
	return d.Name
}

func (d *DemGetURIResponse) GetIPOrDomain() string {
	if d == nil {
		return ""
	}
	return d.IPOrDomain
}

func (d *DemGetURIResponse) GetAvailabilityCheckSettings() DemURIAvailabilityCheckSettings {
	if d == nil {
		return DemURIAvailabilityCheckSettings{}
	}
	return d.AvailabilityCheckSettings
}

func (d *DemGetURIResponse) GetTags() []CommonTag {
	if d == nil {
		return nil
	}
	return d.Tags
}

func (d *DemGetURIResponse) GetLastOutageStartTime() *time.Time {
	if d == nil {
		return nil
	}
	return d.LastOutageStartTime
}

func (d *DemGetURIResponse) GetLastOutageEndTime() *time.Time {
	if d == nil {
		return nil
	}
	return d.LastOutageEndTime
}

func (d *DemGetURIResponse) GetLastTestTime() *time.Time {
	if d == nil {
		return nil
	}
	return d.LastTestTime
}

func (d *DemGetURIResponse) GetLastErrorTime() *time.Time {
	if d == nil {
		return nil
	}
	return d.LastErrorTime
}

func (d *DemGetURIResponse) GetLastResponseTime() *int {
	if d == nil {
		return nil
	}
	return d.LastResponseTime
}
