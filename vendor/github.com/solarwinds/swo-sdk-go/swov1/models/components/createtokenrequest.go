// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Tags struct {
	Server          string `json:"server"`
	TagWithoutValue string `json:"tag_without_value"`
}

func (o *Tags) GetServer() string {
	if o == nil {
		return ""
	}
	return o.Server
}

func (o *Tags) GetTagWithoutValue() string {
	if o == nil {
		return ""
	}
	return o.TagWithoutValue
}

type CreateTokenRequestType string

const (
	CreateTokenRequestTypeIngestion CreateTokenRequestType = "ingestion"
)

func (e CreateTokenRequestType) ToPointer() *CreateTokenRequestType {
	return &e
}
func (e *CreateTokenRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ingestion":
		*e = CreateTokenRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CreateTokenRequestType: %v", v)
	}
}

type CreateTokenRequest struct {
	Name string                 `json:"name"`
	Tags Tags                   `json:"tags"`
	Type CreateTokenRequestType `json:"type"`
}

func (o *CreateTokenRequest) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *CreateTokenRequest) GetTags() Tags {
	if o == nil {
		return Tags{}
	}
	return o.Tags
}

func (o *CreateTokenRequest) GetType() CreateTokenRequestType {
	if o == nil {
		return CreateTokenRequestType("")
	}
	return o.Type
}
