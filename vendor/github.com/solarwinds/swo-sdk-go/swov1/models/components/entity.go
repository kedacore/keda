// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"time"
)

// Category - Health Score category label.
type Category string

const (
	CategoryGood     Category = "good"
	CategoryBad      Category = "bad"
	CategoryModerate Category = "moderate"
)

func (e Category) ToPointer() *Category {
	return &e
}
func (e *Category) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "good":
		fallthrough
	case "bad":
		fallthrough
	case "moderate":
		*e = Category(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Category: %v", v)
	}
}

type Healthscore struct {
	// Health score value from 0 to 100.
	Score int `json:"score"`
	// Health Score category label.
	Category Category `json:"category"`
}

func (o *Healthscore) GetScore() int {
	if o == nil {
		return 0
	}
	return o.Score
}

func (o *Healthscore) GetCategory() Category {
	if o == nil {
		return Category("")
	}
	return o.Category
}

type Entity struct {
	// The ID of the entity.
	ID string `json:"id"`
	// The type of the entity.
	Type string `json:"type"`
	// The name of the entity.
	Name *string `json:"name,omitempty"`
	// Entity display name / alias. This value is equal to name unless it is explicitly overridden.
	DisplayName *string `json:"displayName,omitempty"`
	// Date and time of entity creation in UTC.
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	// Date and time of last entity update in UTC.
	UpdatedTime *time.Time `json:"updatedTime,omitempty"`
	// Date and time when the entity has last received telemetry in UTC.
	LastSeenTime time.Time `json:"lastSeenTime"`
	// Flag telling if given entity is in maintenance mode.
	InMaintenance bool         `json:"inMaintenance"`
	Healthscore   *Healthscore `json:"healthscore,omitempty"`
	// Entity tags. Tag is a key-value pair, where there may be only a single tag value for the same key.
	Tags map[string]*string `json:"tags"`
	// Map of available attributes.
	Attributes map[string]any `json:"attributes,omitempty"`
}

func (e Entity) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(e, "", false)
}

func (e *Entity) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &e, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *Entity) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *Entity) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *Entity) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *Entity) GetDisplayName() *string {
	if o == nil {
		return nil
	}
	return o.DisplayName
}

func (o *Entity) GetCreatedTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.CreatedTime
}

func (o *Entity) GetUpdatedTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.UpdatedTime
}

func (o *Entity) GetLastSeenTime() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.LastSeenTime
}

func (o *Entity) GetInMaintenance() bool {
	if o == nil {
		return false
	}
	return o.InMaintenance
}

func (o *Entity) GetHealthscore() *Healthscore {
	if o == nil {
		return nil
	}
	return o.Healthscore
}

func (o *Entity) GetTags() map[string]*string {
	if o == nil {
		return map[string]*string{}
	}
	return o.Tags
}

func (o *Entity) GetAttributes() map[string]any {
	if o == nil {
		return nil
	}
	return o.Attributes
}
