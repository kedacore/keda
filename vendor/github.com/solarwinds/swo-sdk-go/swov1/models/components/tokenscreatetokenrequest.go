// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

type Tags struct {
	Server          string `json:"server"`
	TagWithoutValue string `json:"tag_without_value"`
}

func (t *Tags) GetServer() string {
	if t == nil {
		return ""
	}
	return t.Server
}

func (t *Tags) GetTagWithoutValue() string {
	if t == nil {
		return ""
	}
	return t.TagWithoutValue
}

type TokensCreateTokenRequestType string

const (
	TokensCreateTokenRequestTypeIngestion TokensCreateTokenRequestType = "ingestion"
)

func (e TokensCreateTokenRequestType) ToPointer() *TokensCreateTokenRequestType {
	return &e
}
func (e *TokensCreateTokenRequestType) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "ingestion":
		*e = TokensCreateTokenRequestType(v)
		return nil
	default:
		return fmt.Errorf("invalid value for TokensCreateTokenRequestType: %v", v)
	}
}

type TokensCreateTokenRequest struct {
	Name string                       `json:"name"`
	Tags Tags                         `json:"tags"`
	Type TokensCreateTokenRequestType `json:"type"`
}

func (t *TokensCreateTokenRequest) GetName() string {
	if t == nil {
		return ""
	}
	return t.Name
}

func (t *TokensCreateTokenRequest) GetTags() Tags {
	if t == nil {
		return Tags{}
	}
	return t.Tags
}

func (t *TokensCreateTokenRequest) GetType() TokensCreateTokenRequestType {
	if t == nil {
		return TokensCreateTokenRequestType("")
	}
	return t.Type
}
