// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"time"
)

type GetWebsiteResponseStatus string

const (
	GetWebsiteResponseStatusUp          GetWebsiteResponseStatus = "up"
	GetWebsiteResponseStatusDown        GetWebsiteResponseStatus = "down"
	GetWebsiteResponseStatusPaused      GetWebsiteResponseStatus = "paused"
	GetWebsiteResponseStatusMaintenance GetWebsiteResponseStatus = "maintenance"
	GetWebsiteResponseStatusUnknown     GetWebsiteResponseStatus = "unknown"
)

func (e GetWebsiteResponseStatus) ToPointer() *GetWebsiteResponseStatus {
	return &e
}
func (e *GetWebsiteResponseStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "up":
		fallthrough
	case "down":
		fallthrough
	case "paused":
		fallthrough
	case "maintenance":
		fallthrough
	case "unknown":
		*e = GetWebsiteResponseStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebsiteResponseStatus: %v", v)
	}
}

// MonitoringOptions - Defines which monitoring features are enabled for a website.
type MonitoringOptions struct {
	// True if the availability monitoring is active.
	IsAvailabilityActive bool `json:"isAvailabilityActive"`
	// True if the real user monitoring (RUM) is active.
	IsRumActive bool `json:"isRumActive"`
}

func (o *MonitoringOptions) GetIsAvailabilityActive() bool {
	if o == nil {
		return false
	}
	return o.IsAvailabilityActive
}

func (o *MonitoringOptions) GetIsRumActive() bool {
	if o == nil {
		return false
	}
	return o.IsRumActive
}

// GetWebsiteResponsePlatformOptions - Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, no particular cloud platform will be enforced.
type GetWebsiteResponsePlatformOptions struct {
	// Cloud platforms hosting synthetic probes.
	ProbePlatforms []ProbePlatform `json:"probePlatforms"`
	//   Use this field to configure whether availability tests should be performed from all selected
	//   platforms or one randomly selected platform. It has no effect if you provided only one platform
	//   in the `probePlatforms` field.
	//
	//   If set to true, a separate test is made from each of the selected platforms.
	//
	//   If set to false, only one of the selected platforms is chosen every time.
	//
	//   If omitted, the previous setting will stay in effect. If there is no previous setting, the value
	//   will default to false.
	TestFromAll *bool `json:"testFromAll,omitempty"`
}

func (o *GetWebsiteResponsePlatformOptions) GetProbePlatforms() []ProbePlatform {
	if o == nil {
		return []ProbePlatform{}
	}
	return o.ProbePlatforms
}

func (o *GetWebsiteResponsePlatformOptions) GetTestFromAll() *bool {
	if o == nil {
		return nil
	}
	return o.TestFromAll
}

// GetWebsiteResponseFailingTestLocations - How many locations must report a failure for an entity to be considered down.
type GetWebsiteResponseFailingTestLocations string

const (
	GetWebsiteResponseFailingTestLocationsAll GetWebsiteResponseFailingTestLocations = "all"
	GetWebsiteResponseFailingTestLocationsAny GetWebsiteResponseFailingTestLocations = "any"
)

func (e GetWebsiteResponseFailingTestLocations) ToPointer() *GetWebsiteResponseFailingTestLocations {
	return &e
}
func (e *GetWebsiteResponseFailingTestLocations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = GetWebsiteResponseFailingTestLocations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebsiteResponseFailingTestLocations: %v", v)
	}
}

// GetWebsiteResponseOutageConfiguration -   Default conditions when the entity is considered down.
//
//	If omitted or set to null, organization configuration will be used for this entity.
type GetWebsiteResponseOutageConfiguration struct {
	// How many locations must report a failure for an entity to be considered down.
	FailingTestLocations GetWebsiteResponseFailingTestLocations `json:"failingTestLocations"`
	// Number of consecutive failing tests for an entity to be considered down.
	ConsecutiveForDown int `json:"consecutiveForDown"`
}

func (o *GetWebsiteResponseOutageConfiguration) GetFailingTestLocations() GetWebsiteResponseFailingTestLocations {
	if o == nil {
		return GetWebsiteResponseFailingTestLocations("")
	}
	return o.FailingTestLocations
}

func (o *GetWebsiteResponseOutageConfiguration) GetConsecutiveForDown() int {
	if o == nil {
		return 0
	}
	return o.ConsecutiveForDown
}

// GetWebsiteResponseOperator - Defines whether the check should pass only when the string is present on the page (CONTAINS) or only when it is absent (DOES_NOT_CONTAIN).
type GetWebsiteResponseOperator string

const (
	GetWebsiteResponseOperatorContains       GetWebsiteResponseOperator = "CONTAINS"
	GetWebsiteResponseOperatorDoesNotContain GetWebsiteResponseOperator = "DOES_NOT_CONTAIN"
)

func (e GetWebsiteResponseOperator) ToPointer() *GetWebsiteResponseOperator {
	return &e
}
func (e *GetWebsiteResponseOperator) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "CONTAINS":
		fallthrough
	case "DOES_NOT_CONTAIN":
		*e = GetWebsiteResponseOperator(v)
		return nil
	default:
		return fmt.Errorf("invalid value for GetWebsiteResponseOperator: %v", v)
	}
}

// GetWebsiteResponseCheckForString -   Use this field to configure whether availability tests should check for presence or absence of a particular string on a page.
//
//	If the operator is DOES_NOT_CONTAIN and the value is found on the page, the availability test will fail.
//	Likewise, if the operator is CONTAINS and the value is not found on the page, the availability test will fail.
//	If omitted or set to null, the string checking functionality will be disabled.
type GetWebsiteResponseCheckForString struct {
	// Defines whether the check should pass only when the string is present on the page (CONTAINS) or only when it is absent (DOES_NOT_CONTAIN).
	Operator GetWebsiteResponseOperator `json:"operator"`
	// The string that which will be searched in the page source code.
	Value string `json:"value"`
}

func (o *GetWebsiteResponseCheckForString) GetOperator() GetWebsiteResponseOperator {
	if o == nil {
		return GetWebsiteResponseOperator("")
	}
	return o.Operator
}

func (o *GetWebsiteResponseCheckForString) GetValue() string {
	if o == nil {
		return ""
	}
	return o.Value
}

// GetWebsiteResponseSsl -   Configure monitoring of SSL/TLS certificates validity. This option is relevant for HTTPS protocol only.
//
//	If omitted or set to null, SSL monitoring will be disabled and its previous configuration discarded.
type GetWebsiteResponseSsl struct {
	//   Whether SSL monitoring is enabled for the website.
	//   If set to false, SSL monitoring will be disabled, but the other settings will be remembered in case you re-enable it later.
	//   If omitted, the previous setting will stay in effect. If there is no previous setting, the value will default to false.
	Enabled *bool `json:"enabled,omitempty"`
	// Number of days before the expiration date an SSL certificate will be considered 'expiring.'
	DaysPriorToExpiration *int `json:"daysPriorToExpiration,omitempty"`
	//   Use this option to limit the certificate expiration check to only the first certificate in the chain (normally the host certificate).
	//   This way you will not be warned about impending expiration of intermediate or root Certification Authority certificates in the chain.
	//   This option does not affect any other certificate validity checks besides expiration.
	//   If omitted, the previous setting will stay in effect. If there is no previous setting, the value will default to false.
	IgnoreIntermediateCertificates *bool `json:"ignoreIntermediateCertificates,omitempty"`
}

func (o *GetWebsiteResponseSsl) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *GetWebsiteResponseSsl) GetDaysPriorToExpiration() *int {
	if o == nil {
		return nil
	}
	return o.DaysPriorToExpiration
}

func (o *GetWebsiteResponseSsl) GetIgnoreIntermediateCertificates() *bool {
	if o == nil {
		return nil
	}
	return o.IgnoreIntermediateCertificates
}

// GetWebsiteResponseAvailabilityCheckSettings -   Use this field to configure availability tests for the website.
//
//	You are required to configure at least availability monitoring or real user monitoring to be able to create website.
type GetWebsiteResponseAvailabilityCheckSettings struct {
	// Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, no particular cloud platform will be enforced.
	PlatformOptions *GetWebsiteResponsePlatformOptions `json:"platformOptions,omitempty"`
	//   Configure locations of the synthetic availability test probes.
	//   Acceptable values depend on the selected type and actual values of existing probes.
	TestFrom TestFrom `json:"testFrom"`
	// Configure how often availability tests should be performed. Provide a number of seconds that is one of 60, 300, 600, 900, 1800, 3600, 7200, 14400.
	TestIntervalInSeconds float64 `json:"testIntervalInSeconds"`
	//   Default conditions when the entity is considered down.
	//   If omitted or set to null, organization configuration will be used for this entity.
	OutageConfiguration *GetWebsiteResponseOutageConfiguration `json:"outageConfiguration,omitempty"`
	//   Use this field to configure whether availability tests should check for presence or absence of a particular string on a page.
	//   If the operator is DOES_NOT_CONTAIN and the value is found on the page, the availability test will fail.
	//   Likewise, if the operator is CONTAINS and the value is not found on the page, the availability test will fail.
	//   If omitted or set to null, the string checking functionality will be disabled.
	CheckForString *GetWebsiteResponseCheckForString `json:"checkForString,omitempty"`
	// Configure which protocols need availability tests to be performed. At least one protocol must be provided.
	Protocols []WebsiteProtocol `json:"protocols"`
	//   Configure monitoring of SSL/TLS certificates validity. This option is relevant for HTTPS protocol only.
	//   If omitted or set to null, SSL monitoring will be disabled and its previous configuration discarded.
	Ssl *GetWebsiteResponseSsl `json:"ssl,omitempty"`
	//   Configure custom request headers to be sent with each availability test. It is possible to provide multiple headers with the same name.
	//   If omitted, set to null or set to an empty array, no custom headers will be sent.
	CustomHeaders []CustomHeaders `json:"customHeaders,omitempty"`
	//   Allow insecure SSL renegotiation which introduces a security risk in the communication process.
	//   Checking this option could lead to exposing credentials to unauthorized entities and the possibility of unauthorized access, interception, or manipulation of sensitive data, compromising the integrity and security of the communication channel.
	//   Available only with HTTPS check.
	//   If omitted or set to null, insecure SSL renegotiation won't be allowed.
	AllowInsecureRenegotiation *bool `json:"allowInsecureRenegotiation,omitempty"`
	//   Configure data that will be sent as POST request body by the synthetic probe.
	//   If omitted or set to null/empty string, the probe will send the usual GET requests.
	PostData *string `json:"postData,omitempty"`
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetPlatformOptions() *GetWebsiteResponsePlatformOptions {
	if o == nil {
		return nil
	}
	return o.PlatformOptions
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetTestFrom() TestFrom {
	if o == nil {
		return TestFrom{}
	}
	return o.TestFrom
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetTestIntervalInSeconds() float64 {
	if o == nil {
		return 0.0
	}
	return o.TestIntervalInSeconds
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetOutageConfiguration() *GetWebsiteResponseOutageConfiguration {
	if o == nil {
		return nil
	}
	return o.OutageConfiguration
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetCheckForString() *GetWebsiteResponseCheckForString {
	if o == nil {
		return nil
	}
	return o.CheckForString
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetProtocols() []WebsiteProtocol {
	if o == nil {
		return []WebsiteProtocol{}
	}
	return o.Protocols
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetSsl() *GetWebsiteResponseSsl {
	if o == nil {
		return nil
	}
	return o.Ssl
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetCustomHeaders() []CustomHeaders {
	if o == nil {
		return nil
	}
	return o.CustomHeaders
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetAllowInsecureRenegotiation() *bool {
	if o == nil {
		return nil
	}
	return o.AllowInsecureRenegotiation
}

func (o *GetWebsiteResponseAvailabilityCheckSettings) GetPostData() *string {
	if o == nil {
		return nil
	}
	return o.PostData
}

// GetWebsiteResponseRum - Use this field to configure real user monitoring (RUM) for the website.
// You are required to configure at least availability monitoring or real user monitoring to be able to create website.
type GetWebsiteResponseRum struct {
	ApdexTimeInSeconds *int    `json:"apdexTimeInSeconds,omitempty"`
	Snippet            *string `json:"snippet,omitempty"`
	Spa                bool    `json:"spa"`
}

func (o *GetWebsiteResponseRum) GetApdexTimeInSeconds() *int {
	if o == nil {
		return nil
	}
	return o.ApdexTimeInSeconds
}

func (o *GetWebsiteResponseRum) GetSnippet() *string {
	if o == nil {
		return nil
	}
	return o.Snippet
}

func (o *GetWebsiteResponseRum) GetSpa() bool {
	if o == nil {
		return false
	}
	return o.Spa
}

type GetWebsiteResponse struct {
	ID     string                   `json:"id"`
	Type   string                   `json:"type"`
	Status GetWebsiteResponseStatus `json:"status"`
	//   Name of the website, which must be unique within the organization.
	//   The website must also not contain any control characters, any white space other than space (U+0020), or any consecutive, leading or trailing spaces.
	Name string `json:"name"`
	// URL of the website. Must be a valid URL with no leading or trailing white space. Must not contain invalid port number (>65535).
	URL string `json:"url"`
	// Defines which monitoring features are enabled for a website.
	MonitoringOptions MonitoringOptions `json:"monitoringOptions"`
	//   Use this field to configure availability tests for the website.
	//   You are required to configure at least availability monitoring or real user monitoring to be able to create website.
	AvailabilityCheckSettings *GetWebsiteResponseAvailabilityCheckSettings `json:"availabilityCheckSettings,omitempty"`
	// Entity tags. Tag is a key-value pair, where there may be only single tag value for the same key.
	Tags []Tag `json:"tags,omitempty"`
	// Use this field to configure real user monitoring (RUM) for the website.
	// You are required to configure at least availability monitoring or real user monitoring to be able to create website.
	Rum *GetWebsiteResponseRum `json:"rum,omitempty"`
	// Time when the last outage started.
	LastOutageStartTime *time.Time `json:"lastOutageStartTime,omitempty"`
	// Time when the last outage ended.
	LastOutageEndTime *time.Time `json:"lastOutageEndTime,omitempty"`
	// Time when the last test was performed.
	LastTestTime *time.Time `json:"lastTestTime,omitempty"`
	// Last time when a synthetic test failed.
	LastErrorTime *time.Time `json:"lastErrorTime,omitempty"`
	// Response time from the last synthetic check in milliseconds.
	LastResponseTime *int `json:"lastResponseTime,omitempty"`
	// Timestamp for when the next on-demand check could be executed. If at '0', it means you can execute it anytime.
	NextOnDemandAvailabilityTime *int `json:"nextOnDemandAvailabilityTime,omitempty"`
}

func (g GetWebsiteResponse) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(g, "", false)
}

func (g *GetWebsiteResponse) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &g, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *GetWebsiteResponse) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *GetWebsiteResponse) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *GetWebsiteResponse) GetStatus() GetWebsiteResponseStatus {
	if o == nil {
		return GetWebsiteResponseStatus("")
	}
	return o.Status
}

func (o *GetWebsiteResponse) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *GetWebsiteResponse) GetURL() string {
	if o == nil {
		return ""
	}
	return o.URL
}

func (o *GetWebsiteResponse) GetMonitoringOptions() MonitoringOptions {
	if o == nil {
		return MonitoringOptions{}
	}
	return o.MonitoringOptions
}

func (o *GetWebsiteResponse) GetAvailabilityCheckSettings() *GetWebsiteResponseAvailabilityCheckSettings {
	if o == nil {
		return nil
	}
	return o.AvailabilityCheckSettings
}

func (o *GetWebsiteResponse) GetTags() []Tag {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *GetWebsiteResponse) GetRum() *GetWebsiteResponseRum {
	if o == nil {
		return nil
	}
	return o.Rum
}

func (o *GetWebsiteResponse) GetLastOutageStartTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastOutageStartTime
}

func (o *GetWebsiteResponse) GetLastOutageEndTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastOutageEndTime
}

func (o *GetWebsiteResponse) GetLastTestTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastTestTime
}

func (o *GetWebsiteResponse) GetLastErrorTime() *time.Time {
	if o == nil {
		return nil
	}
	return o.LastErrorTime
}

func (o *GetWebsiteResponse) GetLastResponseTime() *int {
	if o == nil {
		return nil
	}
	return o.LastResponseTime
}

func (o *GetWebsiteResponse) GetNextOnDemandAvailabilityTime() *int {
	if o == nil {
		return nil
	}
	return o.NextOnDemandAvailabilityTime
}
