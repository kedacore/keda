// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package components

import (
	"encoding/json"
	"fmt"
)

// PlatformOptions - Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, any available cloud platform may be chosen.
type PlatformOptions struct {
	// Cloud platforms hosting synthetic probes.
	ProbePlatforms []DemProbePlatform `json:"probePlatforms"`
	//   Use this field to configure whether availability tests should be performed from all selected
	//   platforms or one randomly selected platform. It has no effect if you provided only one platform
	//   in the `probePlatforms` field.
	//
	//   If set to true, a separate test is made from each of the selected platforms.
	//
	//   If set to false, only one of the selected platforms is chosen every time.
	//
	//   If omitted, the previous setting will stay in effect. If there is no previous setting, the value
	//   will default to false.
	TestFromAll *bool `json:"testFromAll,omitempty"`
}

func (p *PlatformOptions) GetProbePlatforms() []DemProbePlatform {
	if p == nil {
		return []DemProbePlatform{}
	}
	return p.ProbePlatforms
}

func (p *PlatformOptions) GetTestFromAll() *bool {
	if p == nil {
		return nil
	}
	return p.TestFromAll
}

// DemTransactionTestDefinitionFailingTestLocations - How many locations must report a failure for an entity to be considered down.
type DemTransactionTestDefinitionFailingTestLocations string

const (
	DemTransactionTestDefinitionFailingTestLocationsAll DemTransactionTestDefinitionFailingTestLocations = "all"
	DemTransactionTestDefinitionFailingTestLocationsAny DemTransactionTestDefinitionFailingTestLocations = "any"
)

func (e DemTransactionTestDefinitionFailingTestLocations) ToPointer() *DemTransactionTestDefinitionFailingTestLocations {
	return &e
}
func (e *DemTransactionTestDefinitionFailingTestLocations) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "all":
		fallthrough
	case "any":
		*e = DemTransactionTestDefinitionFailingTestLocations(v)
		return nil
	default:
		return fmt.Errorf("invalid value for DemTransactionTestDefinitionFailingTestLocations: %v", v)
	}
}

// OutageConfiguration -   Default conditions when the entity is considered down.
//
//	If omitted or set to null, organization configuration will be used for this entity.
type OutageConfiguration struct {
	// How many locations must report a failure for an entity to be considered down.
	FailingTestLocations DemTransactionTestDefinitionFailingTestLocations `json:"failingTestLocations"`
	// Number of consecutive failing tests for an entity to be considered down.
	ConsecutiveForDown int `json:"consecutiveForDown"`
}

func (o *OutageConfiguration) GetFailingTestLocations() DemTransactionTestDefinitionFailingTestLocations {
	if o == nil {
		return DemTransactionTestDefinitionFailingTestLocations("")
	}
	return o.FailingTestLocations
}

func (o *OutageConfiguration) GetConsecutiveForDown() int {
	if o == nil {
		return 0
	}
	return o.ConsecutiveForDown
}

type DemTransactionTestDefinition struct {
	//   Configure locations of the synthetic availability test probes.
	//   Acceptable values depend on the selected type and actual values of existing probes.
	TestFrom DemTestFrom `json:"testFrom"`
	// Configure cloud platforms of the synthetic availability test probes. If omitted or set to null, any available cloud platform may be chosen.
	PlatformOptions *PlatformOptions `json:"platformOptions,omitempty"`
	//   Default conditions when the entity is considered down.
	//   If omitted or set to null, organization configuration will be used for this entity.
	OutageConfiguration *OutageConfiguration `json:"outageConfiguration,omitempty"`
	// Configure how often transaction tests should be performed. Provide a number of seconds that is one of 300, 600, 900, 1800, 3600, 7200, 14400, 43200, 86400.
	TestIntervalInSeconds float64 `json:"testIntervalInSeconds"`
	// Configure the browser window size for the transaction.
	WindowSize DemWindowSize `json:"windowSize"`
	// Configure the user agent of the browser running the transaction. If omitted or set to null, default user agent will be used.
	UserAgent *string `json:"userAgent,omitempty"`
	// List of commands to perform in the transaction.
	Commands []DemTransactionCommand `json:"commands"`
}

func (d *DemTransactionTestDefinition) GetTestFrom() DemTestFrom {
	if d == nil {
		return DemTestFrom{}
	}
	return d.TestFrom
}

func (d *DemTransactionTestDefinition) GetPlatformOptions() *PlatformOptions {
	if d == nil {
		return nil
	}
	return d.PlatformOptions
}

func (d *DemTransactionTestDefinition) GetOutageConfiguration() *OutageConfiguration {
	if d == nil {
		return nil
	}
	return d.OutageConfiguration
}

func (d *DemTransactionTestDefinition) GetTestIntervalInSeconds() float64 {
	if d == nil {
		return 0.0
	}
	return d.TestIntervalInSeconds
}

func (d *DemTransactionTestDefinition) GetWindowSize() DemWindowSize {
	if d == nil {
		return DemWindowSize{}
	}
	return d.WindowSize
}

func (d *DemTransactionTestDefinition) GetUserAgent() *string {
	if d == nil {
		return nil
	}
	return d.UserAgent
}

func (d *DemTransactionTestDefinition) GetCommands() []DemTransactionCommand {
	if d == nil {
		return []DemTransactionCommand{}
	}
	return d.Commands
}
