// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"fmt"
)

// CommonForbiddenErrorResponseCode - Uniquely identifies an error condition.
type CommonForbiddenErrorResponseCode string

const (
	CommonForbiddenErrorResponseCodeAccessForbidden    CommonForbiddenErrorResponseCode = "AccessForbidden"
	CommonForbiddenErrorResponseCodeInternalError      CommonForbiddenErrorResponseCode = "InternalError"
	CommonForbiddenErrorResponseCodeInvalidRequest     CommonForbiddenErrorResponseCode = "InvalidRequest"
	CommonForbiddenErrorResponseCodeResourceConflict   CommonForbiddenErrorResponseCode = "ResourceConflict"
	CommonForbiddenErrorResponseCodeResourceNotFound   CommonForbiddenErrorResponseCode = "ResourceNotFound"
	CommonForbiddenErrorResponseCodeServiceUnavailable CommonForbiddenErrorResponseCode = "ServiceUnavailable"
	CommonForbiddenErrorResponseCodeUnauthorized       CommonForbiddenErrorResponseCode = "Unauthorized"
)

func (e CommonForbiddenErrorResponseCode) ToPointer() *CommonForbiddenErrorResponseCode {
	return &e
}
func (e *CommonForbiddenErrorResponseCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AccessForbidden":
		fallthrough
	case "InternalError":
		fallthrough
	case "InvalidRequest":
		fallthrough
	case "ResourceConflict":
		fallthrough
	case "ResourceNotFound":
		fallthrough
	case "ServiceUnavailable":
		fallthrough
	case "Unauthorized":
		*e = CommonForbiddenErrorResponseCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommonForbiddenErrorResponseCode: %v", v)
	}
}

type CommonForbiddenErrorResponse struct {
	// Supporting description of the error.
	Message string `json:"message"`
	// Uniquely identifies an error condition.
	Code *CommonForbiddenErrorResponseCode `json:"code,omitempty"`
}

var _ error = &CommonForbiddenErrorResponse{}

func (e *CommonForbiddenErrorResponse) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
