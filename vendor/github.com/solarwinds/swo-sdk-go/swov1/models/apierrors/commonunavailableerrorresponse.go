// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package apierrors

import (
	"encoding/json"
	"fmt"
)

// CommonUnavailableErrorResponseCode - Uniquely identifies an error condition.
type CommonUnavailableErrorResponseCode string

const (
	CommonUnavailableErrorResponseCodeAccessForbidden    CommonUnavailableErrorResponseCode = "AccessForbidden"
	CommonUnavailableErrorResponseCodeInternalError      CommonUnavailableErrorResponseCode = "InternalError"
	CommonUnavailableErrorResponseCodeInvalidRequest     CommonUnavailableErrorResponseCode = "InvalidRequest"
	CommonUnavailableErrorResponseCodeResourceConflict   CommonUnavailableErrorResponseCode = "ResourceConflict"
	CommonUnavailableErrorResponseCodeResourceNotFound   CommonUnavailableErrorResponseCode = "ResourceNotFound"
	CommonUnavailableErrorResponseCodeServiceUnavailable CommonUnavailableErrorResponseCode = "ServiceUnavailable"
	CommonUnavailableErrorResponseCodeUnauthorized       CommonUnavailableErrorResponseCode = "Unauthorized"
)

func (e CommonUnavailableErrorResponseCode) ToPointer() *CommonUnavailableErrorResponseCode {
	return &e
}
func (e *CommonUnavailableErrorResponseCode) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "AccessForbidden":
		fallthrough
	case "InternalError":
		fallthrough
	case "InvalidRequest":
		fallthrough
	case "ResourceConflict":
		fallthrough
	case "ResourceNotFound":
		fallthrough
	case "ServiceUnavailable":
		fallthrough
	case "Unauthorized":
		*e = CommonUnavailableErrorResponseCode(v)
		return nil
	default:
		return fmt.Errorf("invalid value for CommonUnavailableErrorResponseCode: %v", v)
	}
}

type CommonUnavailableErrorResponse struct {
	// Supporting description of the error.
	Message string `json:"message"`
	// Uniquely identifies an error condition.
	Code *CommonUnavailableErrorResponseCode `json:"code,omitempty"`
}

var _ error = &CommonUnavailableErrorResponse{}

func (e *CommonUnavailableErrorResponse) Error() string {
	data, _ := json.Marshal(e)
	return string(data)
}
