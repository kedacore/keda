// Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

package swov1

// Generated from OpenAPI doc version 1.0.8 and generator version 2.647.2

import (
	"context"
	"fmt"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/config"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/hooks"
	"github.com/solarwinds/swo-sdk-go/swov1/internal/utils"
	"github.com/solarwinds/swo-sdk-go/swov1/models/components"
	"github.com/solarwinds/swo-sdk-go/swov1/retry"
	"net/http"
	"time"
)

// ServerList contains the list of servers available to the SDK
var ServerList = []string{
	// Regional endpoint
	"https://api.na-01.cloud.solarwinds.com",
}

// HTTPClient provides an interface for supplying the SDK with a custom HTTP client
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// String provides a helper function to return a pointer to a string
func String(s string) *string { return &s }

// Bool provides a helper function to return a pointer to a bool
func Bool(b bool) *bool { return &b }

// Int provides a helper function to return a pointer to an int
func Int(i int) *int { return &i }

// Int64 provides a helper function to return a pointer to an int64
func Int64(i int64) *int64 { return &i }

// Float32 provides a helper function to return a pointer to a float32
func Float32(f float32) *float32 { return &f }

// Float64 provides a helper function to return a pointer to a float64
func Float64(f float64) *float64 { return &f }

// Pointer provides a helper function to return a pointer to a type
func Pointer[T any](v T) *T { return &v }

// Swo - SolarWinds Observability: SolarWinds Observability REST API
// [Rest API Documentation](https://documentation.solarwinds.com/en/success_center/observability/content/api/api-swagger.htm)
type Swo struct {
	SDKVersion    string
	ChangeEvents  *ChangeEvents
	CloudAccounts *CloudAccounts
	Dbo           *Dbo
	Dem           *Dem
	Entities      *Entities
	Logs          *Logs
	Metadata      *Metadata
	Metrics       *Metrics
	Tokens        *Tokens

	sdkConfiguration config.SDKConfiguration
	hooks            *hooks.Hooks
}

type SDKOption func(*Swo)

// WithServerURL allows the overriding of the default server URL
func WithServerURL(serverURL string) SDKOption {
	return func(sdk *Swo) {
		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithTemplatedServerURL allows the overriding of the default server URL with a templated URL populated with the provided parameters
func WithTemplatedServerURL(serverURL string, params map[string]string) SDKOption {
	return func(sdk *Swo) {
		if params != nil {
			serverURL = utils.ReplaceParameters(serverURL, params)
		}

		sdk.sdkConfiguration.ServerURL = serverURL
	}
}

// WithServerIndex allows the overriding of the default server by index
func WithServerIndex(serverIndex int) SDKOption {
	return func(sdk *Swo) {
		if serverIndex < 0 || serverIndex >= len(ServerList) {
			panic(fmt.Errorf("server index %d out of range", serverIndex))
		}

		sdk.sdkConfiguration.ServerIndex = serverIndex
	}
}

// WithRegion allows setting the region variable for url substitution
func WithRegion(region string) SDKOption {
	return func(sdk *Swo) {
		for idx := range sdk.sdkConfiguration.ServerVariables {
			if _, ok := sdk.sdkConfiguration.ServerVariables[idx]["region"]; !ok {
				continue
			}

			sdk.sdkConfiguration.ServerVariables[idx]["region"] = fmt.Sprintf("%v", region)
		}
	}
}

// WithClient allows the overriding of the default HTTP client used by the SDK
func WithClient(client HTTPClient) SDKOption {
	return func(sdk *Swo) {
		sdk.sdkConfiguration.Client = client
	}
}

// WithSecurity configures the SDK to use the provided security details
func WithSecurity(apiToken string) SDKOption {
	return func(sdk *Swo) {
		security := components.Security{APIToken: &apiToken}
		sdk.sdkConfiguration.Security = utils.AsSecuritySource(&security)
	}
}

// WithSecuritySource configures the SDK to invoke the Security Source function on each method call to determine authentication
func WithSecuritySource(security func(context.Context) (components.Security, error)) SDKOption {
	return func(sdk *Swo) {
		sdk.sdkConfiguration.Security = func(ctx context.Context) (interface{}, error) {
			return security(ctx)
		}
	}
}

func WithRetryConfig(retryConfig retry.Config) SDKOption {
	return func(sdk *Swo) {
		sdk.sdkConfiguration.RetryConfig = &retryConfig
	}
}

// WithTimeout Optional request timeout applied to each operation
func WithTimeout(timeout time.Duration) SDKOption {
	return func(sdk *Swo) {
		sdk.sdkConfiguration.Timeout = &timeout
	}
}

// New creates a new instance of the SDK with the provided options
func New(opts ...SDKOption) *Swo {
	sdk := &Swo{
		SDKVersion: "0.3.0",
		sdkConfiguration: config.SDKConfiguration{
			UserAgent:  "speakeasy-sdk/go 0.3.0 2.647.2 1.0.8 github.com/solarwinds/swo-sdk-go/swov1",
			ServerList: ServerList,
			ServerVariables: []map[string]string{
				{
					"region": "na-01",
				},
			},
		},
		hooks: hooks.New(),
	}
	for _, opt := range opts {
		opt(sdk)
	}

	if sdk.sdkConfiguration.Security == nil {
		var envVarSecurity components.Security
		if utils.PopulateSecurityFromEnv(&envVarSecurity) {
			sdk.sdkConfiguration.Security = utils.AsSecuritySource(envVarSecurity)
		}
	}

	// Use WithClient to override the default client if you would like to customize the timeout
	if sdk.sdkConfiguration.Client == nil {
		sdk.sdkConfiguration.Client = &http.Client{Timeout: 60 * time.Second}
	}

	currentServerURL, _ := sdk.sdkConfiguration.GetServerDetails()
	serverURL := currentServerURL
	serverURL, sdk.sdkConfiguration.Client = sdk.hooks.SDKInit(currentServerURL, sdk.sdkConfiguration.Client)
	if currentServerURL != serverURL {
		sdk.sdkConfiguration.ServerURL = serverURL
	}

	sdk.ChangeEvents = newChangeEvents(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.CloudAccounts = newCloudAccounts(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Dbo = newDbo(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Dem = newDem(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Entities = newEntities(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Logs = newLogs(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Metadata = newMetadata(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Metrics = newMetrics(sdk, sdk.sdkConfiguration, sdk.hooks)
	sdk.Tokens = newTokens(sdk, sdk.sdkConfiguration, sdk.hooks)

	return sdk
}
