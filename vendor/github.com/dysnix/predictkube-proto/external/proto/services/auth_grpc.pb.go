// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v4.25.1
// source: proto/services/auth.proto

package services

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AuthService_CreateClient_FullMethodName        = "/services.AuthService/CreateClient"
	AuthService_UpdateClient_FullMethodName        = "/services.AuthService/UpdateClient"
	AuthService_DeleteClient_FullMethodName        = "/services.AuthService/DeleteClient"
	AuthService_GetClientData_FullMethodName       = "/services.AuthService/GetClientData"
	AuthService_AddCluster_FullMethodName          = "/services.AuthService/AddCluster"
	AuthService_UpdateCluster_FullMethodName       = "/services.AuthService/UpdateCluster"
	AuthService_DeleteCluster_FullMethodName       = "/services.AuthService/DeleteCluster"
	AuthService_GetCluster_FullMethodName          = "/services.AuthService/GetCluster"
	AuthService_AddResource_FullMethodName         = "/services.AuthService/AddResource"
	AuthService_UpdateResource_FullMethodName      = "/services.AuthService/UpdateResource"
	AuthService_DeleteResource_FullMethodName      = "/services.AuthService/DeleteResource"
	AuthService_GetResources_FullMethodName        = "/services.AuthService/GetResources"
	AuthService_GenerateToken_FullMethodName       = "/services.AuthService/GenerateToken"
	AuthService_RefreshToken_FullMethodName        = "/services.AuthService/RefreshToken"
	AuthService_InvalidateAllTokens_FullMethodName = "/services.AuthService/InvalidateAllTokens"
)

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	// TODO: add methods for get lists of any objects with optional filters and pagination...
	// client API
	CreateClient(ctx context.Context, in *ReqCreateClient, opts ...grpc.CallOption) (*ResCreateClient, error)
	UpdateClient(ctx context.Context, in *ReqUpdateClient, opts ...grpc.CallOption) (*ResUpdateClient, error)
	DeleteClient(ctx context.Context, in *ReqDeleteClient, opts ...grpc.CallOption) (*ResDeleteClient, error)
	GetClientData(ctx context.Context, in *ReqGetClientData, opts ...grpc.CallOption) (*ResGetClientData, error)
	// cluster API
	AddCluster(ctx context.Context, in *ReqAddCluster, opts ...grpc.CallOption) (*ResAddCluster, error)
	UpdateCluster(ctx context.Context, in *ReqUpdateCluster, opts ...grpc.CallOption) (*ResUpdateCluster, error)
	DeleteCluster(ctx context.Context, in *ReqDeleteCluster, opts ...grpc.CallOption) (*ResDeleteCluster, error)
	GetCluster(ctx context.Context, in *ReqGetCluster, opts ...grpc.CallOption) (*ResGetCluster, error)
	// resource API
	AddResource(ctx context.Context, in *ReqAddResource, opts ...grpc.CallOption) (*ResAddResource, error)
	UpdateResource(ctx context.Context, in *ReqUpdateResource, opts ...grpc.CallOption) (*ResUpdateResource, error)
	DeleteResource(ctx context.Context, in *ReqDeleteResource, opts ...grpc.CallOption) (*ResDeleteResource, error)
	GetResources(ctx context.Context, in *ReqGetResources, opts ...grpc.CallOption) (*ResGetResources, error)
	// token API
	GenerateToken(ctx context.Context, in *ReqGenerateToken, opts ...grpc.CallOption) (*ResGenerateToken, error)
	RefreshToken(ctx context.Context, in *ReqRefreshToken, opts ...grpc.CallOption) (*ResRefreshToken, error)
	InvalidateAllTokens(ctx context.Context, in *ReqInvalidateAllTokens, opts ...grpc.CallOption) (*ResInvalidateAllTokens, error)
}

type authServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServiceClient(cc grpc.ClientConnInterface) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) CreateClient(ctx context.Context, in *ReqCreateClient, opts ...grpc.CallOption) (*ResCreateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResCreateClient)
	err := c.cc.Invoke(ctx, AuthService_CreateClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateClient(ctx context.Context, in *ReqUpdateClient, opts ...grpc.CallOption) (*ResUpdateClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResUpdateClient)
	err := c.cc.Invoke(ctx, AuthService_UpdateClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteClient(ctx context.Context, in *ReqDeleteClient, opts ...grpc.CallOption) (*ResDeleteClient, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResDeleteClient)
	err := c.cc.Invoke(ctx, AuthService_DeleteClient_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetClientData(ctx context.Context, in *ReqGetClientData, opts ...grpc.CallOption) (*ResGetClientData, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGetClientData)
	err := c.cc.Invoke(ctx, AuthService_GetClientData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AddCluster(ctx context.Context, in *ReqAddCluster, opts ...grpc.CallOption) (*ResAddCluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAddCluster)
	err := c.cc.Invoke(ctx, AuthService_AddCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateCluster(ctx context.Context, in *ReqUpdateCluster, opts ...grpc.CallOption) (*ResUpdateCluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResUpdateCluster)
	err := c.cc.Invoke(ctx, AuthService_UpdateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteCluster(ctx context.Context, in *ReqDeleteCluster, opts ...grpc.CallOption) (*ResDeleteCluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResDeleteCluster)
	err := c.cc.Invoke(ctx, AuthService_DeleteCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetCluster(ctx context.Context, in *ReqGetCluster, opts ...grpc.CallOption) (*ResGetCluster, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGetCluster)
	err := c.cc.Invoke(ctx, AuthService_GetCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) AddResource(ctx context.Context, in *ReqAddResource, opts ...grpc.CallOption) (*ResAddResource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResAddResource)
	err := c.cc.Invoke(ctx, AuthService_AddResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) UpdateResource(ctx context.Context, in *ReqUpdateResource, opts ...grpc.CallOption) (*ResUpdateResource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResUpdateResource)
	err := c.cc.Invoke(ctx, AuthService_UpdateResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) DeleteResource(ctx context.Context, in *ReqDeleteResource, opts ...grpc.CallOption) (*ResDeleteResource, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResDeleteResource)
	err := c.cc.Invoke(ctx, AuthService_DeleteResource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GetResources(ctx context.Context, in *ReqGetResources, opts ...grpc.CallOption) (*ResGetResources, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGetResources)
	err := c.cc.Invoke(ctx, AuthService_GetResources_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) GenerateToken(ctx context.Context, in *ReqGenerateToken, opts ...grpc.CallOption) (*ResGenerateToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResGenerateToken)
	err := c.cc.Invoke(ctx, AuthService_GenerateToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) RefreshToken(ctx context.Context, in *ReqRefreshToken, opts ...grpc.CallOption) (*ResRefreshToken, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResRefreshToken)
	err := c.cc.Invoke(ctx, AuthService_RefreshToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authServiceClient) InvalidateAllTokens(ctx context.Context, in *ReqInvalidateAllTokens, opts ...grpc.CallOption) (*ResInvalidateAllTokens, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResInvalidateAllTokens)
	err := c.cc.Invoke(ctx, AuthService_InvalidateAllTokens_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility.
type AuthServiceServer interface {
	// TODO: add methods for get lists of any objects with optional filters and pagination...
	// client API
	CreateClient(context.Context, *ReqCreateClient) (*ResCreateClient, error)
	UpdateClient(context.Context, *ReqUpdateClient) (*ResUpdateClient, error)
	DeleteClient(context.Context, *ReqDeleteClient) (*ResDeleteClient, error)
	GetClientData(context.Context, *ReqGetClientData) (*ResGetClientData, error)
	// cluster API
	AddCluster(context.Context, *ReqAddCluster) (*ResAddCluster, error)
	UpdateCluster(context.Context, *ReqUpdateCluster) (*ResUpdateCluster, error)
	DeleteCluster(context.Context, *ReqDeleteCluster) (*ResDeleteCluster, error)
	GetCluster(context.Context, *ReqGetCluster) (*ResGetCluster, error)
	// resource API
	AddResource(context.Context, *ReqAddResource) (*ResAddResource, error)
	UpdateResource(context.Context, *ReqUpdateResource) (*ResUpdateResource, error)
	DeleteResource(context.Context, *ReqDeleteResource) (*ResDeleteResource, error)
	GetResources(context.Context, *ReqGetResources) (*ResGetResources, error)
	// token API
	GenerateToken(context.Context, *ReqGenerateToken) (*ResGenerateToken, error)
	RefreshToken(context.Context, *ReqRefreshToken) (*ResRefreshToken, error)
	InvalidateAllTokens(context.Context, *ReqInvalidateAllTokens) (*ResInvalidateAllTokens, error)
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServiceServer struct{}

func (UnimplementedAuthServiceServer) CreateClient(context.Context, *ReqCreateClient) (*ResCreateClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateClient not implemented")
}
func (UnimplementedAuthServiceServer) UpdateClient(context.Context, *ReqUpdateClient) (*ResUpdateClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateClient not implemented")
}
func (UnimplementedAuthServiceServer) DeleteClient(context.Context, *ReqDeleteClient) (*ResDeleteClient, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteClient not implemented")
}
func (UnimplementedAuthServiceServer) GetClientData(context.Context, *ReqGetClientData) (*ResGetClientData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientData not implemented")
}
func (UnimplementedAuthServiceServer) AddCluster(context.Context, *ReqAddCluster) (*ResAddCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCluster not implemented")
}
func (UnimplementedAuthServiceServer) UpdateCluster(context.Context, *ReqUpdateCluster) (*ResUpdateCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCluster not implemented")
}
func (UnimplementedAuthServiceServer) DeleteCluster(context.Context, *ReqDeleteCluster) (*ResDeleteCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCluster not implemented")
}
func (UnimplementedAuthServiceServer) GetCluster(context.Context, *ReqGetCluster) (*ResGetCluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCluster not implemented")
}
func (UnimplementedAuthServiceServer) AddResource(context.Context, *ReqAddResource) (*ResAddResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddResource not implemented")
}
func (UnimplementedAuthServiceServer) UpdateResource(context.Context, *ReqUpdateResource) (*ResUpdateResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateResource not implemented")
}
func (UnimplementedAuthServiceServer) DeleteResource(context.Context, *ReqDeleteResource) (*ResDeleteResource, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteResource not implemented")
}
func (UnimplementedAuthServiceServer) GetResources(context.Context, *ReqGetResources) (*ResGetResources, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResources not implemented")
}
func (UnimplementedAuthServiceServer) GenerateToken(context.Context, *ReqGenerateToken) (*ResGenerateToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateToken not implemented")
}
func (UnimplementedAuthServiceServer) RefreshToken(context.Context, *ReqRefreshToken) (*ResRefreshToken, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}
func (UnimplementedAuthServiceServer) InvalidateAllTokens(context.Context, *ReqInvalidateAllTokens) (*ResInvalidateAllTokens, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InvalidateAllTokens not implemented")
}
func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}
func (UnimplementedAuthServiceServer) testEmbeddedByValue()                     {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc.ServiceRegistrar, srv AuthServiceServer) {
	// If the following call pancis, it indicates UnimplementedAuthServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_CreateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqCreateClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).CreateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_CreateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).CreateClient(ctx, req.(*ReqCreateClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateClient(ctx, req.(*ReqUpdateClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteClient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteClient)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteClient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteClient_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteClient(ctx, req.(*ReqDeleteClient))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetClientData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetClientData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetClientData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetClientData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetClientData(ctx, req.(*ReqGetClientData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AddCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AddCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AddCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AddCluster(ctx, req.(*ReqAddCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateCluster(ctx, req.(*ReqUpdateCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteCluster(ctx, req.(*ReqDeleteCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetCluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetCluster(ctx, req.(*ReqGetCluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_AddResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqAddResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).AddResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_AddResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).AddResource(ctx, req.(*ReqAddResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_UpdateResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqUpdateResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).UpdateResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_UpdateResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).UpdateResource(ctx, req.(*ReqUpdateResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_DeleteResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqDeleteResource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).DeleteResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_DeleteResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).DeleteResource(ctx, req.(*ReqDeleteResource))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GetResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGetResources)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GetResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GetResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GetResources(ctx, req.(*ReqGetResources))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_GenerateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqGenerateToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).GenerateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_GenerateToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).GenerateToken(ctx, req.(*ReqGenerateToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqRefreshToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).RefreshToken(ctx, req.(*ReqRefreshToken))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthService_InvalidateAllTokens_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqInvalidateAllTokens)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServiceServer).InvalidateAllTokens(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthService_InvalidateAllTokens_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServiceServer).InvalidateAllTokens(ctx, req.(*ReqInvalidateAllTokens))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthService_ServiceDesc is the grpc.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "services.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateClient",
			Handler:    _AuthService_CreateClient_Handler,
		},
		{
			MethodName: "UpdateClient",
			Handler:    _AuthService_UpdateClient_Handler,
		},
		{
			MethodName: "DeleteClient",
			Handler:    _AuthService_DeleteClient_Handler,
		},
		{
			MethodName: "GetClientData",
			Handler:    _AuthService_GetClientData_Handler,
		},
		{
			MethodName: "AddCluster",
			Handler:    _AuthService_AddCluster_Handler,
		},
		{
			MethodName: "UpdateCluster",
			Handler:    _AuthService_UpdateCluster_Handler,
		},
		{
			MethodName: "DeleteCluster",
			Handler:    _AuthService_DeleteCluster_Handler,
		},
		{
			MethodName: "GetCluster",
			Handler:    _AuthService_GetCluster_Handler,
		},
		{
			MethodName: "AddResource",
			Handler:    _AuthService_AddResource_Handler,
		},
		{
			MethodName: "UpdateResource",
			Handler:    _AuthService_UpdateResource_Handler,
		},
		{
			MethodName: "DeleteResource",
			Handler:    _AuthService_DeleteResource_Handler,
		},
		{
			MethodName: "GetResources",
			Handler:    _AuthService_GetResources_Handler,
		},
		{
			MethodName: "GenerateToken",
			Handler:    _AuthService_GenerateToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _AuthService_RefreshToken_Handler,
		},
		{
			MethodName: "InvalidateAllTokens",
			Handler:    _AuthService_InvalidateAllTokens_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/services/auth.proto",
}
