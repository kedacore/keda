//go:build go1.18
// +build go1.18

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.
// Code generated by Microsoft (R) AutoRest Code Generator. DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package armmonitor

// ActionGroupsClientBeginCreateNotificationsAtActionGroupResourceLevelOptions contains the optional parameters for the ActionGroupsClient.BeginCreateNotificationsAtActionGroupResourceLevel
// method.
type ActionGroupsClientBeginCreateNotificationsAtActionGroupResourceLevelOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// ActionGroupsClientCreateOrUpdateOptions contains the optional parameters for the ActionGroupsClient.CreateOrUpdate method.
type ActionGroupsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ActionGroupsClientDeleteOptions contains the optional parameters for the ActionGroupsClient.Delete method.
type ActionGroupsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ActionGroupsClientEnableReceiverOptions contains the optional parameters for the ActionGroupsClient.EnableReceiver method.
type ActionGroupsClientEnableReceiverOptions struct {
	// placeholder for future optional parameters
}

// ActionGroupsClientGetOptions contains the optional parameters for the ActionGroupsClient.Get method.
type ActionGroupsClientGetOptions struct {
	// placeholder for future optional parameters
}

// ActionGroupsClientGetTestNotificationsAtActionGroupResourceLevelOptions contains the optional parameters for the ActionGroupsClient.GetTestNotificationsAtActionGroupResourceLevel
// method.
type ActionGroupsClientGetTestNotificationsAtActionGroupResourceLevelOptions struct {
	// placeholder for future optional parameters
}

// ActionGroupsClientListByResourceGroupOptions contains the optional parameters for the ActionGroupsClient.NewListByResourceGroupPager
// method.
type ActionGroupsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ActionGroupsClientListBySubscriptionIDOptions contains the optional parameters for the ActionGroupsClient.NewListBySubscriptionIDPager
// method.
type ActionGroupsClientListBySubscriptionIDOptions struct {
	// placeholder for future optional parameters
}

// ActionGroupsClientUpdateOptions contains the optional parameters for the ActionGroupsClient.Update method.
type ActionGroupsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// ActivityLogAlertsClientCreateOrUpdateOptions contains the optional parameters for the ActivityLogAlertsClient.CreateOrUpdate
// method.
type ActivityLogAlertsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ActivityLogAlertsClientDeleteOptions contains the optional parameters for the ActivityLogAlertsClient.Delete method.
type ActivityLogAlertsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ActivityLogAlertsClientGetOptions contains the optional parameters for the ActivityLogAlertsClient.Get method.
type ActivityLogAlertsClientGetOptions struct {
	// placeholder for future optional parameters
}

// ActivityLogAlertsClientListByResourceGroupOptions contains the optional parameters for the ActivityLogAlertsClient.NewListByResourceGroupPager
// method.
type ActivityLogAlertsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ActivityLogAlertsClientListBySubscriptionIDOptions contains the optional parameters for the ActivityLogAlertsClient.NewListBySubscriptionIDPager
// method.
type ActivityLogAlertsClientListBySubscriptionIDOptions struct {
	// placeholder for future optional parameters
}

// ActivityLogAlertsClientUpdateOptions contains the optional parameters for the ActivityLogAlertsClient.Update method.
type ActivityLogAlertsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// ActivityLogsClientListOptions contains the optional parameters for the ActivityLogsClient.NewListPager method.
type ActivityLogsClientListOptions struct {
	// Used to fetch events with only the given properties.
	// The $select argument is a comma separated list of property names to be returned. Possible values are: authorization, claims,
	// correlationId, description, eventDataId, eventName, eventTimestamp,
	// httpRequest, level, operationId, operationName, properties, resourceGroupName, resourceProviderName, resourceId, status,
	// submissionTimestamp, subStatus, subscriptionId
	Select *string
}

// AlertRuleIncidentsClientGetOptions contains the optional parameters for the AlertRuleIncidentsClient.Get method.
type AlertRuleIncidentsClientGetOptions struct {
	// placeholder for future optional parameters
}

// AlertRuleIncidentsClientListByAlertRuleOptions contains the optional parameters for the AlertRuleIncidentsClient.NewListByAlertRulePager
// method.
type AlertRuleIncidentsClientListByAlertRuleOptions struct {
	// placeholder for future optional parameters
}

// AlertRulesClientCreateOrUpdateOptions contains the optional parameters for the AlertRulesClient.CreateOrUpdate method.
type AlertRulesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AlertRulesClientDeleteOptions contains the optional parameters for the AlertRulesClient.Delete method.
type AlertRulesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// AlertRulesClientGetOptions contains the optional parameters for the AlertRulesClient.Get method.
type AlertRulesClientGetOptions struct {
	// placeholder for future optional parameters
}

// AlertRulesClientListByResourceGroupOptions contains the optional parameters for the AlertRulesClient.NewListByResourceGroupPager
// method.
type AlertRulesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AlertRulesClientListBySubscriptionOptions contains the optional parameters for the AlertRulesClient.NewListBySubscriptionPager
// method.
type AlertRulesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// AlertRulesClientUpdateOptions contains the optional parameters for the AlertRulesClient.Update method.
type AlertRulesClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// AutoscaleSettingsClientCreateOrUpdateOptions contains the optional parameters for the AutoscaleSettingsClient.CreateOrUpdate
// method.
type AutoscaleSettingsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// AutoscaleSettingsClientDeleteOptions contains the optional parameters for the AutoscaleSettingsClient.Delete method.
type AutoscaleSettingsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// AutoscaleSettingsClientGetOptions contains the optional parameters for the AutoscaleSettingsClient.Get method.
type AutoscaleSettingsClientGetOptions struct {
	// placeholder for future optional parameters
}

// AutoscaleSettingsClientListByResourceGroupOptions contains the optional parameters for the AutoscaleSettingsClient.NewListByResourceGroupPager
// method.
type AutoscaleSettingsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AutoscaleSettingsClientListBySubscriptionOptions contains the optional parameters for the AutoscaleSettingsClient.NewListBySubscriptionPager
// method.
type AutoscaleSettingsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// AutoscaleSettingsClientUpdateOptions contains the optional parameters for the AutoscaleSettingsClient.Update method.
type AutoscaleSettingsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// AzureMonitorWorkspacesClientCreateOptions contains the optional parameters for the AzureMonitorWorkspacesClient.Create
// method.
type AzureMonitorWorkspacesClientCreateOptions struct {
	// placeholder for future optional parameters
}

// AzureMonitorWorkspacesClientDeleteOptions contains the optional parameters for the AzureMonitorWorkspacesClient.Delete
// method.
type AzureMonitorWorkspacesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// AzureMonitorWorkspacesClientGetOptions contains the optional parameters for the AzureMonitorWorkspacesClient.Get method.
type AzureMonitorWorkspacesClientGetOptions struct {
	// placeholder for future optional parameters
}

// AzureMonitorWorkspacesClientListByResourceGroupOptions contains the optional parameters for the AzureMonitorWorkspacesClient.NewListByResourceGroupPager
// method.
type AzureMonitorWorkspacesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// AzureMonitorWorkspacesClientListBySubscriptionOptions contains the optional parameters for the AzureMonitorWorkspacesClient.NewListBySubscriptionPager
// method.
type AzureMonitorWorkspacesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// AzureMonitorWorkspacesClientUpdateOptions contains the optional parameters for the AzureMonitorWorkspacesClient.Update
// method.
type AzureMonitorWorkspacesClientUpdateOptions struct {
	// The payload
	AzureMonitorWorkspaceProperties *AzureMonitorWorkspaceResourceForUpdate
}

// BaselinesClientListOptions contains the optional parameters for the BaselinesClient.NewListPager method.
type BaselinesClientListOptions struct {
	// The list of aggregation types (comma separated) to retrieve.
	Aggregation *string

	// The $filter is used to reduce the set of metric data returned. Example: Metric contains metadata A, B and C. - Return all
	// time series of C where A = a1 and B = b1 or b2 $filter=A eq 'a1' and B eq 'b1'
	// or B eq 'b2' and C eq '' - Invalid variant: $filter=A eq 'a1' and B eq 'b1' and C eq '' or B = 'b2' This is invalid because
	// the logical or operator cannot separate two different metadata names. -
	// Return all time series where A = a1, B = b1 and C = c1: $filter=A eq 'a1' and B eq 'b1' and C eq 'c1' - Return all time
	// series where A = a1 $filter=A eq 'a1' and B eq '' and C eq ''. Special case:
	// When dimension name or dimension value uses round brackets. Eg: When dimension name is dim (test) 1 Instead of using $filter=
	// "dim (test) 1 eq '' " use $filter= "dim %2528test%2529 1 eq '' " When
	// dimension name is dim (test) 3 and dimension value is dim3 (test) val Instead of using $filter= "dim (test) 3 eq 'dim3
	// (test) val' " use $filter= "dim %2528test%2529 3 eq 'dim3 %2528test%2529 val' "
	Filter *string

	// The interval (i.e. timegrain) of the query.
	Interval *string

	// The names of the metrics (comma separated) to retrieve. Special case: If a metricname itself has a comma in it then use
	// %2 to indicate it. Eg: 'Metric,Name1' should be 'Metric%2Name1'
	Metricnames *string

	// Metric namespace to query metric definitions for.
	Metricnamespace *string

	// Allows retrieving only metadata of the baseline. On data request all information is retrieved.
	ResultType *ResultType

	// The list of sensitivities (comma separated) to retrieve.
	Sensitivities *string

	// The timespan of the query. It is a string with the following format 'startDateTimeISO/endDateTimeISO'.
	Timespan *string
}

// DataCollectionEndpointsClientCreateOptions contains the optional parameters for the DataCollectionEndpointsClient.Create
// method.
type DataCollectionEndpointsClientCreateOptions struct {
	// The payload
	Body *DataCollectionEndpointResource
}

// DataCollectionEndpointsClientDeleteOptions contains the optional parameters for the DataCollectionEndpointsClient.Delete
// method.
type DataCollectionEndpointsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionEndpointsClientGetOptions contains the optional parameters for the DataCollectionEndpointsClient.Get method.
type DataCollectionEndpointsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionEndpointsClientListByResourceGroupOptions contains the optional parameters for the DataCollectionEndpointsClient.NewListByResourceGroupPager
// method.
type DataCollectionEndpointsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionEndpointsClientListBySubscriptionOptions contains the optional parameters for the DataCollectionEndpointsClient.NewListBySubscriptionPager
// method.
type DataCollectionEndpointsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionEndpointsClientUpdateOptions contains the optional parameters for the DataCollectionEndpointsClient.Update
// method.
type DataCollectionEndpointsClientUpdateOptions struct {
	// The payload
	Body *ResourceForUpdate
}

// DataCollectionRuleAssociationsClientCreateOptions contains the optional parameters for the DataCollectionRuleAssociationsClient.Create
// method.
type DataCollectionRuleAssociationsClientCreateOptions struct {
	// The payload
	Body *DataCollectionRuleAssociationProxyOnlyResource
}

// DataCollectionRuleAssociationsClientDeleteOptions contains the optional parameters for the DataCollectionRuleAssociationsClient.Delete
// method.
type DataCollectionRuleAssociationsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionRuleAssociationsClientGetOptions contains the optional parameters for the DataCollectionRuleAssociationsClient.Get
// method.
type DataCollectionRuleAssociationsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionRuleAssociationsClientListByDataCollectionEndpointOptions contains the optional parameters for the DataCollectionRuleAssociationsClient.NewListByDataCollectionEndpointPager
// method.
type DataCollectionRuleAssociationsClientListByDataCollectionEndpointOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionRuleAssociationsClientListByResourceOptions contains the optional parameters for the DataCollectionRuleAssociationsClient.NewListByResourcePager
// method.
type DataCollectionRuleAssociationsClientListByResourceOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionRuleAssociationsClientListByRuleOptions contains the optional parameters for the DataCollectionRuleAssociationsClient.NewListByRulePager
// method.
type DataCollectionRuleAssociationsClientListByRuleOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionRulesClientCreateOptions contains the optional parameters for the DataCollectionRulesClient.Create method.
type DataCollectionRulesClientCreateOptions struct {
	// The payload
	Body *DataCollectionRuleResource
}

// DataCollectionRulesClientDeleteOptions contains the optional parameters for the DataCollectionRulesClient.Delete method.
type DataCollectionRulesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionRulesClientGetOptions contains the optional parameters for the DataCollectionRulesClient.Get method.
type DataCollectionRulesClientGetOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionRulesClientListByResourceGroupOptions contains the optional parameters for the DataCollectionRulesClient.NewListByResourceGroupPager
// method.
type DataCollectionRulesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionRulesClientListBySubscriptionOptions contains the optional parameters for the DataCollectionRulesClient.NewListBySubscriptionPager
// method.
type DataCollectionRulesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// DataCollectionRulesClientUpdateOptions contains the optional parameters for the DataCollectionRulesClient.Update method.
type DataCollectionRulesClientUpdateOptions struct {
	// The payload
	Body *ResourceForUpdate
}

// DiagnosticSettingsCategoryClientGetOptions contains the optional parameters for the DiagnosticSettingsCategoryClient.Get
// method.
type DiagnosticSettingsCategoryClientGetOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticSettingsCategoryClientListOptions contains the optional parameters for the DiagnosticSettingsCategoryClient.NewListPager
// method.
type DiagnosticSettingsCategoryClientListOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticSettingsClientCreateOrUpdateOptions contains the optional parameters for the DiagnosticSettingsClient.CreateOrUpdate
// method.
type DiagnosticSettingsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticSettingsClientDeleteOptions contains the optional parameters for the DiagnosticSettingsClient.Delete method.
type DiagnosticSettingsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticSettingsClientGetOptions contains the optional parameters for the DiagnosticSettingsClient.Get method.
type DiagnosticSettingsClientGetOptions struct {
	// placeholder for future optional parameters
}

// DiagnosticSettingsClientListOptions contains the optional parameters for the DiagnosticSettingsClient.NewListPager method.
type DiagnosticSettingsClientListOptions struct {
	// placeholder for future optional parameters
}

// EventCategoriesClientListOptions contains the optional parameters for the EventCategoriesClient.NewListPager method.
type EventCategoriesClientListOptions struct {
	// placeholder for future optional parameters
}

// LogProfilesClientCreateOrUpdateOptions contains the optional parameters for the LogProfilesClient.CreateOrUpdate method.
type LogProfilesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// LogProfilesClientDeleteOptions contains the optional parameters for the LogProfilesClient.Delete method.
type LogProfilesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// LogProfilesClientGetOptions contains the optional parameters for the LogProfilesClient.Get method.
type LogProfilesClientGetOptions struct {
	// placeholder for future optional parameters
}

// LogProfilesClientListOptions contains the optional parameters for the LogProfilesClient.NewListPager method.
type LogProfilesClientListOptions struct {
	// placeholder for future optional parameters
}

// LogProfilesClientUpdateOptions contains the optional parameters for the LogProfilesClient.Update method.
type LogProfilesClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// MetricAlertsClientCreateOrUpdateOptions contains the optional parameters for the MetricAlertsClient.CreateOrUpdate method.
type MetricAlertsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// MetricAlertsClientDeleteOptions contains the optional parameters for the MetricAlertsClient.Delete method.
type MetricAlertsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// MetricAlertsClientGetOptions contains the optional parameters for the MetricAlertsClient.Get method.
type MetricAlertsClientGetOptions struct {
	// placeholder for future optional parameters
}

// MetricAlertsClientListByResourceGroupOptions contains the optional parameters for the MetricAlertsClient.NewListByResourceGroupPager
// method.
type MetricAlertsClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// MetricAlertsClientListBySubscriptionOptions contains the optional parameters for the MetricAlertsClient.NewListBySubscriptionPager
// method.
type MetricAlertsClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// MetricAlertsClientUpdateOptions contains the optional parameters for the MetricAlertsClient.Update method.
type MetricAlertsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// MetricAlertsStatusClientListByNameOptions contains the optional parameters for the MetricAlertsStatusClient.ListByName
// method.
type MetricAlertsStatusClientListByNameOptions struct {
	// placeholder for future optional parameters
}

// MetricAlertsStatusClientListOptions contains the optional parameters for the MetricAlertsStatusClient.List method.
type MetricAlertsStatusClientListOptions struct {
	// placeholder for future optional parameters
}

// MetricDefinitionsClientListAtSubscriptionScopeOptions contains the optional parameters for the MetricDefinitionsClient.NewListAtSubscriptionScopePager
// method.
type MetricDefinitionsClientListAtSubscriptionScopeOptions struct {
	// Metric namespace where the metrics you want reside.
	Metricnamespace *string
}

// MetricDefinitionsClientListOptions contains the optional parameters for the MetricDefinitionsClient.NewListPager method.
type MetricDefinitionsClientListOptions struct {
	// Metric namespace where the metrics you want reside.
	Metricnamespace *string
}

// MetricNamespacesClientListOptions contains the optional parameters for the MetricNamespacesClient.NewListPager method.
type MetricNamespacesClientListOptions struct {
	// The ISO 8601 conform Date start time from which to query for metric namespaces.
	StartTime *string
}

// MetricsClientListAtSubscriptionScopeOptions contains the optional parameters for the MetricsClient.ListAtSubscriptionScope
// method.
type MetricsClientListAtSubscriptionScopeOptions struct {
	// The list of aggregation types (comma separated) to retrieve.
	Aggregation *string

	// When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest
	// supported timespan. When set to false, an error is returned for invalid
	// timespan parameters. Defaults to false.
	AutoAdjustTimegrain *bool

	// The $filter is used to reduce the set of metric data returned.
	// Example:
	// Metric contains metadata A, B and C.
	// - Return all time series of C where A = a1 and B = b1 or b2
	// $filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘’
	// - Invalid variant:
	// $filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘’ or B = ‘b2’
	// This is invalid because the logical or operator cannot separate two different metadata names.
	// - Return all time series where A = a1, B = b1 and C = c1:
	// $filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’
	// - Return all time series where A = a1
	// $filter=A eq ‘a1’ and B eq ‘’ and C eq ‘’.
	Filter *string

	// The interval (i.e. timegrain) of the query.
	Interval *string

	// The names of the metrics (comma separated) to retrieve.
	Metricnames *string

	// Metric namespace where the metrics you want reside.
	Metricnamespace *string

	// The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum
	// asc.
	Orderby *string

	// Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
	ResultType *MetricResultType

	// The timespan of the query. It is a string with the following format 'startDateTimeISO/endDateTimeISO'.
	Timespan *string

	// The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.
	Top *int32

	// When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid
	// filter parameters. Defaults to true.
	ValidateDimensions *bool
}

// MetricsClientListAtSubscriptionScopePostOptions contains the optional parameters for the MetricsClient.ListAtSubscriptionScopePost
// method.
type MetricsClientListAtSubscriptionScopePostOptions struct {
	// The list of aggregation types (comma separated) to retrieve.
	Aggregation *string

	// When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest
	// supported timespan. When set to false, an error is returned for invalid
	// timespan parameters. Defaults to false.
	AutoAdjustTimegrain *bool

	// Parameters serialized in the body
	Body *SubscriptionScopeMetricsRequestBodyParameters

	// The $filter is used to reduce the set of metric data returned.
	// Example:
	// Metric contains metadata A, B and C.
	// - Return all time series of C where A = a1 and B = b1 or b2
	// $filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘’
	// - Invalid variant:
	// $filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘’ or B = ‘b2’
	// This is invalid because the logical or operator cannot separate two different metadata names.
	// - Return all time series where A = a1, B = b1 and C = c1:
	// $filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’
	// - Return all time series where A = a1
	// $filter=A eq ‘a1’ and B eq ‘’ and C eq ‘’.
	Filter *string

	// The interval (i.e. timegrain) of the query.
	Interval *string

	// The names of the metrics (comma separated) to retrieve.
	Metricnames *string

	// Metric namespace where the metrics you want reside.
	Metricnamespace *string

	// The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum
	// asc.
	Orderby *string

	// Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
	ResultType *MetricResultType

	// The timespan of the query. It is a string with the following format 'startDateTimeISO/endDateTimeISO'.
	Timespan *string

	// The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.
	Top *int32

	// When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid
	// filter parameters. Defaults to true.
	ValidateDimensions *bool
}

// MetricsClientListOptions contains the optional parameters for the MetricsClient.List method.
type MetricsClientListOptions struct {
	// The list of aggregation types (comma separated) to retrieve.
	Aggregation *string

	// When set to true, if the timespan passed in is not supported by this metric, the API will return the result using the closest
	// supported timespan. When set to false, an error is returned for invalid
	// timespan parameters. Defaults to false.
	AutoAdjustTimegrain *bool

	// The $filter is used to reduce the set of metric data returned.
	// Example:
	// Metric contains metadata A, B and C.
	// - Return all time series of C where A = a1 and B = b1 or b2
	// $filter=A eq ‘a1’ and B eq ‘b1’ or B eq ‘b2’ and C eq ‘’
	// - Invalid variant:
	// $filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘’ or B = ‘b2’
	// This is invalid because the logical or operator cannot separate two different metadata names.
	// - Return all time series where A = a1, B = b1 and C = c1:
	// $filter=A eq ‘a1’ and B eq ‘b1’ and C eq ‘c1’
	// - Return all time series where A = a1
	// $filter=A eq ‘a1’ and B eq ‘’ and C eq ‘’.
	Filter *string

	// The interval (i.e. timegrain) of the query.
	Interval *string

	// The names of the metrics (comma separated) to retrieve.
	Metricnames *string

	// Metric namespace where the metrics you want reside.
	Metricnamespace *string

	// The aggregation to use for sorting results and the direction of the sort. Only one order can be specified. Examples: sum
	// asc.
	Orderby *string

	// Reduces the set of data collected. The syntax allowed depends on the operation. See the operation's description for details.
	ResultType *ResultType

	// The timespan of the query. It is a string with the following format 'startDateTimeISO/endDateTimeISO'.
	Timespan *string

	// The maximum number of records to retrieve. Valid only if $filter is specified. Defaults to 10.
	Top *int32

	// When set to false, invalid filter parameter values will be ignored. When set to true, an error is returned for invalid
	// filter parameters. Defaults to true.
	ValidateDimensions *bool
}

// OperationsClientListOptions contains the optional parameters for the OperationsClient.List method.
type OperationsClientListOptions struct {
	// placeholder for future optional parameters
}

// OperationsForMonitorClientListOptions contains the optional parameters for the OperationsForMonitorClient.NewListPager
// method.
type OperationsForMonitorClientListOptions struct {
	// placeholder for future optional parameters
}

// PredictiveMetricClientGetOptions contains the optional parameters for the PredictiveMetricClient.Get method.
type PredictiveMetricClientGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions contains the optional parameters for the PrivateEndpointConnectionsClient.BeginCreateOrUpdate
// method.
type PrivateEndpointConnectionsClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PrivateEndpointConnectionsClientBeginDeleteOptions contains the optional parameters for the PrivateEndpointConnectionsClient.BeginDelete
// method.
type PrivateEndpointConnectionsClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PrivateEndpointConnectionsClientGetOptions contains the optional parameters for the PrivateEndpointConnectionsClient.Get
// method.
type PrivateEndpointConnectionsClientGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateEndpointConnectionsClientListByPrivateLinkScopeOptions contains the optional parameters for the PrivateEndpointConnectionsClient.ListByPrivateLinkScope
// method.
type PrivateEndpointConnectionsClientListByPrivateLinkScopeOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResourcesClientGetOptions contains the optional parameters for the PrivateLinkResourcesClient.Get method.
type PrivateLinkResourcesClientGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkResourcesClientListByPrivateLinkScopeOptions contains the optional parameters for the PrivateLinkResourcesClient.ListByPrivateLinkScope
// method.
type PrivateLinkResourcesClientListByPrivateLinkScopeOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkScopeOperationStatusClientGetOptions contains the optional parameters for the PrivateLinkScopeOperationStatusClient.Get
// method.
type PrivateLinkScopeOperationStatusClientGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkScopedResourcesClientBeginCreateOrUpdateOptions contains the optional parameters for the PrivateLinkScopedResourcesClient.BeginCreateOrUpdate
// method.
type PrivateLinkScopedResourcesClientBeginCreateOrUpdateOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PrivateLinkScopedResourcesClientBeginDeleteOptions contains the optional parameters for the PrivateLinkScopedResourcesClient.BeginDelete
// method.
type PrivateLinkScopedResourcesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PrivateLinkScopedResourcesClientGetOptions contains the optional parameters for the PrivateLinkScopedResourcesClient.Get
// method.
type PrivateLinkScopedResourcesClientGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkScopedResourcesClientListByPrivateLinkScopeOptions contains the optional parameters for the PrivateLinkScopedResourcesClient.NewListByPrivateLinkScopePager
// method.
type PrivateLinkScopedResourcesClientListByPrivateLinkScopeOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkScopesClientBeginDeleteOptions contains the optional parameters for the PrivateLinkScopesClient.BeginDelete
// method.
type PrivateLinkScopesClientBeginDeleteOptions struct {
	// Resumes the LRO from the provided token.
	ResumeToken string
}

// PrivateLinkScopesClientCreateOrUpdateOptions contains the optional parameters for the PrivateLinkScopesClient.CreateOrUpdate
// method.
type PrivateLinkScopesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkScopesClientGetOptions contains the optional parameters for the PrivateLinkScopesClient.Get method.
type PrivateLinkScopesClientGetOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkScopesClientListByResourceGroupOptions contains the optional parameters for the PrivateLinkScopesClient.NewListByResourceGroupPager
// method.
type PrivateLinkScopesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkScopesClientListOptions contains the optional parameters for the PrivateLinkScopesClient.NewListPager method.
type PrivateLinkScopesClientListOptions struct {
	// placeholder for future optional parameters
}

// PrivateLinkScopesClientUpdateTagsOptions contains the optional parameters for the PrivateLinkScopesClient.UpdateTags method.
type PrivateLinkScopesClientUpdateTagsOptions struct {
	// placeholder for future optional parameters
}

// ScheduledQueryRulesClientCreateOrUpdateOptions contains the optional parameters for the ScheduledQueryRulesClient.CreateOrUpdate
// method.
type ScheduledQueryRulesClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// ScheduledQueryRulesClientDeleteOptions contains the optional parameters for the ScheduledQueryRulesClient.Delete method.
type ScheduledQueryRulesClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// ScheduledQueryRulesClientGetOptions contains the optional parameters for the ScheduledQueryRulesClient.Get method.
type ScheduledQueryRulesClientGetOptions struct {
	// placeholder for future optional parameters
}

// ScheduledQueryRulesClientListByResourceGroupOptions contains the optional parameters for the ScheduledQueryRulesClient.NewListByResourceGroupPager
// method.
type ScheduledQueryRulesClientListByResourceGroupOptions struct {
	// placeholder for future optional parameters
}

// ScheduledQueryRulesClientListBySubscriptionOptions contains the optional parameters for the ScheduledQueryRulesClient.NewListBySubscriptionPager
// method.
type ScheduledQueryRulesClientListBySubscriptionOptions struct {
	// placeholder for future optional parameters
}

// ScheduledQueryRulesClientUpdateOptions contains the optional parameters for the ScheduledQueryRulesClient.Update method.
type ScheduledQueryRulesClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// TenantActionGroupsClientCreateOrUpdateOptions contains the optional parameters for the TenantActionGroupsClient.CreateOrUpdate
// method.
type TenantActionGroupsClientCreateOrUpdateOptions struct {
	// placeholder for future optional parameters
}

// TenantActionGroupsClientDeleteOptions contains the optional parameters for the TenantActionGroupsClient.Delete method.
type TenantActionGroupsClientDeleteOptions struct {
	// placeholder for future optional parameters
}

// TenantActionGroupsClientGetOptions contains the optional parameters for the TenantActionGroupsClient.Get method.
type TenantActionGroupsClientGetOptions struct {
	// placeholder for future optional parameters
}

// TenantActionGroupsClientListByManagementGroupIDOptions contains the optional parameters for the TenantActionGroupsClient.NewListByManagementGroupIDPager
// method.
type TenantActionGroupsClientListByManagementGroupIDOptions struct {
	// placeholder for future optional parameters
}

// TenantActionGroupsClientUpdateOptions contains the optional parameters for the TenantActionGroupsClient.Update method.
type TenantActionGroupsClientUpdateOptions struct {
	// placeholder for future optional parameters
}

// TenantActivityLogsClientListOptions contains the optional parameters for the TenantActivityLogsClient.NewListPager method.
type TenantActivityLogsClientListOptions struct {
	// Reduces the set of data collected.
	// The $filter is very restricted and allows only the following patterns.
	// - List events for a resource group: $filter=eventTimestamp ge '' and eventTimestamp le '' and eventChannels eq 'Admin,
	// Operation' and resourceGroupName eq ''.
	// - List events for resource: $filter=eventTimestamp ge '' and eventTimestamp le '' and eventChannels eq 'Admin, Operation'
	// and resourceUri eq ''.
	// - List events for a subscription: $filter=eventTimestamp ge '' and eventTimestamp le '' and eventChannels eq 'Admin, Operation'.
	// - List events for a resource provider: $filter=eventTimestamp ge '' and eventTimestamp le '' and eventChannels eq 'Admin,
	// Operation' and resourceProvider eq ''.
	// - List events for a correlation Id: api-version=2014-04-01&$filter=eventTimestamp ge '2014-07-16T04:36:37.6407898Z' and
	// eventTimestamp le '2014-07-20T04:36:37.6407898Z' and eventChannels eq 'Admin,
	// Operation' and correlationId eq ''.
	// NOTE: No other syntax is allowed.
	Filter *string

	// Used to fetch events with only the given properties.
	// The $select argument is a comma separated list of property names to be returned. Possible values are: authorization, claims,
	// correlationId, description, eventDataId, eventName, eventTimestamp,
	// httpRequest, level, operationId, operationName, properties, resourceGroupName, resourceProviderName, resourceId, status,
	// submissionTimestamp, subStatus, subscriptionId
	Select *string
}

// VMInsightsClientGetOnboardingStatusOptions contains the optional parameters for the VMInsightsClient.GetOnboardingStatus
// method.
type VMInsightsClientGetOnboardingStatusOptions struct {
	// placeholder for future optional parameters
}
